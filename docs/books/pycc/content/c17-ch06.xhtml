<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" lang="fa" dir="rtl">

<head>
    <meta charset="UTF-8" />
    <title>دیکشنری</title>
    <meta name="description" content="وب‌سایت قاسم کیانی مقدم" />
    <meta name="keywords" content="قاسم کیانی مقدم, وب‌سایت, وب‌سایت قاسم کیانی مقدم, کتاب, فارسی, کتاب فارسی, ترجمه, برنامه‌نویسی, جاوا, جاوا اسکریپت, پزشکی, طب اطفال" />
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no" />
    <link rel="stylesheet" crossorigin="anonymous" href="https://cdn.rtlcss.com/bootstrap/v4.0.0/css/bootstrap.min.css" integrity="sha384-P4uhUIGk/q1gaD/NdgkBIl3a6QywJjlsFJFk7SPRdruoGddvRVSwv5qFnvZ73cpz" />
    <link rel="stylesheet" crossorigin="anonymous" href="https://use.fontawesome.com/releases/v5.7.1/css/all.css" integrity="sha384-fnmOCqbTlWIlj8LyTjo7mOUStjsKC4pOpQbqyi7RrhN7udi9RwhKkMHpvLbHG9Sr" />
    <link rel="icon" type="image/x-icon" href="../../../favicon.ico" />
    <style type="text/css">
        @import url(https://fonts.googleapis.com/css?family=Droid%20Sans);
        @import url(https://fonts.googleapis.com/css?family=Droid%20Serif);
        @import url(https://fonts.googleapis.com/css?family=Droid%20Arabic%20Kufi);
        @import url(https://fonts.googleapis.com/css?family=Droid%20Arabic%20Naskh);

        html,
        body,
        input,
        textarea,
        select,
        option,
        h1,
        h2,
        h3,
        h4,
        h5,
        h6 {
            font-family: Droid Arabic Naskh, Droid Serif;
        }

        nav,
        .nav {
            font-family: Droid Arabic Kufi, Droid Sans;
        }

        h1,
        h2,
        h3,
        h4,
        h5,
        h6 {
            font-family: Droid Arabic Naskh, Droid Serif;
        }

        #footer {
            margin-top: 0.5rem;
            padding-top: 0.5rem;
            border-top: #eeeeee solid thick;
        }
    </style>
    <style>
        @import url(https://fonts.googleapis.com/css?family=Courier+Prime);

        div.row.pager {
            margin-top: 0.5em;
            padding: 0.5em 0;
            border-top: solid #cccccc 2px;
            background-color: #dddddd;
        }

        div.pager-prev {}

        div.pager-title {}

        div.pager-next {}
    </style>
    <link rel="stylesheet" type="text/css" href="styles.css" />
</head>

<body style="min-height: 75rem;">
    <nav class="navbar navbar-expand-md navbar-dark bg-dark mb-4">
        <div class="container"><a class="navbar-brand" href="../../../">وب‌سایت قاسم کیانی مقدم</a><button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#divNavBarToggle" aria-controls="divNavBarToggle" aria-expanded="false" aria-label="Toggle navigation"><span class="navbar-toggler-icon"></span></button>
            <div id="divNavBarToggle" class="collapse navbar-collapse">
                <ul class="navbar-nav mr-auto">
                    <li class="nav-item active"><a class="nav-link" href="../../">کتاب‌ها<span class="sr-only"> (current)</span></a></li>
                    <li class="nav-item"><a class="nav-link" href="../../../essays/">مقالات</a></li>
                    <li class="nav-item"><a class="nav-link" href="../../../translation/">ترجمه</a></li>
                    <li class="nav-item"><a class="nav-link" href="../../../about/">درباره</a></li>
                    <li class="nav-item"><a class="nav-link" href="../../../contact/">تماس</a></li>
                </ul>
            </div>
        </div>
    </nav>
    <div class="container">
        <div class="row">
            <main class="col-md-10 order-md-last">
                <div class="ch" id="ch06">
                    <h2 class="ch-title"><a class="bkmk" name="ch06"></a><a class="rtoc" href="c06-toc.xhtml"><span class="ch-title-num">۶</span><br /><span class="ch-title-text">دیکشنری</span></a></h2><img style="float:   right; margin-left:  0.5em; margin-bottom: 0.25em;" alt="تصویر ابتدای فصل" src="images/ch.svg" />
                    <a id="p091"></a>
                    <p>در این فصل طرز استفاده از دیکشنری را در پایتون یاد می‌گیرید که به شما امکان می‌دهد که اطلاعات مرتبط را به هم پیوند بدهید. چگونگی دسترسی به اطلاعات درون دیکشنری و نحوه‌ی تغییر دادن آن اطلاعات را یاد خواهید گرفت. از آنجا که دیکشنری می‌تواند اطلاعات تقریباً نامحدودی را در خود جای دهد، لذا به شما نشان خواهم داد که چگونه روی داده‌های درون دیکشنری حلقه تشکیل دهید. به‌علاوه، نحوه‌ی استفاده‌ی تو در تو از دیکشنری در داخل لیست، لیست در داخل دیکشنری، و حتی دیکشنری در داخل دیکشنری را یاد خواهید گرفت.</p>
                    <p>آشنایی با دیکشنری به شما امکان می‌دهد که انواع مختلف اشیای جهان واقعی را با پایتون مدل‌سازی کنید. مثلاً خواهید توانست یک دیکشنری ایجاد کنید که معرف یک شخص است، و هر میزان اطلاعات را که بخواهید، درباره‌ی آن شخص در داخل آن ذخیره کنید. می‌توانید نام، سن، مکان، شغل، و دیگری ویژگی‌های شخص مورد نظر را درون آن قرار دهید. خواهید توانست هر دو نوع از <a id="p092"></a> اطلاعات را که بتوان به هم وصل کرد، مانند لیست کلمات و معانی آن‌ها، لیست نام افراد و عدد محبوب آن‌ها، لیست کوه‌ها و ارتفاع آن‌ها، و امثال این‌ها را ذخیره کنید.</p>
                    <div class="sect" id="ch06lev1sec1"><a class="bkmk" name="ch06lev1sec1"></a>
                        <h3>یک دیکشنری ساده</h3>
                        <p>فرض کنید یک بازی درباره‌ی بیگانگان برون‌زمینی دارید که می‌تواند رنگ‌ها و امتیازات مختلف داشته باشد. این دیکشنری ساده، اطلاعات مربوط به یک بیگانه را ذخیره کرده است:</p>
                        <div class="snippet">
                            <div class="snippet-title" dir="ltr">alien.py</div>
                            <pre class="snippet" dir="ltr">alien_0 = {'color': 'green', 'points': 5}

print(alien_0['color'])
print(alien_0['points'])</pre>
                        </div>
                        <p>دیکشنری <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">alien_0</span><span class="rlm">‏</span> رنگ و مقدار امتیاز بیگانه را ذخیره کرده است. دو سطر آخر اطلاعات را می‌خواند و به‌صورت زیر نمایش می‌دهد:</p>
                        <div class="snippet">
                            <pre class="snippet" dir="ltr">green
5</pre>
                        </div>
                        <p>مانند اکثر مفاهیم برنامه‌نویسی، یاد گرفتن استفاده از دیکشنری هم نیاز به تمرین دارد. پس از آنکه مدتی با دیکشنری‌ها کار کردید، به زودی خواهید دید که چقدر خوب می‌توان موقعیت‌های دنیای واقعی را با آن‌ها مدل‌سازی کرد.</p>
                    </div>
                    <div class="sect" id="ch06lev1sec2"><a class="bkmk" name="ch06lev1sec2"></a>
                        <h3>کار با دیکشنری‌ها</h3>
                        <p>در پایتون، <span class="emphasis">دیکشنری</span> مجموعه‌ای از <span class="emphasis">زوج‌های کلید-مقدار</span> است. هر کلید به یک مقدار پیوند شده است، و می‌توانید با استفاده از کلید به مقدار پیوند شده با آن دسترسی پیدا کنید. مقدار پیوند شده به یک کلید می‌تواند یک عدد، یک رشته، یک لیست، یا حتی یک دیکشنری دیگر باشد. در واقع، هر شیئی را که می‌توانید در پایتون ایجاد کنید، می‌توانید به‌عنوان مقدار در دیکشنری به کار ببرید.</p>
                        <p>در پایتون، دیکشنری با آکلاد (<span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">{}</span><span class="rlm">‏</span>) مشخص می‌شود، و یک سری زوج‌های کلید-مقدار در داخل آکلاد قرار می‌گیرد، که نمونه‌ی آن را در مثال قبل دیدید:</p>
                        <div class="snippet">
                            <pre class="snippet" dir="ltr">alien_0 = {'color': 'green', 'points': 5}</pre>
                        </div>
                        <p><span class="emphasis">زوج کلید-مقدار</span> یک مجموعه مقادیر است که به یکدیگر مرتبط شده است. وقتی که کلید را بدهید، پایتون مقدار پیوند شده به آن کلید را به دست می‌دهد. هر کلید با دونقطه به مقدار آن مربوط می‌شود، و زوج‌های کلید-مقدار با کاما از یکدیگر جدا می‌شوند. هر تعداد زوج کلید-مقدار که خواستید، می‌توانید در یک دیکشنری قرار دهید.</p>
                        <p>ساده‌ترین دیکشنری دقیقاً یک زوج کلید-مقدار دارد، که در این نسخه‌ی تغییر یافته از دیکشنری <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">alien_0</span><span class="rlm">‏</span> نشان داده شده است:</p>
                        <div class="snippet">
                            <pre class="snippet" dir="ltr">alien_0 = {'color': 'green'}</pre>
                        </div><a id="p093"></a>
                        <p>این دیکشنری یک قطعه اطلاعات را درباره‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">alien_0</span><span class="rlm">‏</span> ذخیره می‌کند، که شامل رنگ بیگانه است. رشته‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">'color'</span><span class="rlm">‏</span> در این دیکشنری یک کلید است، و مقدار مرتبط با آن <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">'green'</span><span class="rlm">‏</span> است.</p>
                        <div class="sect" id="ch06lev2sec1"><a class="bkmk" name="ch06lev2sec1"></a>
                            <h4>دسترسی به مقادیر دیکشنری</h4>
                            <p>برای گرفتن مقدار مرتبط با یک کلید، نام دیکشنری را بنویسید و سپس کلید را داخل کروشه قرار دهید، مانند نمونه‌ی زیر:</p>
                            <div class="snippet">
                                <div class="snippet-title" dir="ltr">alien.py</div>
                                <pre class="snippet" dir="ltr"><span class="ash">alien_0 = {'color': 'green'}</span>
print(alien_0['color'])</pre>
                            </div>
                            <p>این کد مقدار مرتبط با کلید <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">'color'</span><span class="rlm">‏</span> را از دیکشنری <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">alien_0</span><span class="rlm">‏</span> برمی‌گرداند:</p>
                            <div class="snippet">
                                <pre class="snippet" dir="ltr">green</pre>
                            </div>
                            <p>می‌توانید تعداد نامحدودی زوج‌های کلید-مقدار در یک دیکشنری داشته باشید. به‌عنوان مثال، دیکشنری اولیه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">alien_0</span><span class="rlm">‏</span> با زوج‌های کلید-مقدار را در اینجا می‌بینید:</p>
                            <div class="snippet">
                                <pre class="snippet" dir="ltr">alien_0 = {'color': 'green', 'points': 5}</pre>
                            </div>
                            <p>اکنون می‌توانید به رنگ یا امتیاز <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">alien_0</span><span class="rlm">‏</span> دسترسی پیدا کنید. اگر یک بازیکن این بیگانه را ساقط کند، می‌توانید با استفاده از کد زیر ببینید که چه مقدار امتیاز باید به بازیکن داده شود:</p>
                            <div class="snippet">
                                <pre class="snippet" dir="ltr"><span class="ash">alien_0 = {'color': 'green', 'points': 5}</span>

<span class="n" dir="ltr">1</span>new_points = alien_0['points']
<span class="n" dir="ltr">2</span>print(f"You just earned {new_points} points!")</pre>
                            </div>
                            <p>وقتی که دیکشنری تعریف شد، سطر مشخص شده با <span class="n" dir="ltr">1</span> مقدار مرتبط با کلید <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">'points'</span><span class="rlm">‏</span> را از دیکشنری می‌گیرد. سپس این مقدار به متغیر <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">new_points</span><span class="rlm">‏</span> اختصاص داده می‌شود. سطر <span class="n" dir="ltr">2</span> جمله‌ای نمایش می‌دهد و مقدار امتیاز کسب شده‌ی بازیکن را بیان می‌کند:</p>
                            <div class="snippet">
                                <pre class="snippet" dir="ltr">You just earned 5 points!</pre>
                            </div>
                            <p>اگر زمانی که یک بیگانه سرنگون می‌شود، این کد را اجرا کنید، مقدار امتیاز آن بیگانه مشخص خواهد شد.</p>
                        </div>
                        <div class="sect" id="ch06lev2sec2"><a class="bkmk" name="ch06lev2sec2"></a>
                            <h4>اضافه کردن زوج‌های کلید-مقدار جدید</h4>
                            <p>دیکشنری یک ساختار پویا است و در هر زمانی می‌توانید زوج‌های کلید-مقدار جدیدی را به آن اضافه کنید. برای اضافه کردن یک زوج کلید-مقدار جدید، باید نام دیکشنری و به دنبال آن کلید جدید را در داخل کروشه بنویسید، و مقدار جدید را به آن اختصاص دهید.</p>
                            <p>در اینجا می‌خواهیم دو قطعه‌ی جدید اطلاعات را به دیکشنری <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">alien_0</span><span class="rlm">‏</span> اضافه کنیم و آن مختصات <span class="rlm">‏</span><span class="lr" dir="ltr">x</span><span class="rlm">‏</span> و <span class="rlm">‏</span><span class="lr" dir="ltr">y</span><span class="rlm">‏</span> بیگانه است که به کمک آن خواهیم توانست بیگانه را در <a id="p094"></a>موقعیت خاصی روی صفحه‌ی نمایش ترسیم کنیم. فرض کنید می‌خواهیم بیگانه را در لبه‌ی چپ صفحه‌ی نمایش به فاصله‌ی ۲۵ پیکسل پایین‌تر از لبه‌ی بالا قرار دهیم. از آنجا که مختصات صفحه‌ی نمایش معمولاً از گوشه‌ی بالای سمت چپ آن شروع می‌شود، لذا برای قرار گرفتن بیگانه در لبه‌ی چپ صفحه‌ی نمایش، باید مختصه‌ی <span class="rlm">‏</span><span class="lr" dir="ltr">x</span><span class="rlm">‏</span> آن را ۰ قرار دهیم، و برای اینکه ۲۵ پیکسل از بالا فاصله داشته باشد، باید به مختصه‌ی <span class="rlm">‏</span><span class="lr" dir="ltr">y</span><span class="rlm">‏</span> آن مقدار ۲۵ اختصاص دهیم، به صورت زیر:</p>
                            <div class="snippet">
                                <div class="snippet-title" dir="ltr">alien.py</div>
                                <pre class="snippet" dir="ltr"><span class="ash">alien_0 = {'color': 'green', 'points': 5}</span>
print(alien_0)

<span class="n" dir="ltr">1</span>alien_0['x_position'] = 0
<span class="n" dir="ltr">2</span>alien_0['y_position'] = 25
print(alien_0)</pre>
                            </div>
                            <p>در ابتدا همان دیکشنری را که قبلاً با آن کار می‌کردیم، تعریف می‌کنیم. سپس دیکشنری را نمایش می‌دهیم که وضعیت کنونی اطلاعات آن را نشان می‌دهد. در سطر <span class="n" dir="ltr">1</span>، زوج کلید-مقدار جدید را به دیکشنری اضافه می‌کنیم: کلید <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">'x_position'</span><span class="rlm">‏</span> و مقدار <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">0</span><span class="rlm">‏</span> است. همین کار را برای کلید <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">'y_position'</span><span class="rlm">‏</span> در سطر <span class="n" dir="ltr">2</span> انجام می دهیم. وقتی که دیکشنری تغییر یافته را نمایش دهیم، می‌بینیم که دو زوج کلید-مقدار اضافی در آن وجود دارد:</p>
                            <div class="snippet">
                                <pre class="snippet" dir="ltr">{'color': 'green', 'points': 5}
{'color': 'green', 'points': 5, 'y_position': 25, 'x_position': 0}</pre>
                            </div>
                            <p>نسخه نهایی دیکشنری حاوی چهار زوج کلید-مقدار است. دو تای اول رنگ و امتیاز آن را مشخص می‌کند، و دو تای دیگر موقعیت بیگانه را مشخص می‌نماید.</p>
                            <div class="note">
                                <h6 class="note-title">توجه</h6>
                                <p>از پایتون <span class="rlm">‏</span><span class="lr" dir="ltr">۳.۷</span><span class="rlm">‏</span> به بعد، دیکشنری ترتیب تعیین شدن زوج ها را حفظ می‌کند. وقتی که یک دیکشنری را نمایش دهید یا اینکه روی عناصر آن حلقه تشکیل دهید، عناصر را به همان ترتیبی مشاهده خواهید کرد که به دیکشنری اضافه شده‌اند.</p>
                            </div>
                        </div>
                        <div class="sect" id="ch06lev2sec3"><a class="bkmk" name="ch06lev2sec3"></a>
                            <h4>شروع کردن با یک دیکشنری خالی</h4>
                            <p>بعضی از اوقات، راحت‌تر و چه بسا ضروری است که با یک دیکشنری خالی شروع کنید، و سپس آیتم‌های جدید را به آن اضافه کنید. برای پر کردن یک دیکشنری خالی، می‌‌توانید ابتدا آن را با یک آکلاد خالی تعریف کنید و سپس هر زوج کلید-مقدار را هر کدام در یک سطر به آن اضافه کنید. مثلاً در اینجا نحوه‌ی ساختن دیکشنری <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">alien_0</span><span class="rlm">‏</span> با این روش نشان داده شده است:</p>
                            <div class="snippet">
                                <div class="snippet-title" dir="ltr">alien.py</div>
                                <pre class="snippet" dir="ltr">alien_0 = {}

alien_0['color'] = 'green'
alien_0['points'] = 5

print(alien_0)</pre>
                            </div>
                            <p>در اینجا ما یک دیکشنری خالی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">alien_0</span><span class="rlm">‏</span> تعریف می‌کنیم، و سپس مقادیر رنگ و امتیاز را به آن اضافه می‌کنیم. نتیجه‌ی آن همان دیکشنری‌ای است که در مثال‌های قبل مورد استفاده قرار دادیم:</p>
                            <div class="snippet">
                                <pre class="snippet" dir="ltr">{'color': 'green', 'points': 5}</pre>
                            </div><a id="p095"></a>
                            <p>به‌طور معمول، زمانی که می‌خواهید داده‌های ارائه شده از سوی کاربر را در یک دیکشنری ذخیره کنید یا زمانی که برنامه‌ای می‌نویسید که به‌طور خودکار تعداد زیادی زوج‌های کلید-مقدار ایجاد می‌کند، برای ذخیره‌ی آن‌ها از دیکشنری خالی استفاده می‌کنید.</p>
                        </div>
                        <div class="sect" id="ch06lev2sec4"><a class="bkmk" name="ch06lev2sec4"></a>
                            <h4>تغییر دادن مقادیر در یک دیکشنری</h4>
                            <p>برای تغییر دادن یک مقدار در یک دیکشنری، پس از نام دیکشنری، کلید را داخل کروشه بنویسید و سپس مقدار جدید را به آن اختصاص دهید. مثلاً فرض کنید در اثنای بازی، رنگ بیگانه از سبز به زرد تغییر می‌کند:</p>
                            <div class="snippet">
                                <div class="snippet-title" dir="ltr">alien.py</div>
                                <pre class="snippet" dir="ltr">alien_0 = {'color': 'green'}
print(f"The alien is {alien_0['color']}.")

alien_0['color'] = 'yellow'
print(f"The alien is now {alien_0['color']}.")</pre>
                            </div>
                            <p>ابتدا یک دیکشنری به نام <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">alien_0</span><span class="rlm">‏</span> تعریف می‌کنیم که فقط حاوی رنگ بیگانه است؛ بعد مقدار رنگ پیوند شده به کلید <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">'color'</span><span class="rlm">‏</span> را به <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">'yellow'</span><span class="rlm">‏</span> تغییر می‌دهیم. خروجی نشان می‌دهد که واقعاً رنگ بیگانه از سبز به زرد تغییر یافته است:</p>
                            <div class="snippet">
                                <pre class="snippet" dir="ltr">The alien is green.
The alien is now yellow.</pre>
                            </div>
                            <p>به‌عنوان یک مثال جالب‌تر، موقعیت یک بیگانه را در نظر می‌گیریم که می‌تواند با سرعت‌های متفاوتی حرکت کند. مقداری را به‌عنوان سرعت بیگانه ذخیره می‌کنیم، و سپس با استفاده از آن محاسبه می‌کنیم که بیگانه باید تا کجا به طرف راست جابه‌جا شود:</p>
                            <div class="snippet">
                                <pre class="snippet" dir="ltr">alien_0 = {'x_position': 0, 'y_position': 25, 'speed': 'medium'}
print(f"Original position: {alien_0['x_position']}")

# Move the alien to the right.
# Determine how far to move the alien based on its current speed.
<span class="n" dir="ltr">1</span>if alien_0['speed'] == 'slow':
    x_increment = 1
elif alien_0['speed'] == 'medium':
    x_increment = 2
else:
    # This must be a fast alien.
    x_increment = 3

# The new position is the old position plus the increment.
<span class="n" dir="ltr">2</span>alien_0['x_position'] = alien_0['x_position'] + x_increment

print(f"New position: {alien_0['x_position']}")</pre>
                            </div>
                            <p>ابتدا یک بیگانه با مقدار اولیه‌ای برای موقعیت <span class="emphasis"><span class="rlm">‏</span><span class="lr" dir="ltr">x</span><span class="rlm">‏</span></span> و موقعیت <span class="emphasis"><span class="rlm">‏</span><span class="lr" dir="ltr">y</span><span class="rlm">‏</span></span> و مقدار <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">'medium'</span><span class="rlm">‏</span> برای سرعت تعریف می‌کنیم. به <a id="p096"></a> خاطر سادگی، مقادیر رنگ و امتیاز را حذف کرده‌ایم، ولی اگر آن‌ها را هم در نظر می‌گرفتیم، باز هم این مثال به همین صورت عمل می‌کرد. هم‌چنین، مقدار اولیه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">x_position</span><span class="rlm">‏</span> را نمایش می‌دهیم، تا معلوم شود که بیگانه تا کجا به طرف راست جابه‌جا می‌شود.</p>
                            <p>در <span class="n" dir="ltr">1</span>، یک زنجیره‌ی <span class="rlm">‏</span><span class="lr" dir="ltr"><span class="literal">if</span>-<span class="literal">elif</span>-<span class="literal">else</span></span><span class="rlm">‏</span> مشخص می‌کند که بیگانه تا کجا باید به طرف راست جابه‌جا شود، و این مقدار را به متغیر <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">x_increment</span><span class="rlm">‏</span> اختصاص می‌دهد. اگر سرعت بیگانه <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">'slow'</span><span class="rlm">‏</span> باشد، یک واحد به طرف راست جابه‌جا می‌شود؛ اگر سرعت <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">'medium'</span><span class="rlm">‏</span> باشد، دو واحد به طرف راست جابه‌جا می‌شود؛ و اگر <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">'fast'</span><span class="rlm">‏</span> باشد، سه واحد به طرف راست جابه‌جا می‌شود. وقتی که مقدار افزایش محاسبه شد، در سطر <span class="n" dir="ltr">2</span> به مقدار <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">x_position</span><span class="rlm">‏</span> اضافه می‌شود، و نتیجه‌ی آن در کلید <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">x_position</span><span class="rlm">‏</span> دیکشنری ذخیره می‌شود.</p>
                            <p>از آنجا که سرعت این بیگانه متوسط است، موقعیت آن دو واحد به طرف راست جابه‌جا می‌شود:</p>
                            <div class="snippet">
                                <pre class="snippet" dir="ltr">Original x-position: 0
New x-position: 2</pre>
                            </div>
                            <p>این تکنیک خیلی باحال است: با تغییر دادن یک مقدار در دیکشنری بیگانه، می‌توانید رفتار کلی بیگانه را تغییر دهید. مثلاً برای اینکه این بیگانه را که سرعت متوسط دارد، به یک بیگانه‌ی سریع تبدیل کنید، سطر زیر را اضافه می‌کنید:</p>
                            <div class="snippet">
                                <pre class="snippet" dir="ltr">alien_0['speed'] = 'fast'</pre>
                            </div>
                            <p>در این صورت، دفعه‌ی بعد که کد را اجرا می‌کنید، بلوک <span class="rlm">‏</span><span class="lr" dir="ltr"><span class="literal">if</span>-<span class="literal">elif</span>-<span class="literal">else</span></span><span class="rlm">‏</span> مقدار بیشتری را به <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">x_increment</span><span class="rlm">‏</span> اختصاص خواهد داد.</p>
                        </div>
                        <div class="sect" id="ch06lev2sec5"><a class="bkmk" name="ch06lev2sec5"></a>
                            <h4>حذف زوج‌های کلید-مقدار</h4>
                            <p>وقتی که دیگر به یکی از اطلاعات ذخیره شده در دیکشنری نیاز ندارید، می‌توانید با استفاده از دستورالعمل <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">del</span><span class="rlm">‏</span> آن زوج کلید-مقدار را به‌طور کامل حذف کنید. تنها چیزی که برای <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">del</span><span class="rlm">‏</span> لازم است، نام دیکشنری و نام کلیدی است که می‌خواهید حذف کنید.</p>
                            <p>مثلاً فرض کنید می‌خواهیم کلید <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">'points'</span><span class="rlm">‏</span> را به همراه مقدار آن از دیکشنری <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">alien_0</span><span class="rlm">‏</span> حذف کنیم:</p>
                            <div class="snippet">
                                <div class="snippet-title" dir="ltr">alien.py</div>
                                <pre class="snippet" dir="ltr">alien_0 = {'color': 'green', 'points': 5}
print(alien_0)

<span class="n" dir="ltr">1</span>del alien_0['points']
print(alien_0)</pre>
                            </div>
                            <p>سطر <span class="n" dir="ltr">1</span> به پایتون می‌گوید که کلید <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">'points'</span><span class="rlm">‏</span> را از دیکشنری <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">alien_0</span><span class="rlm">‏</span> حذف کند و مقدار پیوند شده با این کلید را نیز بردارد. خروجی نشان می‌دهد که کلید <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">'points'</span><span class="rlm">‏</span> و مقدار آن <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">5</span><span class="rlm">‏</span> از دیکشنری حذف شده است، ولی بقیه‌ی دیکشنری تغییری نکرده است:</p>
                            <div class="snippet">
                                <pre class="snippet" dir="ltr">{'color': 'green', 'points': 5}
{'color': 'green'}</pre>
                            </div>
                            <div class="note">
                                <h6 class="note-title">توجه</h6>
                                <p>در نظر داشته باشید که زوج کلید-مقدار به‌طور دایمی حذف می‌شود.</p>
                            </div>
                        </div>
                        <div class="sect" id="ch06lev2sec6"><a class="bkmk" name="ch06lev2sec6"></a>
                            <h4>یک دیکشنری حاوی اشیای مشابه</h4>
                            <a id="p097"></a>
                            <p>مثال قبل شامل ذخیره کردن انواع متفاوت اطلاعات درباره‌ی یک شیء، یک بیگانه در بازی، است. از طرف دیگر، می‌توانید از دیکشنری برای ذخیره کردن یک نوع اطلاعات درباره‌ی تعداد زیادی اشیا استفاده کنید. مثلاً فرض کنید می‌خواهید از چند نفر نظرسنجی کنید و زبان برنامه‌نویسی مورد علاقه‌ی آن‌ها را بپرسید. می‌توان نتایج این نظرسنجی ساده را به‌صورت زیر در یک دیکشنری ذخیره کرد:</p>
                            <div class="snippet">
                                <pre class="snippet" dir="ltr">favorite_languages = {
    'jen': 'python',
    'sarah': 'c',
    'edward': 'ruby',
    'phil': 'python',
    }</pre>
                            </div>
                            <p>همان طور که می‌بینید، ما دیکشنری نسبتاً بزرگی را در چندین سطر نوشته‌ایم. هر کلید نام یک شخص است که به نظرسنجی جواب داده است، و مقدار مربوطه، زبان برنامه‌نویسی مورد علاقه‌ی او است. وقتی که می‌دانید که برای تعریف دیکشنری به بیش از یک سطر نیاز دارید، بعد از باز کردن آکلاد کلید <span class="rlm">‏</span><span class="key" dir="ltr">enter</span><span class="rlm">‏</span> را بزنید. آنگاه سطر بعدی را یک سطح تورفتگی بدهید (چهار اسپیس)، و اولین زوج کلید-مقدار را بنویسید و پس از آن کاما بگذارید. از اینجا به بعد، وقتی که کلید <span class="rlm">‏</span><span class="key" dir="ltr">enter</span><span class="rlm">‏</span> را می‌زنید، ویرایشگر متنی شما باید به‌طور خودکار تمام سطرهای بعدی را مانند سطر قبلی تورفتگی بدهد تا زوج‌های بعدی کلید-مقدار را بنویسید.</p>
                            <p>وقتی که کار تعریف دیکشنری تمام شد، در یک سطر جدید پس از آخرین زوج کلید-مقدار، آکلاد را ببندید، به‌طوری که تورفتگی آن هم‌ردیف با کلیدهای دیکشنری باشد. بد نیست که بعد از آخرین زوج کلید-مقدار هم یک کاما بگذارید، تا اگر بخواهید یک زوج کلید-مقدار دیگر در سطر بعد اضافه کنید، آماده باشد.</p>
                            <div class="note">
                                <h6 class="note-title">توجه</h6>
                                <p>اکثر ویرایشگرها نوعی قابلیت دارند که در فرمت کردن لیست‌ها و دیکشنری‌های طولانی مانند مثال فوق به شما کمک می‌کند. روش‌های دیگری هم برای فرمت دیکشنری‌های طولانی هست، بنابراین، ممکن است در ویرایشگر شما یا منابع دیگر، فرمت‌های دیگری نیز مورد استفاده قرار گیرد.</p>
                            </div>
                            <p>برای استفاده از این دیکشنری، اگر نام شخصی که در نظرسنجی شرکت کرده است معلوم باشد، به آسانی می‌توانید زبان برنامه‌نویسی مورد علاقه‌ی او را بدانید:</p>
                            <div class="snippet">
                                <div class="snippet-title" dir="ltr">favorite_languages.py</div>
                                <pre class="snippet" dir="ltr"><span class="ash">favorite_languages = {</span>
    <span class="ash">'jen': 'python',</span>
    <span class="ash">'sarah': 'c',</span>
    <span class="ash">'edward': 'ruby',</span>
    <span class="ash">'phil': 'python',</span>
    <span class="ash">}</span>

<span class="n" dir="ltr">1</span>language = favorite_languages['sarah'].title()
print(f"Sarah's favorite language is {language}.")</pre>
                            </div>
                            <p>برای اینکه ببینیم سارا چه زبانی را انتخاب کرده است، مقدار زیر را درخواست می‌کنیم:</p>
                            <div class="snippet">
                                <pre class="snippet" dir="ltr">favorite_languages['sarah']</pre>
                            </div><a id="p098"></a>
                            <p>با این دستور، زبان برنامه‌نویسی مورد علاقه‌ی سارا را در سطر <span class="n" dir="ltr">1</span> از دیکشنری می‌گیریم و آن را به متغیر <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">language</span><span class="rlm">‏</span> اختصاص می‌دهیم. ایجاد یک متغیر جدید در اینجا به ما امکان می‌دهد که فراخوانی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">print()</span><span class="rlm">‏</span> را خیلی تمیزتر بنویسیم. خروجی برنامه، زبان برنامه‌نویسی مورد علاقه‌ی سارا را نشان می‌دهد: </p>
                            <div class="snippet">
                                <pre class="snippet" dir="ltr">Sarah's favorite language is C.</pre>
                            </div>
                            <p>همین روش را می‌توانید برای سایر افراد موجود در دیکشنری مورد استفاده قرار دهید.</p>
                        </div>
                        <div class="sect" id="ch06lev2sec7"><a class="bkmk" name="ch06lev2sec7"></a>
                            <h4>استفاده از <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">get()</span><span class="rlm">‏</span> برای دسترسی به مقادیر</h4>
                            <p>در صورتی که برای دسترسی به مقدار مربوط با یک کلید در دیکشنری، آن کلید را داخل کروشه بنویسید، ممکن است مشکلی ایجاد شود: در صورتی که آن کلید در دیکشنری وجود نداشته باشد، یک خطا بروز خواهد کرد.</p>
                            <p>مثلاً ببینیم که اگر بخواهیم امتیاز یک بیگانه را که برایش امتیازی تعیین نشده است، بگیریم، چه اتفاقی می‌افتد:</p>
                            <div class="snippet">
                                <div class="snippet-title" dir="ltr">alien_no_points.py</div>
                                <pre class="snippet" dir="ltr">alien_0 = {'color': 'green', 'speed': 'slow'}
print(alien_0['points'])</pre>
                            </div>
                            <p>این منجر به رهگیری خطای زیر می‌شود که در آن یک <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">KeyError</span><span class="rlm">‏</span> نشان داده شده است:</p>
                            <div class="snippet">
                                <pre class="snippet" dir="ltr">Traceback (most recent call last):
  File "alien_no_points.py", line 2, in &lt;module&gt;
    print(alien_0['points'])
KeyError: 'points'</pre>
                            </div>
                            <p>درباره‌ی نحوه‌ی رویارویی با خطاها به‌صورت کلی در <span class="ref"><a href="c21-ch10.xhtml">فصل ۱۰</a></span> چیزهای بیشتری یاد خواهید گرفت. به‌طور خاص، در مورد دیکشنری‌ها، می‌توانید از متد <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">get()</span><span class="rlm">‏</span> استفاده کنید، تا در صورتی که کلید مورد نظر وجود نداشته باشد، یک مقدار پیش‌فرض برگرداند.</p>
                            <p>متد <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">get()</span><span class="rlm">‏</span> کلید را به‌عنوان آرگومان اول دریافت می‌کند. آرگومان دوم اختیاری است و مقداری است که در صورتی که کلید وجود نداشته باشد، برگردانده می‌شود:</p>
                            <div class="snippet">
                                <pre class="snippet" dir="ltr"><span class="ash">alien_0 = {'color': 'green', 'speed': 'slow'}</span>

point_value = alien_0.get('points', 'No point value assigned.')
print(point_value)</pre>
                            </div>
                            <p>اگر کلید <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">'points'</span><span class="rlm">‏</span> در دیکشنری وجود داشته باشد، مقدار متناظر با آن را دریافت خواهید کرد. اما اگر وجود نداشته باشد، مقدار پیش‌فرض را دریافت خواهید کرد. در این حالت، <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">points</span><span class="rlm">‏</span> وجود ندارد، و به جای خطا، یک پیام مناسب دریافت می‌کنیم:</p>
                            <div class="snippet">
                                <pre class="snippet" dir="ltr">No point value assigned.</pre>
                            </div>
                            <p>در صورتی که این احتمال وجود داشته باشد که کلید مورد نظر شما موجود نباشد، شاید بهتر باشد که به جای نماد کروشه، از متد <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">get()</span><span class="rlm">‏</span> استفاده کنید.</p>
                            <div class="note">
                                <h6 class="note-title">توجه</h6>
                                <a id="p099"></a>
                                <p>در صورتی که در فراخوانی متد <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">get()</span><span class="rlm">‏</span> آرگومان دوم را ارائه نکنید و کلید وجود نداشته باشد، پایتون مقدار <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">None</span><span class="rlm">‏</span> برمی‌گرداند. مقدار ویژه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">None</span><span class="rlm">‏</span> یعنی «مقداری وجود ندارد». این یک خطا نیست: مقدار ویژه‌ای است که معنی آن عدم وجود مقدار است. کاربردهای بیشتری از <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">None</span><span class="rlm">‏</span> را در <span class="ref"><a href="c19-ch08.xhtml">فصل ۸</a></span> خواهید دید.</p>
                            </div>
                            <div class="sidebar">
                                <h6 class="sidebar-title">خودتان امتحان کنید</h6>
                                <p class="tiy1"><span class="tiy" id="ch06_tiy01"><span class="tiy-num">۶-۱</span>. <span class="tiy-title">شخص</span>: </span> با استفاده از یک دیکشنری، اطلاعاتی را درباره‌ی یک شخص ذخیره کنید. نام، نام خانوادگی، سن، و شهر محل سکونت شخص را در آن قرار دهید. مثلاً می‌توانید از کلیدهای <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">first_name</span><span class="rlm">‏</span>، <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">last_name</span><span class="rlm">‏</span>، <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">age</span><span class="rlm">‏</span>، و <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">city</span><span class="rlm">‏</span> استفاده کنید. هر کدام از اطلاعات ذخیره شده در دیکشنری را نمایش دهید.</p>
                                <p class="tiy1"><span class="tiy" id="ch06_tiy02"><span class="tiy-num">۶-۲</span>. <span class="tiy-title">عدد مورد علاقه</span>: </span> اعداد مورد علاقه‌ی افراد را در یک دیکشنری ذخیره کنید. پنج نام را به‌عنوان کلیدهای دیکشنری در نظر بگیرید. برای هر شخص، یک عدد مورد علاقه در نظر بگیرید و آن را به‌عنوان مقدار آن کلید در دیکشنری ذخیره کنید. نام و عدد مورد علاقه‌ی هر شخص را نمایش دهید. اگر می‌خواهید که کار جالب‌تر شود، می‌توانید واقعاً از دوستانتان نظرسنجی کنید و داده‌های واقعی را در برنامه‌تان وارد کنید.</p>
                                <p class="tiy1"><span class="tiy" id="ch06_tiy03"><span class="tiy-num">۶-۳</span>. <span class="tiy-title">واژه‌نامه</span>: </span> از دیکشنری پایتون می‌توان به‌عنوان یک دیکشنری واقعی استفاده کرد. البته برای اینکه اشتباه نشود، از کلمه‌ی واژه‌نامه استفاده می‌کنیم.</p>
                                <ul>
                                    <li>پنج واژه‌نامه‌ی برنامه‌نویسی را که در فصل‌های قبل یاد گرفته‌اید، در نظر بگیرید. از این کلمات به‌عنوان کلید در دیکشنری خود استفاده کنید، و معنای آن‌ها را به‌عنوان مقدار ذخیره کنید.</li>
                                    <li>هر کلمه و معنای آن را به‌صورت یک خروجی مرتب فرمت کنید. مثلاً می‌توانید کلمه را بنویسید و بعد از آن دونقطه بگذارید و سپس معنای آن را بنویسید، یا اینکه کلمه را در یک سطر بنویسید و سپس معنای آن را با تورفتگی در سطر بعدی بنویسید. با استفاده از نویسه‌ی سر سطر (<span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">\n</span><span class="rlm">‏</span>) می‌توانید در خروجی بین هر زوج کلمه و معنی، یک سطر خالی وارد کنید.</li>
                                </ul>
                            </div>
                        </div>
                    </div>
                    <div class="sect" id="ch06lev1sec3"><a class="bkmk" name="ch06lev1sec3"></a>
                        <h3>تشکیل حلقه روی دیکشنری</h3>
                        <p>یک دیکشنری در پایتون می‌تواند فقط چند زوج کلید-مقدار داشته باشد یا اینکه میلیون‌ها زوج داشته باشد. از آنجا که دیکشنری می‌تواند حاوی مقادیر عظیم داده‌ها باشد، پایتون به شما امکان می‌دهد که روی دیکشنری حلقه تشکیل بدهید. از دیکشنری می‌توان برای ذخیره‌ی اطلاعات به روش‌های مختلف استفاده کرد؛ بنابراین، برای تشکیل حلقه بر روی دیکشنری نیز چندین روش متفاوت وجود دارد. می‌توانید حلقه را روی تمام زوج‌های کلید-مقدار دیکشنری، یا روی کلیدهای آن، و یا روی مقادیر آن تشکیل دهید.</p>
                        <div class="sect" id="ch06lev2sec8"><a class="bkmk" name="ch06lev2sec8"></a>
                            <h4>تشکیل حلقه روی تمام زوج‌های کلید-مقدار</h4>
                            <p>قبل از آنکه رویکردهای مختلف تشکیل حلقه را بررسی کنیم، دیکشنری جدیدی را ایجاد می‌کنیم که هدف آن ذخیره کردن اطلاعات مربوط به یک کاربر در یک وب‌سایت است. <a id="p100"></a>دیکشنری زیر نام کاربری، نام، و نام خانوادگی را ذخیره می‌کند:</p>
                            <div class="snippet">
                                <pre class="snippet" dir="ltr">user_0 = {
    'username': 'efermi',
    'first': 'enrico',
    'last': 'fermi',
    }</pre>
                            </div>
                            <p>بر اساس آنچه تا اینجا در این فصل یاد گرفتید، می‌توانید به هر کدام از اطلاعات موجود در <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">user_0</span><span class="rlm">‏</span> دسترسی پیدا کنید. ولی اگر بخواهید به همه‌ی چیزهایی که در دیکشنری این کاربر ذخیره شده دسترسی پیدا کنید، چه باید بکنید؟ برای این کار، می‌توانید روی دیکشنری یک حلقه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">for</span><span class="rlm">‏</span> تشکیل دهید:</p>
                            <div class="snippet">
                                <div class="snippet-title" dir="ltr">user.py</div>
                                <pre class="snippet" dir="ltr"><span class="ash">user_0 = {</span>
    <span class="ash">'username': 'efermi',</span>
    <span class="ash">'first': 'enrico',</span>
    <span class="ash">'last': 'fermi',</span>
    <span class="ash">}</span>

<span class="n" dir="ltr">1</span>for key, value in user_0.items():
<span class="n" dir="ltr">2</span>    print(f"\nKey: {key}")
<span class="n" dir="ltr">3</span>    print(f"Value: {value}")
</pre>
                            </div>
                            <p>همان‌گونه که در <span class="n" dir="ltr">1</span> نشان داده شده است، به‌منظور نوشتن حلقه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">for</span><span class="rlm">‏</span> برای یک دیکشنری، باید دو نام برای دو متغیر در نظر بگیرید که شامل کلید و مقدار هر زوج کلید-مقدار خواهد بود. می‌توانید برای این دو متغیر هر نامی که خواستید، انتخاب کنید. مثلاً می‌توانستید نام‌های کوتاه‌تری برای این متغیرها در نظر بگیرید، مثلاً:</p>
                            <div class="snippet">
                                <pre class="snippet" dir="ltr">for k, v in user_0.items()</pre>
                            </div>
                            <p>نیمه‌ی دوم دستورالعمل <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">for</span><span class="rlm">‏</span> در <span class="n" dir="ltr">1</span> شامل نام دیکشنری است و به دنبال آن متد <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">items()</span><span class="rlm">‏</span> قرار گرفته است که لیستی از زوج‌های کلید-مقدار را برمی‌گرداند. سپس حلقه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">for</span><span class="rlm">‏</span> هر کدام از این زوج‌ها را به دو متغیر داده شده اختصاص می‌دهد. در مثال قبل، با استفاده از متغیرها، هر کدام از کلیدها یعنی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">key</span><span class="rlm">‏</span> را در <span class="n" dir="ltr">2</span> و به دنبال آن مقدار مرتبط با آن یعنی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">value</span><span class="rlm">‏</span> را در <span class="n" dir="ltr">3</span> نمایش می‌دهیم. نویسه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">"\n"</span><span class="rlm">‏</span> در فراخوانی اول <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">print()</span><span class="rlm">‏</span> باعث می‌شود که در خروجی، قبل از هر زوج کلید-مقدار، یک سطر خالی گذاشته شود:</p>
                            <div class="snippet">
                                <pre class="snippet" dir="ltr">Key: last
Value: fermi

Key: first
Value: enrico

Key: username
Value: efermi</pre>
                            </div><a id="p101"></a>
                            <p>تشکیل حلقه بر روی زوج‌های کلید-مقدار برای دیکشنری‌هایی مانند مثال <span class="rlm">‏</span><span class="ident" dir="ltr">favorite_languages.py</span><span class="rlm">‏</span> در صفحات قبل که حاوی نوع یکسانی از اطلاعات برای تعداد زیادی کلید هستند، خیلی خوب عمل می‌کند. اگر روی دیکشنری <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">favorite_languages</span><span class="rlm">‏</span> حلقه تشکیل دهید، نام هر فرد درون دیکشنری و زبان برنامه‌نویسی مورد علاقه‌ی او را دریافت می‌کنید. از آنجا که کلیدها همیشه نام فرد است و مقدار آن همیشه زبان برنامه‌نویسی است، لذا به جای <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">key</span><span class="rlm">‏</span> و <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">value</span><span class="rlm">‏</span> از متغیرهای <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">name</span><span class="rlm">‏</span> و <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">language</span><span class="rlm">‏</span> استفاده می‌کنیم. این سبب می‌شود که درک اتفاقاتی که در داخل حلقه می‌افتد، آسان‌تر باشد:</p>
                            <div class="snippet">
                                <div class="snippet-title" dir="ltr">favorite_languages.py</div>
                                <pre class="snippet" dir="ltr"><span class="ash">favorite_languages = {</span>
    <span class="ash">'jen': 'python',</span>
    <span class="ash">'sarah': 'c',</span>
    <span class="ash">'edward': 'ruby',</span>
    <span class="ash">'phil': 'python',</span>
    <span class="ash">}</span>

<span class="n" dir="ltr">1</span>for name, language in favorite_languages.items():
<span class="n" dir="ltr">2</span>    print(f"{name.title()}'s favorite language is {language.title()}.")
</pre>
                            </div>
                            <p>این کد در <span class="n" dir="ltr">1</span> به پایتون می‌گوید که روی هر یک از زوج‌های کلید-مقدار حلقه تشکیل بدهد. در هر زوج، کلید را به متغیر <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">name</span><span class="rlm">‏</span> اختصاص می‌دهد و مقدار را به متغیر <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">language</span><span class="rlm">‏</span>. از آنجا که این‌ها نام‌های گویایی هستند، خیلی راحت‌تر می‌توان فهمید که فراخوانی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">print()</span><span class="rlm">‏</span> در <span class="n" dir="ltr">2</span> چه کاری انجام می‌دهد.</p>
                            <p>حال فقط با چند سطر کد، می‌توانیم تمام اطلاعات حاصل از نظرسنجی را نمایش دهیم:</p>
                            <div class="snippet">
                                <pre class="snippet" dir="ltr">Jen's favorite language is Python.
Sarah's favorite language is C.
Edward's favorite language is Ruby.
Phil's favorite language is Python.</pre>
                            </div>
                            <p>اگر نظرسنجی ما شامل نتایج هزار نفر یا حتی میلیون‌ها نفر هم می‌بود، این نوع تشکیل حلقه باز هم به خوبی کار را انجام می‌داد.</p>
                        </div>
                        <div class="sect" id="ch06lev2sec9"><a class="bkmk" name="ch06lev2sec9"></a>
                            <h4>تشکیل حلقه روی تمام کلیدهای دیکشنری</h4>
                            <p>متد <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">keys()</span><span class="rlm">‏</span> زمانی مفید است که نمی‌خواهید با تمام مقادیر موجود در دیکشنری کار کنید. مثلاً حلقه‌ای روی دیکشنری <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">favorite_languages</span><span class="rlm">‏</span> تشکیل می‌دهیم و نام تمام کسانی را که در نظرسنجی شرکت کردند، نمایش می‌دهیم:</p>
                            <div class="snippet">
                                <pre class="snippet" dir="ltr"><span class="ash">favorite_languages = {</span>
    <span class="ash">'jen': 'python',</span>
    <span class="ash">'sarah': 'c',</span>
    <span class="ash">'edward': 'ruby',</span>
    <span class="ash">'phil': 'python',</span>
    <span class="ash">}</span>

<span class="n" dir="ltr">1</span>for name in favorite_languages.keys():
    print(name.title())</pre>
                            </div><a id="p102"></a>
                            <p>سطر <span class="n" dir="ltr">1</span> به پایتون می‌گوید که تمام کلیدهای دیکشنری <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">favorite_languages</span><span class="rlm">‏</span> را بگیرد و هر برای یکی از آن‌ها را به متغیر <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">name</span><span class="rlm">‏</span> اختصاص دهد. خروجی برنامه نام تمام افراد شرکت کننده در نظرسنجی را نمایش می‌دهد:</p>
                            <div class="snippet">
                                <pre class="snippet" dir="ltr">Jen
Sarah
Edward
Phil</pre>
                            </div>
                            <p>در واقع، تشکیل حلقه روی تمام کلیدها رفتار پیش‌فرضی است که هنگام تشکیل حلقه روی یک دیکشنری انجام می‌شود، بنابراین، اگر به‌صورت زیر هم می‌نوشتید:</p>
                            <div class="snippet">
                                <pre class="snippet" dir="ltr">for name in favorite_languages:</pre>
                            </div>
                            <p>دقیقاً همان خروجی حاصل می‌شد که به‌صورت زیر:</p>
                            <div class="snippet">
                                <pre class="snippet" dir="ltr">for name in favorite_languages.keys():</pre>
                            </div>
                            <p>می‌توانید متد <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">keys()</span><span class="rlm">‏</span> را بنویسید تا کد شما خواناتر باشد، و یا هم اینکه می‌توانید در صورت تمایل آن را حذف کنید.</p>
                            <p>در داخل حلقه، با داشتن کلید می‌توانید مقدار مرتبط با آن را نیز به دست آورید. در اینجا پیامی برای یک دو تا از دوستان درباره‌ی زبان برنامه‌نویسی مورد علاقه‌شان می‌نویسیم. مانند قبل حلقه‌ای روی نام‌های موجود در دیکشنری تشکیل می‌دهیم، ولی وقتی که به نام دوستان مورد نظر رسیدیم، پیامی درباره‌ی زبان برنامه‌نویسی مورد علاقه‌ی آن‌ها نمایش می‌دهیم:</p>
                            <div class="snippet">
                                <pre class="snippet" dir="ltr"><span class="ash">favorite_languages = {</span>
    <span class="ash">--<span class="it">snip</span>--</span>
    <span class="ash">}</span>

<span class="n" dir="ltr">1</span>friends = ['phil', 'sarah']
for name in favorite_languages.keys():
    print(name.title())

<span class="n" dir="ltr">2</span>    if name in friends:
<span class="n" dir="ltr">3</span>        language = favorite_languages[name].title()
        print(f"\t{name.title()}, I see you love {language}!")</pre>
                            </div>
                            <p>در <span class="n" dir="ltr">1</span>، لیستی از دوستانی که می‌خواهیم برایشان پیام نمایش دهیم، ایجاد می‌کنیم. در داخل حلقه، نام هر شخص را نمایش می‌دهیم. سپس در <span class="n" dir="ltr">2</span>، وارسی می‌کنیم که مقدار فعلی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">name</span><span class="rlm">‏</span> در لیست <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">friends</span><span class="rlm">‏</span> هست یا نه. اگر باشد، زبان برنامه‌نویسی مورد علاقه‌ی شخص را در <span class="n" dir="ltr">3</span> با استفاده از نام دیکشنری و مقدار کنونی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">name</span><span class="rlm">‏</span> به‌عنوان کلید تعیین می‌کنیم. سپس یک پیام خوشامدگویی ویژه نمایش می‌دهیم که در آن به نام زبان انتخابی هم اشاره شده است.</p>
                            <p>نام همه‌ی افراد پرینت می‌شود، ولی کسانی که جزو دوستان هستند، پیامی ویژه دریافت می‌کنند:</p>
                            <div class="snippet">
                                <pre class="snippet" dir="ltr">Hi Jen.
Hi Sarah.
    Sarah, I see you love C!
Hi Edward.
<a id="p103"></a>Hi Phil.
    Phil, I see you love Python!</pre>
                            </div>
                            <p>از متد <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">keys()</span><span class="rlm">‏</span> برای این کار هم می‌توانید استفاده کنید که ببینید آیا فرد خاصی نظرسنجی شده است یا خیر. مثلاً ببینیم که آیا ارین در نظرسنجی شرکت کرده است:</p>
                            <div class="snippet">
                                <pre class="snippet" dir="ltr"><span class="ash">favorite_languages = {</span>
    <span class="ash">'jen': 'python',</span>
    <span class="ash">'sarah': 'c',</span>
    <span class="ash">'edward': 'ruby',</span>
    <span class="ash">'phil': 'python',</span>
    <span class="ash">}</span>

<span class="n" dir="ltr">1</span>if 'erin' not in favorite_languages.keys():
    print("Erin, please take our poll!")</pre>
                            </div>
                            <p>متد <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">keys()</span><span class="rlm">‏</span> فقط برای تشکیل حلقه نیست: واقعاً لیستی از تمام کلیدها را برمی‌گرداند، و سطر <span class="n" dir="ltr">1</span> صرفاً وارسی می‌کند که آیا <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">'erin'</span><span class="rlm">‏</span> در این لیست هست یا نه. حالا که نیست، پیامی نمایش داده می‌شود و از او دعوت می‌شود که در نظرسنجی شرکت کند:</p>
                            <div class="snippet">
                                <pre class="snippet" dir="ltr">Erin, please take our poll!</pre>
                            </div>
                        </div>
                        <div class="sect" id="ch06lev2sec10"><a class="bkmk" name="ch06lev2sec10"></a>
                            <h4>تشکیل حلقه روی کلیدهای دیکشنری با یک ترتیب خاص</h4>
                            <p>از پایتون ۳٫۷ به بعد، وقتی که روی دیکشنری حلقه تشکیل می‌دهید، آیتم‌ها با همان ترتیبی که در آن وارد شده‌اند، برگردانده می‌شوند. اما بعضی وقت‌ها شاید بخواهید که با ترتیب دیگری روی دیکشنری حلقه تشکیل دهید.</p>
                            <p>یک راه برای انجام این کار آن است که کلیدها را مرتب‌سازی کنید و بعد برای حلقه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">for</span><span class="rlm">‏</span> استفاده کنید. می‌توانید از تابع <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">sorted()</span><span class="rlm">‏</span> استفاده کنید که یک کپی از کلیدها را پس از مرتب‌سازی برمی‌گرداند:</p>
                            <div class="snippet">
                                <pre class="snippet" dir="ltr"><span class="ash">favorite_languages = {</span>
    <span class="ash">'jen': 'python',</span>
    <span class="ash">'sarah': 'c',</span>
    <span class="ash">'edward': 'ruby',</span>
    <span class="ash">'phil': 'python',</span>
    <span class="ash">}</span>

for name in sorted(favorite_languages.keys()):
    print(f"{name.title()}, thank you for taking the poll.")</pre>
                            </div>
                            <p>این دستورالعمل <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">for</span><span class="rlm">‏</span> مانند دیگر دستورالعمل‌های <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">for</span><span class="rlm">‏</span> است، با این تفاوت که تابع <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">sorted()</span><span class="rlm">‏</span> را دور متد <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">dictionary.keys()</span><span class="rlm">‏</span> قرار داده‌ایم. این به پایتون می‌گوید که لیست کلیدهای دیکشنری را بگیرد، آن‌ها را مرتب‌سازی کند، و سپس روی آن‌ها حلقه تشکیل دهد. خروجی شامل همه‌ی کسانی است که در نظرسنجی شرکت کرده‌اند، و نام آن‌ها به ترتیب نمایش داده شده است:</p>
                            <div class="snippet">
                                <pre class="snippet" dir="ltr">Edward, thank you for taking the poll.
Jen, thank you for taking the poll.
Phil, thank you for taking the poll.
Sarah, thank you for taking the poll.</pre>
                            </div>
                        </div>
                        <div class="sect" id="ch06lev2sec11"><a class="bkmk" name="ch06lev2sec11"></a>
                            <h4>تشکیل حلقه روی تمام مقادیر دیکشنری</h4>
                            <a id="p104"></a>
                            <p>اگر در درجه‌ی اول به مقدارهای موجود در دیکشنری علاقه‌مند باشید، می‌توانید با استفاده از متد <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">values()</span><span class="rlm">‏</span>، لیستی از مقدارها بدون کلیدها به دست آورید. مثلاً فرض کنید صرفاً خواهان لیستی از تمام زبان‌های انتخاب شده در نظرسنجی زبان‌های برنامه‌نویسی هستیم و کاری به نام شخصی که هر زبان را انتخاب کرده است، نداریم:</p>
                            <div class="snippet">
                                <pre class="snippet" dir="ltr"><span class="ash">favorite_languages = {</span>
    <span class="ash">'jen': 'python',</span>
    <span class="ash">'sarah': 'c',</span>
    <span class="ash">'edward': 'ruby',</span>
    <span class="ash">'phil': 'python',</span>
    <span class="ash">}</span>

print("The following languages have been mentioned:")
for language in favorite_languages.values():
    print(language.title())</pre>
                            </div>
                            <p>دستورالعمل <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">for</span><span class="rlm">‏</span> در اینجا هر مقدار را از دیکشنری می‌گیرد و آن را متغیر <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">language</span><span class="rlm">‏</span> اختصاص می‌دهد. وقتی که این مقادیر نمایش داده شد، لیستی از تمام زبان‌های انتخاب شده به دست می‌آید:</p>
                            <div class="snippet">
                                <pre class="snippet" dir="ltr">The following languages have been mentioned:
Python
C
Python
Ruby</pre>
                            </div>
                            <p>در این رویکرد، تمام مقادیر از دیکشنری گرفته می‌شود، بدون آنکه تکراری بودن موارد لحاظ شود. شاید این روش برای تعداد کم مقادیر قابل استفاده باشد، ولی در صورتی که تعداد پاسخ دهندگان نظرسنجی زیاد باشد، این منجر به لیستی با تکرارهای زیاد خواهد شد. برای اینکه تمام زبان‌های برنامه‌نویسی انتخاب شده را بدون تکرار ببینیم، می‌توانیم از یک مجموعه استفاده کنیم. <span class="emphasis">مجموعه</span> کالکشنی است که در آن هر کدام از آیتم‌ها یکتا است:</p>
                            <div class="snippet">
                                <pre class="snippet" dir="ltr"><span class="ash">favorite_languages = {</span>
    <span class="ash">--<span class="it">snip</span>--</span>
    <span class="ash">}</span>

<span class="ash">print("The following languages have been mentioned:")</span>
<span class="n" dir="ltr">1</span>for language in set(favorite_languages.values()):
    <span class="ash">print(language.title())</span></pre>
                            </div>
                            <p>وقتی که تابع <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">set()</span><span class="rlm">‏</span> را دور لیستی که حاوی آیتم‌های تکراری است، می‌پیچید، پایتون آیتم‌های یکتای لیست را شناسایی می‌کند و یک مجموعه از آن آیتم‌ها می‌سازد. در <span class="n" dir="ltr">1</span>، با استفاده از تابع <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">set()</span><span class="rlm">‏</span>، زبان‌های یکتا از <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">favorite_languages.values()</span><span class="rlm">‏</span> بیرون کشیده شده است.</p>
                            <p>نتیجه‌ی آن لیستی غیرتکراری از زبان‌ها است که افرادْ آن‌ها را در نظرسنجی انتخاب کرده‌اند:</p>
                            <div class="snippet">
                                <pre class="snippet" dir="ltr">The following languages have been mentioned:
Python
<a id="p105"></a>C
Ruby</pre>
                            </div>
                            <p>به تدریج که چیزهای بیشتری از پایتون یاد می‌گیرید، خواهید دید که برخی از ویژگی‌های درونی زبان پایتون به شما کمک می‌کند که دقیقاً همان کاری را که می‌خواهید، با داده‌های خود انجام دهید.</p>
                            <div class="note">
                                <h6 class="note-title">توجه</h6>
                                <p>مجموعه را به‌صورت مستقیم نیز می‌توانید با آکلاد و جدا کردن عناصر با کامل تعریف کنید:</p>
                                <div class="snippet">
                                    <pre class="snippet" dir="ltr">&gt;&gt;&gt; <span class="codestrong" dir="ltr">languages = {'python', 'ruby', 'python', 'c'}</span>
&gt;&gt;&gt; <span class="codestrong" dir="ltr">languages</span>
{'ruby', 'python', 'c'}</pre>
                                </div>
                                <p>به آسانی ممکن است مجموعه‌ها را با دیکشنری‌ها اشتباه بگیرید، چون هر دو درون آکلاد قرار می‌گیرند. وقتی که آکلاد می‌بینید، ولی به‌صورت زوج‌های کلید-مقدار نیست، احتمالاً یک مجموعه است. بر خلاف لیست‌ها و دیکشنری‌ها، مجموعه‌ها آیتم‌ها را با ترتیب خاصی نگه نمی‌دارند.</p>
                            </div>
                            <div class="sidebar">
                                <h6 class="sidebar-title">خودتان امتحان کنید</h6>
                                <p class="tiy1"><span class="tiy" id="ch06_tiy04"><span class="tiy-num">۶-۴</span>. <span class="tiy-title">واژه‌نامه ۲</span>: </span> اکنون که روش تشکیل حلقه روی دیکشنری را یاد گرفتید، می‌توانید نمونه‌ی تمیزتری از <span class="ref"><a href="c17-ch06.xhtml#ch06_tiy03">تمرین <span dir="ltr">۶-۳</span></a></span> (<span class="ref"><a href="c17-ch06.xhtml#p099">صفحه‌ی <span>۹۹</span></a></span>) را بنویسید، به این صورت که به جای فراخوانی‌های متعدد <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">print()</span><span class="rlm">‏</span>، یک حلقه روی کلیدها و مقادیر دیکشنری ایجاد کنید. وقتی که مطمئن شدید که حلقه‌ی شما کار می‌کند، پنج اصطلاح دیگر را در زمینه‌ی پایتون به این ویژگی اضافه کنید. حالا وقتی که برنامه را اجرا کنید، باید این کلمات جدید و معانی آن‌ها نیز به‌طور خودکار در خروجی نوشته شوند.</p>
                                <p class="tiy1"><span class="tiy" id="ch06_tiy05"><span class="tiy-num">۶-۵</span>. <span class="tiy-title">رودها</span>: </span> یک دیکشنری شامل رودهای بزرگ و کشوری که در آن جریان دارند، تهیه کنید. مثلاً یک زوج کلید-مقدار آن می‌تواند به‌صورت <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">'nile': 'egypt'</span><span class="rlm">‏</span> باشد.</p>
                                <ul>
                                    <li>با استفاده از یک حلقه، جمله‌ای درباره‌ی هر رود بنویسید، مثلاً <span class="emphasis"><span class="rlm">‏</span><span class="lr" dir="ltr">The Nile runs through Egypt</span><span class="rlm">‏</span></span>.</li>
                                    <li>با استفاده از حلقه، نام هر رود موجود در دیکشنری را نمایش دهید.</li>
                                    <li>با استفاده از حلقه، نام هر کشور موجود در دیکشنری را نمایش دهید.</li>
                                </ul>
                                <p class="tiy1"><span class="tiy" id="ch06_tiy06"><span class="tiy-num">۶-۶</span>. <span class="tiy-title">نظرسنجی</span>: </span> برای این تمرین از برنامه‌ی <span class="emphasis">favorite_languages.py</span> (<span class="ref"><a href="c17-ch06.xhtml#p097">صفحه‌ی <span>۹۷</span></a></span>) استفاده کنید.</p>
                                <ul>
                                    <li>لیستی از افرادی که باید در نظرسنجی زبان برنامه‌نویسی مورد علاقه شرکت کنند، تهیه کنید. چند نام که از قبل در دیکشنری هستند و چند نام که نیستند، در این لیست بگنجانید.</li>
                                    <li>روی لیست افرادی که باید در نظرسنجی شرکت کنند، حلقه تشکیل دهید. اگر قبلاً در نظرسنجی شرکت کرده‌اند، پیامی نمایش دهید و از آن‌ها به خاطر پاسخ دادن تشکر کنید. اگر هنوز در نظرسنجی شرکت نکرده‌اند، پیامی نمایش دهید و از آن‌ها دعوت کنید که در نظرسنجی شرکت کنند.</li>
                                </ul>
                            </div>
                        </div>
                    </div>
                    <div class="sect" id="ch06lev1sec4"><a class="bkmk" name="ch06lev1sec4"></a>
                        <h3>ساختارهای تو در تو</h3>
                        <a id="p106"></a>
                        <p>بعضی وقت‌ها شاید دلتان بخواهد که چندین دیکشنری را در یک لیست ذخیره کنید، یا لیستی از آیتم‌ها را به‌عنوان مقدار در دیکشنری قرار دهید. به این نوع ساختار، <span class="emphasis">تو در تو</span> می‌گویند. می‌توانید دیکشنری را داخل لیست بگذارید، لیستی را داخل دیکشنری بگذارید، یا حتی یک دیکشنری را داخل دیکشنری دیگری بگذارید. ساختارهای تو در تو ویژگی قدرتمندی است، که نمونه‌هایی از آن را در مثال‌های زیر می‌بینید.</p>
                        <div class="sect" id="ch06lev2sec12"><a class="bkmk" name="ch06lev2sec12"></a>
                            <h4>لیستی از دیکشنری‌ها</h4>
                            <p>دیکشنری <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">alien_0</span><span class="rlm">‏</span> حاوی اطلاعات مختلفی درباره‌ی یک بیگانه است، ولی برای ذخیره کردن اطلاعات مربوط به یک بیگانه‌ی دیگر جا ندارد، چه رسد به اینکه بخواهیم اطلاعات تعداد زیادی از بیگانه‌ها را ذخیره کنیم. چگونه می‌توان اطلاعات ناوگانی از بیگانه‌ها را ذخیره کرد؟ یک راه این است که لیستی از بیگانه‌ها درست کنیم که در آن هر بیگانه یک دیکشنری است که حاوی اطلاعات مربوط به آن بیگانه است. مثلاً کد زیر لیستی از سه بیگانه می‌سازد:</p>
                            <div class="snippet">
                                <div class="snippet-title" dir="ltr">aliens.py</div>
                                <pre class="snippet" dir="ltr">alien_0 = {'color': 'green', 'points': 5}
alien_1 = {'color': 'yellow', 'points': 10}
alien_2 = {'color': 'red', 'points': 15}

<span class="n" dir="ltr">1</span>aliens = [alien_0, alien_1, alien_2]

for alien in aliens:
    print(alien)</pre>
                            </div>
                            <p>ابتدا سه دیکشنری ایجاد می‌کنیم که هر کدام نشان‌دهنده‌ی یک بیگانه هستند. در <span class="n" dir="ltr">1</span>، هر کدام از این دیکشنری‌ها را در لیستی به نام <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">aliens</span><span class="rlm">‏</span> ذخیره می‌کنیم. سرانجام، حلقه‌ای روی این لیست تشکیل می‌دهیم و هر کدام از بیگانه‌ها را نمایش می‌دهیم:</p>
                            <div class="snippet">
                                <pre class="snippet" dir="ltr">{'color': 'green', 'points': 5}
{'color': 'yellow', 'points': 10}
{'color': 'red', 'points': 15}</pre>
                            </div>
                            <p>در یک مثال واقعی‌تر، تعداد بیگانه‌ها بیشتر از سه تا است و کد برنامه آن‌ها را به‌صورت خودکار تولید می‌کند. در مثال زیر، با استفاده از <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">range()</span><span class="rlm">‏</span>، ناوگانی از ۳۰ بیگانه ایجاد می‌کنیم:</p>
                            <div class="snippet">
                                <pre class="snippet" dir="ltr"># Make an empty list for storing aliens.
aliens = []

# Make 30 green aliens.
<span class="n" dir="ltr">1</span>for alien_number in range(30):
<span class="n" dir="ltr">2</span>    new_alien = {'color': 'green', 'points': 5, 'speed': 'slow'}
<span class="n" dir="ltr">3</span>    aliens.append(new_alien)

# Show the first 5 aliens.
<span class="n" dir="ltr">4</span>for alien in aliens[:5]:
    print(alien)
print("...")

# Show how many aliens have been created.
<span class="n" dir="ltr">5</span>print(f"Total number of aliens: {len(aliens)}")</pre>
                            </div><a id="p107"></a>
                            <p>این مثال با لیستی خالی شروع می‌شود که بیگانه‌ها در آن قرار خواهند گرفت. در <span class="n" dir="ltr">1</span>، تابع <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">range()</span><span class="rlm">‏</span> یک سری عدد برمی‌گرداند، که صرفاً به پایتون می‌گوید که حلقه چند بار باید تکرار شود. هر بار که حلقه اجرا می‌شود، یک بیگانه‌ی جدید ایجاد می‌کنیم <span class="n" dir="ltr">2</span>، و سپس هر بیگانه‌ی جدید را به لیست <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">aliens</span><span class="rlm">‏</span> اضافه می‌کنیم <span class="n" dir="ltr">3</span>. در <span class="n" dir="ltr">4</span>، با استفاده از برش، پنج بیگانه‌ی اول را نمایش می‌دهیم، و سپس در <span class="n" dir="ltr">5</span>، طول لیست را نمایش می‌دهیم، تا معلوم شود که واقعاً ناوگانی متشکل از ۳۰ بیگانه ایجاد کرده‌ایم:</p>
                            <div class="snippet">
                                <pre class="snippet" dir="ltr">{'speed': 'slow', 'color': 'green', 'points': 5}
{'speed': 'slow', 'color': 'green', 'points': 5}
{'speed': 'slow', 'color': 'green', 'points': 5}
{'speed': 'slow', 'color': 'green', 'points': 5}
{'speed': 'slow', 'color': 'green', 'points': 5}
...

Total number of aliens: 30</pre>
                            </div>
                            <p>این بیگانه‌ها همگی مشخصات یکسانی دارند، ولی پایتون هر یک از آن‌ها را شیء جداگانه‌ای در نظر می‌گیرد، که به ما امکان می‌دهد که هر بیگانه را جداگانه تغییر دهیم.</p>
                            <p>چگونه می‌توان با این گروه بیگانه‌ها کار کرد؟ تصور کنید که یک جنبه از بازی این است که در طول بازی رنگ و سرعت بیگانه‌ها تغییر می‌کند. وقتی که زمان تغییر دادن رنگ‌ها رسید، می‌توانیم از یک حلقه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">for</span><span class="rlm">‏</span> و دستورالعمل <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">if</span><span class="rlm">‏</span> برای تغییر دادن رنگ بیگانه‌ها استفاده کنیم. مثلاً برای اینکه سه بیگانه‌ی اول را تغییر دهیم تا رنگ آن‌ها زرد، سرعت آن‌ها متوسط، و امتیاز آن‌ها ۱۰ باشد، می‌توانیم به‌صورت زیر عمل کنیم:</p>
                            <div class="snippet">
                                <pre class="snippet" dir="ltr"><span class="ash"># Make an empty list for storing aliens.</span>
<span class="ash">aliens = []</span>

<span class="ash"># Make 30 green aliens.</span>
<span class="ash">for alien_number in range (30):</span>
    <span class="ash">new_alien = {'color': 'green', 'points': 5, 'speed': 'slow'}</span>
    <span class="ash">aliens.append(new_alien)</span>

for alien in aliens[:3]:
    if alien['color'] == 'green':
        alien['color'] = 'yellow'
        alien['speed'] = 'medium'
        alien['points'] = 10

<span class="ash"># Show the first 5 aliens.</span>
<span class="ash">for alien in aliens[:5]:</span>
    <span class="ash">print(alien)</span>
<span class="ash">print("...")</span></pre>
                            </div>
                            <p>از آنجا که می‌خواهیم سه بیگانه‌ی اول را تغییر دهیم، لذا حلقه را روی برشی تشکیل می‌دهیم که فقط سه بیگانه‌ی اول را در بر می‌گیرد. در حال حاضر تمام بیگانه‌ها سبز هستند، ولی همیشه این‌طور نخواهد بود، لذا یک دستورالعمل <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">if</span><span class="rlm">‏</span> می‌نویسیم تا مطمئن شویم که <a id="p108"></a>فقط بیگانه‌های سبز را تغییر می‌دهیم. اگر بیگانه سبز باشد، رنگ آن را به <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">'yellow'</span><span class="rlm">‏</span>، سرعت آن را به <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">'medium'</span><span class="rlm">‏</span>، و امتیاز آن را به <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">10</span><span class="rlm">‏</span> تغییر می‌دهیم، که در خروجی زیر نشان داده شده است:</p>
                            <div class="snippet">
                                <pre class="snippet" dir="ltr">{'speed': 'medium', 'color': 'yellow', 'points': 10}
{'speed': 'medium', 'color': 'yellow', 'points': 10}
{'speed': 'medium', 'color': 'yellow', 'points': 10}
{'speed': 'slow', 'color': 'green', 'points': 5}
{'speed': 'slow', 'color': 'green', 'points': 5}
...</pre>
                            </div>
                            <p>می‌توانید این حلقه را با اضافه کردن یک بلوک <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">elif</span><span class="rlm">‏</span> گسترش دهیم که بیگانه‌های زرد را تبدیل به بیگانه‌هایی به رنگ قرمز، سرعت تند، و امتیاز ۱۵ کند. بدون اینکه بخواهیم تمام برنامه را دوباره نشان دهیم، حلقه‌ی مذکور به‌صورت زیر خواهد بود:</p>
                            <div class="snippet">
                                <pre class="snippet" dir="ltr"><span class="ash">for alien in aliens[0:3]:</span>
    <span class="ash">if alien['color'] == 'green':</span>
        <span class="ash">alien['color'] = 'yellow'</span>
        <span class="ash">alien['speed'] = 'medium'</span>
        <span class="ash">alien['points'] = 10</span>
    elif alien['color'] == 'yellow':
        alien['color'] = 'red'
        alien['speed'] = 'fast'
        alien['points'] = 15</pre>
                            </div>
                            <p>خیلی وقت‌ها تعداد زیادی دیکشنری در یک لیست ذخیره می‌شود، و هر دیکشنری حاوی انواع مختلف اطلاعات درباره‌ی یک شیء است. مثلاً در یک وب‌سایت، ممکن است برای هر کاربر یک دیکشنری ایجاد کنید، همان‌گونه که ما در برنامه‌ی <span class="rlm">‏</span><span class="ident" dir="ltr">user.py</span><span class="rlm">‏</span> در <span class="ref"><a href="c17-ch06.xhtml#p100">صفحه‌ی <span>۱۰۰</span></a></span> به همین صورت عمل کردیم، و سپس تمام دیکشنری‌ها را در لیستی به نام <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">users</span><span class="rlm">‏</span> ذخیره کنید. تمام دیکشنری‌های لیست باید ساختار یکسانی داشته باشند، تا بتوانید روی لیست حلقه تشکیل دهید و به‌طور یکسانی با هر کدام از دیکشنری‌ها کار کنید.</p>
                        </div>
                        <div class="sect" id="ch06lev2sec13"><a class="bkmk" name="ch06lev2sec13"></a>
                            <h4>لیست در دیکشنری</h4>
                            <p>به جای اینکه دیکشنری را داخل لیست بگذارید، بعضی وقت‌ها بهتر است که لیستی را درون یک دیکشنری قرار دهید. مثلاً فرض کنید بخواهید پیتزایی را که فردی سفارش داده است، توصیف کنید. اگر فقط می‌خواستید از لیست استفاده کنید، تنها چیزی که می‌توانستید ذخیره کنید، چاشنی‌های پیتزا بود. ولی وقتی که از دیکشنری استفاده کنید، لیست چاشنی‌ها فقط یکی از ویژگی‌های پیتزای مورد نظر شما خواهد بود.</p>
                            <p>در مثال زیر، دو نوع اطلاعات برای هر پیتزا ذخیره می‌شود: نوع نان و لیست چاشنی‌ها. لیست چاشنی‌ها به‌عنوان مقدار به کلید <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">'toppings'</span><span class="rlm">‏</span> اختصاص داده می‌شود. برای دسترسی به آیتم‌های این لیست، درست مانند هر مقدار دیگری در دیکشنری، نام دیکشنری و کلید <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">'toppings'</span><span class="rlm">‏</span> را می‌نویسیم. ولی به جای اینکه مقدار ساده‌ای برگرداند، لیستی از چاشنی‌ها برگردانده می‌شود:</p>
                            <div class="snippet">
                                <div class="snippet-title" dir="ltr">pizza.py</div>
                                <pre class="snippet" dir="ltr"># Store information about a pizza being ordered.
<span class="n" dir="ltr">1</span>pizza = {
    'crust': 'thick',
    'toppings': ['mushrooms', 'extra cheese'],
    }
<a id="p109"></a># Summarize the order.
<span class="n" dir="ltr">2</span>print(f"You ordered a {pizza['crust']}-crust pizza "
    "with the following toppings:")

<span class="n" dir="ltr">3</span>for topping in pizza['toppings']:
    print("\t" + topping)</pre>
                            </div>
                            <p>ابتدا در <span class="n" dir="ltr">1</span>، یک دیکشنری داریم که اطلاعات مربوط به پیتزای سفارش داده شده در آن قرار دارد. یک کلید این دیکشنری <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">'crust'</span><span class="rlm">‏</span> است، که مقدار آن رشته‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">'thick'</span><span class="rlm">‏</span> است. کلید بعدی، یعنی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">'toppings'</span><span class="rlm">‏</span>، حاوی تمام چاشنی‌های درخواستی است. در <span class="n" dir="ltr">2</span>، خلاصه‌ای از پیتزا را قبل از ساختن آن نمایش می‌دهیم. وقتی که لازم است که سطری طولانی را در یک فراخوانی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">print()</span><span class="rlm">‏</span> به دو سطر بشکنید، نقطه‌ی مناسبی را برای شکستن آن سطر انتخاب کنید، و در پایان آن سطر علامت نقل‌قول بگذارید. سطری بعدی را تورفتگی بدهید و علامت نقل‌قول را باز کنید و رشته را ادامه دهید. پایتون تمام رشته‌هایی را که داخل پرانتز پیدا کند، به‌طور خودکار با هم ترکیب می‌کند. برای نمایش دادن چاشنی‌ها، یک حلقه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">for</span><span class="rlm">‏</span> می‌نویسیم <span class="n" dir="ltr">3</span>. برای دسترسی به لیست چاشنی‌ها، از کلید <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">'toppings'</span><span class="rlm">‏</span> استفاده می‌کنیم، و پایتون لیست چاشنی‌ها را از دیکشنری می‌گیرد.</p>
                            <p>خروجی زیر پیتزایی را که می‌خواهیم بسازیم، خلاصه می‌کند:</p>
                            <div class="snippet">
                                <pre class="snippet" dir="ltr">You ordered a thick-crust pizza with the following toppings:
    mushrooms
    extra cheese</pre>
                            </div>
                            <p>در یک دیکشنری، هر گاه بخواهید به یک کلید بیش از یک مقدار اختصاص دهید، می‌توانید یک لیست به آن اختصاص دهید. در مثال قبلی درباره‌ی زبان برنامه‌نویسی مورد علاقه، اگر فرضاً پاسخ‌های هر فرد را در یک لیست ذخیره می‌کردیم، افراد می‌توانستند بیش از یک زبان مورد علاقه را انتخاب کنند. در این صورت، زمانی که روی دیکشنری حلقه تشکیل می‌دادیم، مقدار مربوط به هر فرد یک لیست از زبان‌ها می‌بود، نه یک زبان تنها. در داخل حلقه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">for</span><span class="rlm">‏</span> دیکشنری، یک حلقه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">for</span><span class="rlm">‏</span> دیگر روی لیست زبان‌های برنامه‌نویسی مورد علاقه‌ی فرد تشکیل می‌دهیم:</p>
                            <div class="snippet">
                                <div class="snippet-title" dir="ltr">favorite_languages.py</div>
                                <pre class="snippet" dir="ltr"><span class="n" dir="ltr">1</span>favorite_languages = {
    'jen': ['python', 'ruby'],
    'sarah': ['c'],
    'edward': ['ruby', 'go'],
    'phil': ['python', 'haskell'],
    }

<span class="n" dir="ltr">2</span>for name, languages in favorite_languages.items():
    print(f"\n{name.title()}'s favorite languages are:")
<span class="n" dir="ltr">3</span>    for language in languages:
        print(f"\t{language.title()}")</pre>
                            </div>
                            <p>همان گونه که در <span class="n" dir="ltr">1</span> می‌بینید، مقدار مرتبط با هر نام حالا یک لیست است. در نظر داشته باشید که بعضی از افراد ممکن است فقط یک زبان مورد علاقه داشته باشند، و برخی دیگر <a id="p110"></a>چندین زبان. وقتی که در <span class="n" dir="ltr">2</span> روی دیکشنری حلقه تشکیل می‌دهیم، هر کدام از مقدارهای موجود در دیکشنری را به متغیری به نام <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">languages</span><span class="rlm">‏</span> اختصاص می‌دهیم، چرا که می‌دانیم هر کدام از مقادیر، لیستی از زبان‌ها است. در داخل حلقه‌ی دیکشنری اصلی، یک حلقه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">for</span><span class="rlm">‏</span> دیگر در <span class="n" dir="ltr">3</span> روی لیست زبان‌های مورد علاقه‌ی هر شخص تشکیل می‌دهیم. حالا هر شخص می‌تواند زبان‌های برنامه‌نویسی مورد علاقه‌ی متعددی داشته باشد:</p>
                            <div class="snippet">
                                <pre class="snippet" dir="ltr">Jen's favorite languages are:
    Python
    Ruby

Sarah's favorite languages are:
    C

Phil's favorite languages are:
    Python
    Haskell

Edward's favorite languages are:
    Ruby
    Go</pre>
                            </div>
                            <p>برای اینکه این برنامه را باز هم بهتر کنید، می‌توانید یک دستورالعمل <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">if</span><span class="rlm">‏</span> در ابتدای حلقه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">for</span><span class="rlm">‏</span> دیکشنری داشته باشید تا با بررسی مقدار <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">len(languages)</span><span class="rlm">‏</span>، بفهمید که هر شخص فقط یک زبان مورد علاقه دارد یا بیشتر. اگر بیش از یک زبان مورد علاقه داشته باشد، خروجی به همان صورت قبل خواهد بود. ولی اگر فقط یک زبان داشته باشد، می‌توانید طرز بیان را متناسب با آن تغییر دهید. مثلاً می‌توانید بگویید <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;"><span class="rlm">‏</span><span class="lr" dir="ltr">Sarah's favorite language is C</span><span class="rlm">‏</span></span><span class="rlm">‏</span>.</p>
                            <div class="note">
                                <h6 class="note-title">توجه</h6>
                                <p>لیست‌ها و دیکشنری‌ها را نباید تا عمق زیادی تو در تو قرار دهید. اگر عمق تو در تو گذاشتن شما از آنچه در مثال‌های قبل دیدید، بیشتر باشد، یا اینکه با کد شخص دیگری کار می‌کنید که تا عمق زیادی ساختارهای تو در تو دارد، احتمال زیادی وجود دارد که مسئله را با راه ساده‌تری نیز بتوان حل کرد.</p>
                            </div>
                        </div>
                        <div class="sect" id="ch06lev2sec14"><a class="bkmk" name="ch06lev2sec14"></a>
                            <h4>دیکشنری توی دیکشنری</h4>
                            <p>می‌توانید یک دیکشنری را توی دیکشنری دیگری قرار دهید، ولی خیلی زود ممکن است کد شما بیش از حد پیچیده شود. مثلاً اگر چندین کاربر در وب‌سایت خود داشته باشید و هر کاربر یک نام کاربری یکتا داشته باشد، می‌توانید از نام کاربری به‌عنوان کلید برای یک دیکشنری استفاده کنید. سپس می‌توانید اطلاعات مربوط به هر کاربر را در یک دیکشنری ذخیره کنید و آن را به‌عنوان مقدار برای نام کاربری او اختصاص دهید. در برنامه‌ی زیر، سه نوع اطلاعات را درباره‌ی هر کاربر ذخیره می‌کنیم: نام، نام خانوادگی، و محل. با تشکیل حلقه روی نام‌های کاربری و دیکشنری اطلاعات مرتبط با هر نام کاربری، به این اطلاعات دسترسی پیدا می‌کنیم:</p>
                            <div class="snippet">
                                <div class="snippet-title" dir="ltr">many_users.py</div>
                                <pre class="snippet" dir="ltr">users = {
    'aeinstein': {
        'first': 'albert',
<a id="p111"></a>        'last': 'einstein',
        'location': 'princeton',
        },

    'mcurie': {
        'first': 'marie',
        'last': 'curie',
        'location': 'paris',
        },
    }

<span class="n" dir="ltr">1</span>for username, user_info in users.items():
<span class="n" dir="ltr">2</span>    print(f"\nUsername: {username}")
<span class="n" dir="ltr">3</span>    full_name = f"{user_info['first']} {user_info['last']}"
    location = user_info['location']

<span class="n" dir="ltr">4</span>    print(f"\tFull name: {full_name.title()}")
    print(f"\tLocation: {location.title()}")</pre>
                            </div>
                            <p>ابتدا یک دیکشنری به نام <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">users</span><span class="rlm">‏</span> تعریف می‌کنیم که حاوی دو کلید است: یعنی نام‌های کاربری <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">'aeinstein'</span><span class="rlm">‏</span> و <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">'mcurie'</span><span class="rlm">‏</span>. مقدار پیونده شده به هر کلید یک دیکشنری است که حاوی نام، نام خانوادگی، و محل کاربر است. در <span class="n" dir="ltr">1</span>، حلقه‌ای روی دیکشنری <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">users</span><span class="rlm">‏</span> تشکیل می‌دهیم. در اینجا پایتون هر کلید را به متغیر <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">username</span><span class="rlm">‏</span> اختصاص می‌دهد، و دیکشنری مرتبط با آن نام کاربری به متغیر <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">user_info</span><span class="rlm">‏</span> اختصاص داده می‌شود. در داخل حلقه‌ی دیکشنری اصلی، نام کاربری را در <span class="n" dir="ltr">2</span> پرینت می‌کنیم.</p>
                            <p>در <span class="n" dir="ltr">3</span>، به دیکشنری درونی دسترسی پیدا می‌کنیم. متغیر <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">user_info</span><span class="rlm">‏</span>، که حاوی یک دیکشنری از اطلاعات کاربر است، سه کلید دارد: <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">'first'</span><span class="rlm">‏</span>، <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">'last'</span><span class="rlm">‏</span>، و <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">'location'</span><span class="rlm">‏</span>. از هر کلید برای ایجاد نام کامل و محل زندگی فرد استفاده می‌کنیم، و سپس در <span class="n" dir="ltr">4</span> خلاصه‌ای را از آنچه درباره‌ی کاربر می‌دانیم نمایش می‌دهیم:</p>
                            <div class="snippet">
                                <pre class="snippet" dir="ltr">Username: aeinstein
    Full name: Albert Einstein
    Location: Princeton

Username: mcurie
    Full name: Marie Curie
    Location: Paris</pre>
                            </div>
                            <p>دقت کنید که ساختار دیکشنری هر کاربر یکسان است. گرچه از نظر پایتون ضروری نیست، ولی این ساختار سبب می‌شود که کار کردن با دیکشنری‌های تو در تو راحت‌تر باشد. اگر دیکشنری هر کاربر کلیدهای متفاوتی می‌داشت، کد داخل حلقه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">for</span><span class="rlm">‏</span> پیچیده‌تر می‌شد.</p>
                            <div class="sidebar">
                                <h6 class="sidebar-title">خودتان امتحان کنید</h6>
                                <a id="p112"></a>
                                <p class="tiy1"><span class="tiy" id="ch06_tiy07"><span class="tiy-num">۶-۷</span>. <span class="tiy-title">افراد</span>: </span> با برنامه‌ای که برای <span class="ref"><a href="c17-ch06.xhtml#ch06_tiy01">تمرین <span dir="ltr">۶-۱</span></a></span> (<span class="ref"><a href="c17-ch06.xhtml#p099">صفحه‌ی <span>۹۹</span></a></span>) نوشتید، شروع کنید. دو دیکشنری جدید برای افراد دیگری درست کنید، و هر سه دیکشنری را در لیستی به نام <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">people</span><span class="rlm">‏</span> ذخیره کنید. روی این لیست افراد، حلقه تشکیل دهید. در داخل این حلقه، همه‌ی اطلاعاتی را که درباره‌ی هر فرد دارید، نمایش دهید.</p>
                                <p class="tiy1"><span class="tiy" id="ch06_tiy08"><span class="tiy-num">۶-۸</span>. <span class="tiy-title">حیوانات خانگی</span>: </span> چند دیکشنری درست کنید که هر کدام نشان‌دهنده‌ی یک حیوان خانگی متفاوت است. در هر دیکشنری، نوع حیوان و نام مالک را بنویسید. این دیکشنری‌ها را در لیستی به نام <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">pets</span><span class="rlm">‏</span> ذخیره کنید. حالا روی این لیست حلقه تشکیل دهید و تمام چیزهایی را که درباره‌ی هر حیوان خانگی می‌دانید، نمایش دهید.</p>
                                <p class="tiy1"><span class="tiy" id="ch06_tiy09"><span class="tiy-num">۶-۹</span>. <span class="tiy-title">مکان‌های مورد علاقه</span>: </span> یک دیکشنری به نام <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">favorite_places</span><span class="rlm">‏</span> درست کنید. سه نام را به‌عنوان کلیدهای دیکشنری در نظر بگیرید، و برای هر نفر، یک تا سه مکان مورد علاقه در آن ذخیره کنید. برای اینکه این تمرین کمی جالب‌تر باشد، از چند نفر از دوستانتان بخواهید که اماکن مورد علاقه‌ی خود را نام ببرند. روی دیکشنری حلقه‌ای تشکیل دهید، و نام هر شخص و اماکن مورد علاقه‌ی او را نمایش دهید.</p>
                                <p class="tiy1"><span class="tiy" id="ch06_tiy10"><span class="tiy-num">۶-۱۰</span>. <span class="tiy-title">اعداد مورد علاقه</span>: </span> برنامه‌ی <span class="ref"><a href="c17-ch06.xhtml#ch06_tiy02">تمرین <span dir="ltr">۶-۲</span></a></span> (<span class="ref"><a href="c17-ch06.xhtml#p099">صفحه‌ی <span>۹۹</span></a></span>) را تغییر دهید، به‌طوری که هر شخص بیش از یک عدد مورد علاقه داشته باشد. سپس نام هر شخص را با اعداد مورد علاقه‌ی او نمایش دهید.</p>
                                <p class="tiy1"><span class="tiy" id="ch06_tiy11"><span class="tiy-num">۶-۱۱</span>. <span class="tiy-title">شهرها</span>: </span> این دیکشنری به نام <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">cities</span><span class="rlm">‏</span> درست کنید. نام سه شهر را به‌عنوان کلیدهای دیکشنری در نظر بگیرید. یک دیکشنری حاوی اطلاعات مربوط به هر شهر ایجاد کنید، و کشوری که در آن قرار دارد، جمعیت تقریبی آن، و یک مطلب درباره‌ی آن شهر را در آن قرار دهید. مثلاً از کلیدهایی مانند <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">country</span><span class="rlm">‏</span>، <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">population</span><span class="rlm">‏</span>، و <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">fact</span><span class="rlm">‏</span> استفاده کنید. نام هر شهر و تمام اطلاعات مربوط به آن را نمایش دهید.</p>
                                <p class="tiy1"><span class="tiy" id="ch06_tiy12"><span class="tiy-num">۶-۱۲</span>. <span class="tiy-title">توسعه</span>: </span> ما حالا با مثال‌هایی کار می‌کنیم که نسبتاً پیچیده‌ترند و به انحای مختلف می‌توانیم آن‌ها را توسعه دهیم. یکی از مثال‌های این فصل را در نظر بگیرید و آن را تغییر دهید، مثلاً به آن کلیدها و مقادیر جدیدی اضافه کنید، زمینه‌ی برنامه را تغییر دهید، و یا اینکه فرمت خروجی برنامه را بهتر کنید.</p>
                            </div>
                        </div>
                    </div>
                    <div class="sect" id="ch06lev1sec5"><a class="bkmk" name="ch06lev1sec5"></a>
                        <h3>خلاصه</h3>
                        <p>در این فصل، با نحوه‌ی تعریف کردن دیکشنری و کار با اطلاعات ذخیره شده در دیکشنری آشنا شدید. یاد گرفتید که چگونه به هر کدام از عناصر دیکشنری دسترسی پیدا کنید و آن‌ها را تغییر دهید، و چگونه روی اطلاعات ذخیره شده در دیکشنری، حلقه تشکیل دهید. نحوه‌ی تشکیل حلقه روی زوج‌های کلید-مقدار، کلیدها، و مقادیر دیکشنری را فراگرفتید. هم‌چنین، با چگونگی قرار دادن دیکشنری در داخل لیست، لیست در داخل دیکشنری، و دیکشنری در داخل دیکشنری آشنا شدید.</p>
                        <p>در فصل بعد، با حلقه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">while</span><span class="rlm">‏</span> و چگونگی گرفتن اطلاعات از کاربر آشنا خواهید شد. فصل آینده خیلی هیجان‌انگیز است، چون خواهید توانست برنامه‌هایتان را تعاملی کنید: یعنی برنامه‌ی شما به ورودی کاربر پاسخ خواهد داد.</p>
                    </div>
                </div>
                <div class="row pager">
                    <div class="col-md-5 text-center text-md-left pager-prev"><a href="c16-ch05.xhtml"><span><span>فصل ۵</span>: <span>دستورالعمل <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">if</span><span class="rlm">‏</span></span></span></a></div>
                    <div class="col-md-2 text-center pager-title"><a href="c01-cover.xhtml">آغاز</a></div>
                    <div class="col-md-5 text-center text-md-right pager-next"><a href="c18-ch07.xhtml"><span><span>فصل ۷</span>: <span>ورودی کاربر و حلقه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">while</span><span class="rlm">‏</span></span></span></a></div>
                </div>
            </main>
            <aside class="col-md-2 order-md-first">
                <ul class="nav nav-pills flex-column">
                    <li class="nav-item"><a class="nav-link" href="../">دورهٔ فشردهٔ پایتون</a></li>
                    <li class="nav-item"><a class="nav-link" href="c06-toc.xhtml">فهرست</a></li>
                </ul>
            </aside>
        </div>
    </div>
    <div class="container">
        <div id="footer" class="row">
            <div class="col-sm-6">
                <p><span>© ۱۴۰۰، قاسم کیانی مقدم.</span></p>
            </div>
            <div class="col-sm-6">
                <p class="text-right"><span><a target="_blank" rel="me" href="https://linkedin.com/in/ghasemkiani" title="لینکدین"><span class="fab fa-linkedin"></span></a></span><span> </span><span><a target="_blank" rel="me" href="https://github.com/ghasemkiani" title="گیت‌هاب"><span class="fab fa-github"></span></a></span><span> </span><span><a target="_blank" rel="me" href="https://twitter.com/ghasemkiani" title="توئیتر"><span class="fab fa-twitter"></span></a></span><span> </span><span><a target="_blank" rel="me" href="https://facebook.com/ghasemkiani" title="فیس‌بوک"><span class="fab fa-facebook"></span></a></span><span> </span><span><a target="_blank" rel="me" href="https://telegram.me/ghasemkiani" title="تلگرام"><span class="fab fa-telegram"></span></a></span><span> </span><span><a target="_blank" rel="me" href="https://instagram.com/ghasem.kiani" title="اینستاگرام"><span class="fab fa-instagram"></span></a></span><span> </span><span><a target="_blank" rel="me" href="https://mastodon.social/@ghasemkiani" title="ماستودون"><span class="fab fa-mastodon"></span></a></span></p>
            </div>
        </div>
    </div>
    <script crossorigin="anonymous" src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo"></script>
    <script crossorigin="anonymous" src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.6/umd/popper.min.js" integrity="sha384-wHAiFfRlMFy6i5SRaxvfOCifBUQy1xHdJ/yoi7FRNXMRBu5WHdZYu1hA6ZOblgut"></script>
    <script crossorigin="anonymous" src="https://cdn.rtlcss.com/bootstrap/v4.0.0/js/bootstrap.min.js" integrity="sha384-54+cucJ4QbVb99v8dcttx/0JRx4FHMmhOWi4W+xrXpKcsKQodCBwAvu3xxkZAwsH"></script>
    <script async="async" src="https://static.getclicky.com/js" data-id="undefined"></script>
</body>

</html>