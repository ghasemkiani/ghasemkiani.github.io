<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" lang="fa" dir="rtl">

<head>
    <meta charset="UTF-8" />
    <title>ورودی کاربر و حلقه‌ی ‏while‏</title>
    <meta name="description" content="وب‌سایت قاسم کیانی مقدم" />
    <meta name="keywords" content="قاسم کیانی مقدم, وب‌سایت, وب‌سایت قاسم کیانی مقدم, کتاب, فارسی, کتاب فارسی, ترجمه, برنامه‌نویسی, جاوا, جاوا اسکریپت, پزشکی, طب اطفال" />
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no" />
    <link rel="stylesheet" crossorigin="anonymous" href="https://cdn.rtlcss.com/bootstrap/v4.0.0/css/bootstrap.min.css" integrity="sha384-P4uhUIGk/q1gaD/NdgkBIl3a6QywJjlsFJFk7SPRdruoGddvRVSwv5qFnvZ73cpz" />
    <link rel="stylesheet" crossorigin="anonymous" href="https://use.fontawesome.com/releases/v5.7.1/css/all.css" integrity="sha384-fnmOCqbTlWIlj8LyTjo7mOUStjsKC4pOpQbqyi7RrhN7udi9RwhKkMHpvLbHG9Sr" />
    <link rel="icon" type="image/x-icon" href="../../../favicon.ico" />
    <style type="text/css">
        @import url(https://fonts.googleapis.com/css?family=Droid%20Sans);
        @import url(https://fonts.googleapis.com/css?family=Droid%20Serif);
        @import url(https://fonts.googleapis.com/css?family=Droid%20Arabic%20Kufi);
        @import url(https://fonts.googleapis.com/css?family=Droid%20Arabic%20Naskh);

        html,
        body,
        input,
        textarea,
        select,
        option,
        h1,
        h2,
        h3,
        h4,
        h5,
        h6 {
            font-family: Droid Arabic Naskh, Droid Serif;
        }

        nav,
        .nav {
            font-family: Droid Arabic Kufi, Droid Sans;
        }

        h1,
        h2,
        h3,
        h4,
        h5,
        h6 {
            font-family: Droid Arabic Naskh, Droid Serif;
        }

        #footer {
            margin-top: 0.5rem;
            padding-top: 0.5rem;
            border-top: #eeeeee solid thick;
        }
    </style>
    <style>
        @import url(https://fonts.googleapis.com/css?family=Courier+Prime);

        div.row.pager {
            margin-top: 0.5em;
            padding: 0.5em 0;
            border-top: solid #cccccc 2px;
            background-color: #dddddd;
        }

        div.pager-prev {}

        div.pager-title {}

        div.pager-next {}
    </style>
    <link rel="stylesheet" type="text/css" href="styles.css" />
</head>

<body style="min-height: 75rem;">
    <nav class="navbar navbar-expand-md navbar-dark bg-dark mb-4">
        <div class="container"><a class="navbar-brand" href="../../../">وب‌سایت قاسم کیانی مقدم</a><button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#divNavBarToggle" aria-controls="divNavBarToggle" aria-expanded="false" aria-label="Toggle navigation"><span class="navbar-toggler-icon"></span></button>
            <div id="divNavBarToggle" class="collapse navbar-collapse">
                <ul class="navbar-nav mr-auto">
                    <li class="nav-item active"><a class="nav-link" href="../../">کتاب‌ها<span class="sr-only"> (current)</span></a></li>
                    <li class="nav-item"><a class="nav-link" href="../../../essays/">مقالات</a></li>
                    <li class="nav-item"><a class="nav-link" href="../../../translation/">ترجمه</a></li>
                    <li class="nav-item"><a class="nav-link" href="../../../about/">درباره</a></li>
                    <li class="nav-item"><a class="nav-link" href="../../../contact/">تماس</a></li>
                </ul>
            </div>
        </div>
    </nav>
    <div class="container">
        <div class="row">
            <main class="col-md-10 order-md-last">
                <div class="ch" id="ch07">
                    <h2 class="ch-title"><a class="bkmk" name="ch07"></a><a class="rtoc" href="c06-toc.xhtml"><span class="ch-title-num">۷</span><br /><span class="ch-title-text">ورودی کاربر و حلقه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">while</span><span class="rlm">‏</span></span></a></h2><img style="float:   right; margin-left:  0.5em; margin-bottom: 0.25em;" alt="تصویر ابتدای فصل" src="images/ch.svg" />
                    <a id="p113"></a>
                    <p>اکثر برنامه‌ها برای این منظور نوشته می‌شوند که مشکلی را برای کاربر نهایی حل کنند. برای این منظور، معمولاً لازم است که اطلاعاتی را از کاربر بگیرید. به‌عنوان یک مثال ساده، فرض کنید کسی می‌خواهد بداند که آیا سن او برای رأی دادن کافی است. اگر برنامه‌ای برای پاسخ دادن به این سؤال بنویسید، ابتدا باید سن کاربر را بدانید تا بتوانید جواب دهید. برنامه باید از کاربر بخواهد که سنش را وارد کند؛ وقتی که برنامه این ورودی را دریافت کرد، می‌تواند آن را با سن مجاز رأی‌گیری مقایسه کند تا ببیند کاربر به سن رأی‌گیری رسیده است، و سپس نتیجه را گزارش کند.</p>
                    <p>در این فصل، یاد می‌گیرید که چگونه ورودی را از کاربر دریافت کنید، تا برنامه‌ی شما بتواند با آن کار کند. وقتی که برنامه‌ی شما نیاز به دانستن یک نام دارد، خواهید توانست آن نام را از کاربر بپرسید. اگر نیاز به لیستی از نام‌ها داشته باشد، می‌توانید تعدادی نام را از کاربر بگیرید. برای انجام این کار، از تابع <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">input()</span><span class="rlm">‏</span> استفاده خواهید کرد.</p>
                    <p>این کار را هم یاد خواهید گرفت که برنامه را به‌صورتی بنویسید که تا زمانی که کاربر بخواهد، همچنان به اجرا ادامه دهد، تا کاربر بتواند تا هر جا که می‌خواهد، اطلاعات وارد برنامه کند؛ بعد برنامه‌ی شما می‌تواند با آن اطلاعات کار کند. از حلقه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">while</span><span class="rlm">‏</span> پایتون استفاده خواهید کرد تا برنامه‌ی شما تا زمانی که شرط‌های خاصی برقرار باشد، به اجرای خود ادامه دهد.</p><a id="p114"></a>
                    <p>وقتی که بتوانید ورودی کاربر را بگیرید و مدت زمان اجرای برنامه را کنترل کنید، خواهید توانست برنامه‌های کاملاً تعاملی بنویسید.</p>
                    <div class="sect" id="ch07lev1sec1"><a class="bkmk" name="ch07lev1sec1"></a>
                        <h3>تابع <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">input()</span><span class="rlm">‏</span> چگونه کار می‌کند</h3>
                        <p>تابع <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">input()</span><span class="rlm">‏</span> اجرای برنامه را قطع می‌کند و منتظر آن می‌شود که کاربر متنی را وارد کند. وقتی که پایتون ورودی کاربر را دریافت کرد، آن ورودی را به متغیری اختصاص می‌دهد تا به راحتی بتوانید با آن کار کنید.</p>
                        <p>مثلاً برنامه‌ی زیر از کاربر می‌خواهد که متنی را وارد کند، سپس همان پیام را برای کاربر نمایش می‌دهد:</p>
                        <div class="snippet">
                            <div class="snippet-title" dir="ltr">parrot.py</div>
                            <pre class="snippet" dir="ltr">message = input("Tell me something, and I will repeat it back to you: ")
print(message)</pre>
                        </div>
                        <p>تابع <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">input()</span><span class="rlm">‏</span> یک آرگومان می‌گیرد، و آن <span class="emphasis">اعلان</span> (<span class="emphasis"><span class="rlm">‏</span><span class="lr" dir="ltr">prompt</span><span class="rlm">‏</span></span>) یا دستورالعملی است که می‌خواهیم که نمایش داده شود تا کاربر بداند که چه باید بکند. در این مثال، وقتی که پایتون سطر اول را اجرا می‌کند، کاربر اعلان زیر را می‌بیند: <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">Tell me something, and I will repeat it back to you:</span><span class="rlm">‏</span>. برنامه منتظر می‌شود تا کاربر جوابش را وارد کند، و وقتی که کاربر کلید <span class="rlm">‏</span><span class="key" dir="ltr">enter</span><span class="rlm">‏</span> را فشار داد، ادامه می‌دهد. جواب داده شده به متغیر <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">message</span><span class="rlm">‏</span> اختصاص داده می‌شود، و سپس دستور <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">print(message)</span><span class="rlm">‏</span> همان ورودی را دوباره برای کاربر نمایش می‌دهد:</p>
                        <div class="snippet">
                            <pre class="snippet" dir="ltr">Tell me something, and I will repeat it back to you: <span class="bo">Hello everyone!</span>
Hello everyone!</pre>
                        </div>
                        <div class="note">
                            <h6 class="note-title">توجه</h6>
                            <p>سابلایم تکست و بسیاری ویرایشگرهای دیگر برنامه‌هایی را که از کاربر درخواست ورودی می‌کنند، اجرا نمی‌کنند. می‌توانید برنامه را با این ویرایشگرها بنویسید، ولی باید آن را از ترمینال اجرا کنید. به قسمت <span class="ref">«<a href="c12-ch01.xhtml#ch01lev1sec5">اجرا کردن برنامه‌های پایتون از ترمینال</a>»</span> در <span class="ref"><a href="c12-ch01.xhtml#p012">صفحه‌ی <span>۱۲</span></a></span> مراجعه کنید.</p>
                        </div>
                        <div class="sect" id="ch07lev2sec1"><a class="bkmk" name="ch07lev2sec1"></a>
                            <h4>نوشتن اعلان‌های شفاف</h4>
                            <p>هر بار که از تابع <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">input()</span><span class="rlm">‏</span> استفاده می‌کنید، باید یک اعلان شفاف و قابل‌فهم بنویسید که دقیقاً به کاربر بگوید دنبال چه نوع اطلاعاتی هستید. کافی است مطلبی بنویسید که به کاربر بگوید چه چیزی وارد کند. به‌عنوان مثال:</p>
                            <div class="snippet">
                                <div class="snippet-title" dir="ltr">greeter.py</div>
                                <pre class="snippet" dir="ltr">name = input("Please enter your name: ")
print(f"\nHello, {name}!")</pre>
                            </div>
                            <p>در آخر اعلان یک اسپیس اضافی بگذارید (بعد از دو نقطه در مثال فوق) تا اعلان از پاسخ کاربر جدا باشد و کاربر به روشنی متوجه شود که متن خود را کجا وارد کند. به‌عنوان مثال:</p>
                            <div class="snippet">
                                <pre class="snippet" dir="ltr">Please enter your name: <span class="bo">Eric</span>
Hello, Eric!</pre>
                            </div><a id="p115"></a>
                            <p>بعضی وقت‌ها شاید لازم باشد که اعلانی بنویسید که در یک سطر جا نمی‌شود. مثلاً شاید بخواهید توضیح دهید که چرا خواهان دریافت ورودی خاصی هستید. می‌توانید اعلان را به یک متغیر اختصاص دهید و آن متغیر را به تابع <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">input()</span><span class="rlm">‏</span> بدهید. با این کار می‌توانید اعلان را در چند سطر تعریف کنید، و سپس دستورالعمل <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">input()</span><span class="rlm">‏</span> را به‌صورت خوانا بنویسید.</p>
                            <div class="snippet">
                                <div class="snippet-title" dir="ltr">greeter.py</div>
                                <pre class="snippet" dir="ltr">prompt = "If you tell us who you are, we can personalize the messages you see."
prompt += "\nWhat is your first name? "

name = input(prompt)
<span class="ash">print(f"\nHello, {name}!")</span></pre>
                            </div>
                            <p>این مثال یک روش را برای ساختن رشته‌ی چند سطری نشان می‌دهد. سطر اول بخش اول پیام را به متغیر <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">prompt</span><span class="rlm">‏</span> اختصاص می‌دهد. در سطر دوم، عملگر <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">+=</span><span class="rlm">‏</span> همان رشته را که به <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">prompt</span><span class="rlm">‏</span> اختصاص داده شده است، می‌گیرد و رشته‌ی جدید را به انتهای آن اضافه می‌کند.</p>
                            <p>اکنون اعلان شامل دو سطر است، و در اینجا هم بعد از علامت سؤال یک اسپیس گذاشته است تا کاملاً واضح باشد:</p>
                            <div class="snippet">
                                <pre class="snippet" dir="ltr">If you tell us who you are, we can personalize the messages you see.
What is your first name? <span class="bo">Eric</span>

Hello, Eric!</pre>
                            </div>
                        </div>
                        <div class="sect" id="ch07lev2sec2"><a class="bkmk" name="ch07lev2sec2"></a>
                            <h4>استفاده از <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">int()</span><span class="rlm">‏</span> برای دریافت ورودی عددی</h4>
                            <p>وقتی که از تابع <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">input()</span><span class="rlm">‏</span> استفاده می‌کنید، پایتون چیزی را که کاربر وارد می‌کند، به‌عنوان رشته تفسیر می‌کند. مثلاً دستورات زیر را در تفسیرگر پایتون در نظر بگیرید که در آن سن کاربر پرسیده می‌شود:</p>
                            <div class="snippet">
                                <pre class="snippet" dir="ltr">&gt;&gt;&gt; <span class="bo">age = input("How old are you? ")</span>
How old are you? <span class="bo">21</span>
&gt;&gt;&gt; <span class="bo">age</span>
'21'</pre>
                            </div>
                            <p>کاربر عدد ۲۱ را وارد می‌کند، ولی وقتی که مقدار <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">age</span><span class="rlm">‏</span> را از پایتون می‌پرسیم، مقدار <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">'21'</span><span class="rlm">‏</span> را نمایش می‌دهد، که نمایش رشته‌ای مقدار عددیِ وارد شده است. می‌دانیم که پایتون ورودی را به‌عنوان رشته تفسیر کرده است، چرا که عدد در داخل علامت نقل‌قول نمایش داده شده است. اگر فقط قصدتان نمایش دادن ورودی باشد، مشکلی ندارد. ولی اگر تلاش کنید از آن ورودی به‌عنوان عدد استفاده کنید، با خطا مواجه خواهید شد:</p>
                            <div class="snippet">
                                <pre class="snippet" dir="ltr">&gt;&gt;&gt; <span class="bo">age = input("How old are you? ")</span>
How old are you? <span class="bo">21</span>
<span class="n" dir="ltr">1</span>&gt;&gt;&gt; <span class="bo">age &gt;= 18</span>
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
<span class="n" dir="ltr">2</span>TypeError: unorderable types: str() &gt;= int()</pre>
                            </div><a id="p116"></a>
                            <p>وقتی که تلاش می‌کنید از ورودی برای انجام یک مقایسه‌ی عددی استفاده کنید <span class="n" dir="ltr">1</span>، پایتون خطا گزارش می‌کند، زیرا نمی‌تواند یک رشته را با یک عدد صحیح مقایسه کند: رشته‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">'21'</span><span class="rlm">‏</span> را که به <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">age</span><span class="rlm">‏</span> اختصاص داده شده است، نمی‌توان با مقدار ۱۸ مقایسه کرد <span class="n" dir="ltr">2</span>.</p>
                            <p>این مسئله را می‌توانیم با استفاده از تابع <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">int()</span><span class="rlm">‏</span> حل کنیم، که به پایتون می‌گوید که ورودی را به‌عنوان یک مقدار عددی در نظر بگیرد. تابع <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">int()</span><span class="rlm">‏</span> نمایش رشته‌ای عدد را به نمایش عددی آن تبدیل می‌کند، همان گونه که در زیر نشان داده شده است:</p>
                            <div class="snippet">
                                <pre class="snippet" dir="ltr">&gt;&gt;&gt; <span class="bo">age = input("How old are you? ")</span>
How old are you? <span class="bo">21</span>
<span class="n" dir="ltr">1</span>&gt;&gt;&gt; <span class="bo">age = int(age)</span>
&gt;&gt;&gt; <span class="bo">age &gt;= 18</span>
True</pre>
                            </div>
                            <p>در این مثال، وقتی که عدد <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">21</span><span class="rlm">‏</span> را در مقابل اعلان وارد می‌کنیم، پایتون عدد را به‌عنوان رشته تفسیر می‌کند، ولی بعد این مقدار با استفاده از تابع <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">int()</span><span class="rlm">‏</span> به نمایش عددی آن تبدیل می‌شود <span class="n" dir="ltr">1</span>. حالا پایتون می‌تواند وارسی شرطی را انجام دهد: پایتون مقدار <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">age</span><span class="rlm">‏</span> را (که حالا مقدار عددی ۲۱ است) با عدد <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">18</span><span class="rlm">‏</span> مقایسه می‌کند، تا ببیند آیا <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">age</span><span class="rlm">‏</span> بزرگ‌تر یا مساوی با ۱۸ هست یا نه. نتیجه‌ی این وارسی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">True</span><span class="rlm">‏</span> است.</p>
                            <p>در یک برنامه‌ی واقعی، چگونه از تابع <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">int()</span><span class="rlm">‏</span> استفاده می‌کنید؟ برنامه‌ای را در نظر بگیرید که مشخص می‌کند قد فرد (بر حسب اینچ) به اندازه‌ای هست که سوار چرخ فلک شود یا خیر:</p>
                            <div class="snippet">
                                <div class="snippet-title" dir="ltr">rollercoaster.py</div>
                                <pre class="snippet" dir="ltr">height = input("How tall are you, in inches? ")
height = int(height)

if height &gt;= 48:
    print("\nYou're tall enough to ride!")
else:
    print("\nYou'll be able to ride when you're a little older.")</pre>
                            </div>
                            <p>این برنامه می‌تواند <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">height</span><span class="rlm">‏</span> را با <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">48</span><span class="rlm">‏</span> مقایسه کند، زیرا دستور <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">height = int(height)</span><span class="rlm">‏</span> مقدار ورودی را قبل از انجام مقایسه، به نمایش عددی آن تبدیل می‌کند. اگر عدد وارد شده بزرگ‌تر یا مساوی با ۴۸ (اینچ؛ معادل حدود ۱۲۰ سانتی‌متر) باشد، به کاربر می‌گوییم که بلندی قد او برای سوار شدن به چرخ فلک کافی است:</p>
                            <div class="snippet">
                                <pre class="snippet" dir="ltr">How tall are you, in inches? <span class="bo">71</span>

You're tall enough to ride!</pre>
                            </div>
                            <p>زمانی که از ورودی عددی برای انجام محاسبات و مقایسه‌ها استفاده می‌کنید، حتماً یادتان باشد که ابتدا مقدار ورودی را به نمایش عددی آن تبدیل کنید.</p>
                        </div>
                        <div class="sect" id="ch07lev2sec3"><a class="bkmk" name="ch07lev2sec3"></a>
                            <h4>عملگر باقی‌مانده</h4>
                            <p>یک ابزار مفید و برای کار کردن با اطلاعات عددی، <span class="emphasis">عملگر باقی‌مانده</span> (<span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">%</span><span class="rlm">‏</span>) است که عددی را بر عدد دیگر تقسیم می‌کند و باقی‌مانده‌ی آن را برمی‌گرداند:</p>
                            <div class="snippet">
                                <pre class="snippet" dir="ltr">&gt;&gt;&gt; <span class="bo">4 % 3</span>
1
<a id="p117"></a>&gt;&gt;&gt; <span class="bo">5 % 3</span>
2
&gt;&gt;&gt; <span class="bo">6 % 3</span>
0
&gt;&gt;&gt; <span class="bo">7 % 3</span>
1</pre>
                            </div>
                            <p>عملگر باقی‌مانده خارج‌قسمت تقسیم را به شما نمی‌گوید؛ فقط باقی‌مانده‌ی تقسیم را مشخص می‌کند.</p>
                            <p>وقتی که یک عدد بر عدد دیگری قابل‌قسمت باشد، باقی‌مانده‌ی آن ۰ است، بنابراین عملگر باقی‌مانده همواره ۰ برمی‌گرداند. می‌توانید از این واقعیت برای تعیین زوج یا فرد بودن عدد استفاده کنید:</p>
                            <div class="snippet">
                                <div class="snippet-title" dir="ltr">even_or_odd.py</div>
                                <pre class="snippet" dir="ltr">number = input("Enter a number, and I'll tell you if it's even or odd: ")
number = int(number)

if number % 2 == 0:
    print(f"\nThe number {number} is even.")
else:
    print(f"\nThe number {number} is odd.")</pre>
                            </div>
                            <p>اعداد زوج همیشه بر دو بخش‌پذیرند، بنابراین اگر باقی‌مانده‌ی عددی بر دو، صفر باشد (یعنی اگر <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">if number % 2 == 0</span><span class="rlm">‏</span>)، آنگاه عدد زوج است. در غیر این صورت، فرد است.</p>
                            <div class="snippet">
                                <pre class="snippet" dir="ltr">Enter a number, and I'll tell you if it's even or odd:
<span class="bo">42</span>

The number 42 is even.</pre>
                            </div>
                            <div class="sidebar">
                                <h6 class="sidebar-title">خودتان امتحان کنید</h6>
                                <p class="tiy1"><span class="tiy" id="ch07_tiy01"><span class="tiy-num">۷-۱</span>. <span class="tiy-title">ماشین کرایه‌ای</span>: </span> برنامه‌ای بنویسید که از کاربر می‌پرسد که چه نوع ماشین کرایه‌ای می‌خواهد. پیامی را درباره‌ی آن ماشین نمایش دهید، مثلاً: <span class="rlm">‏</span><span class="lr" dir="ltr">“Let me see if I can find you a Subaru.”</span><span class="rlm">‏</span>.</p>
                                <p class="tiy1"><span class="tiy" id="ch07_tiy02"><span class="tiy-num">۷-۲</span>. <span class="tiy-title">صندلی‌های رستوران</span>: </span> برنامه‌ای بنویسید که از کاربر می‌پرسد که چند نفر برای خوردن شام همراه او هستند. اگر جواب بیشتر از هشت نفر باشد، پیامی را نمایش دهید که می‌گوید که باید برای میز منتظر شوند. در غیر این صورت، به کاربر بگویید که میز برای او آماده است.</p>
                                <p class="tiy1"><span class="tiy" id="ch07_tiy03"><span class="tiy-num">۷-۳</span>. <span class="tiy-title">مضرب‌های ده</span>: </span> عددی را از کاربر بپرسید و سپس گزارش کنید که آن عدد مضرب ده است یا نه.</p>
                            </div>
                        </div>
                    </div>
                    <div class="sect" id="ch07lev1sec2"><a class="bkmk" name="ch07lev1sec2"></a>
                        <h3>آشنایی با حلقه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">while</span><span class="rlm">‏</span></h3>
                        <a id="p118"></a>
                        <p>حلقه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">for</span><span class="rlm">‏</span> کالکشنی از آیتم‌ها را می‌گیرد و یک بلوک کد را یک بار برای هر کدام از آیتم‌های موجود در آن کالکشن اجرا می‌کند. بر عکس، حلقه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">while</span><span class="rlm">‏</span> تا وقتی که شرط داده شده صحیح باشد، اجرا می‌شود.</p>
                        <div class="sect" id="ch07lev2sec4"><a class="bkmk" name="ch07lev2sec4"></a>
                            <h4>حلقه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">while</span><span class="rlm">‏</span> در عمل</h4>
                            <p>می‌توانید از حلقه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">while</span><span class="rlm">‏</span> برای شمارش روی یک سری اعداد استفاده کنید. مثلاً حلقه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">while</span><span class="rlm">‏</span> زیر از ۱ تا ۵ شمارش می‌کند:</p>
                            <div class="snippet">
                                <div class="snippet-title" dir="ltr">counting.py</div>
                                <pre class="snippet" dir="ltr">current_number = 1
while current_number &lt;= 5:
    print(current_number)
    current_number += 1</pre>
                            </div>
                            <p>در سطر اول، با اختصاص دادن مقدار ۱ به متغیر <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">current_number</span><span class="rlm">‏</span>، شمارش را از ۱ شروع می‌کنیم. سپس حلقه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">while</span><span class="rlm">‏</span> شروع به اجرا می‌کند و تا زمانی که مقدار <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">current_number</span><span class="rlm">‏</span> کوچک‌تر یا مساوی با ۵ باشد، مرتب اجرا می‌شود. کد داخل حلقه مقدار <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">current_number</span><span class="rlm">‏</span> را نمایش می‌دهد و سپس با دستور <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">current_number += 1</span><span class="rlm">‏</span> عدد ۱ را به آن اضافه می‌کند. (عملگر <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">+=</span><span class="rlm">‏</span> شکل کوتاه‌شده‌ای برای <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">current_number = current_number + 1</span><span class="rlm">‏</span> است.)</p>
                            <p>تا وقتی که شرط <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">current_number &lt;= 5</span><span class="rlm">‏</span> صحیح باشد، پایتون حلقه را تکرار می‌کند. از آنجا که ۱ کوچک‌تر از ۵ است، پایتون عدد <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">1</span><span class="rlm">‏</span> را نمایش می‌دهد، سپس به آن ۱ اضافه می‌کند، به‌طوری که حالا عدد فعلی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">2</span><span class="rlm">‏</span> می‌شود. از آنجا که ۲ کوچک‌تر از ۵ است، پایتون <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">2</span><span class="rlm">‏</span> را نمایش می‌دهد و دوباره به آن ۱ اضافه می‌کند، به‌طوری که عدد فعلی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">3</span><span class="rlm">‏</span> می‌شود، و الی آخر. وقتی که مقدار <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">current_number</span><span class="rlm">‏</span> بزرگ‌تر از ۵ باشد، حلقه متوقف می‌شود و برنامه پایان می‌یابد:</p>
                            <div class="snippet">
                                <pre class="snippet" dir="ltr">1
2
3
4
5</pre>
                            </div>
                            <p>برنامه‌هایی که هر روز استفاده می‌کنید، به احتمال زیاد حاوی حلقه‌های <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">while</span><span class="rlm">‏</span> هستند. مثلاً یک بازی نیاز به حلقه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">while</span><span class="rlm">‏</span> دارد، تا اینکه مادام که بازی می‌کنید، به اجرا ادامه دهد، و به محض اینکه درخواست خروج بنمایید، بتواند اجرای خود را متوقف کند. اگر قرار بود برنامه‌ها قبل از آنکه ما با آنها بگوییم، اجرایشان متوقف شود، یا حتی بعد از آن که می‌خواهیم از بازی خارج شویم، باز هم به اجرای خود ادامه دهند، در آن صورت استفاده از برنامه‌ها زیاد جالب نمی‌بود. بنابراین، حلقه‌های <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">while</span><span class="rlm">‏</span> بسیار مفید هستند.</p>
                        </div>
                        <div class="sect" id="ch07lev2sec5"><a class="bkmk" name="ch07lev2sec5"></a>
                            <h4>دادن اختیار خارج شدن از برنامه به کاربر</h4>
                            <p>برای اینکه برنامه‌ی <span class="rlm">‏</span><span class="ident" dir="ltr">parrot.py</span><span class="rlm">‏</span> تا وقتی که کاربر می‌خواهد به اجرای خود ادامه دهد، می‌توانیم قسمت عمده‌ی کد را داخل یک حلقه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">while</span><span class="rlm">‏</span> بگذاریم. یک <span class="emphasis">مقدار خروج</span> را تعریف می‌کنیم، و برنامه را همچنان در حال اجرا نگه می‌داریم، تا زمانی که کاربر مقدار خروج را وارد کند:</p>
                            <div class="snippet">
                                <div class="snippet-title" dir="ltr">parrot.py</div>
                                <pre class="snippet" dir="ltr"><span class="n" dir="ltr">1</span>prompt = "\nTell me something, and I will repeat it back to you:"
prompt += "\nEnter 'quit' to end the program. "
<a id="p119"></a><span class="n" dir="ltr">2</span>message = ""
<span class="n" dir="ltr">3</span>while message != 'quit':
    message = input(prompt)
    print(message)</pre>
                            </div>
                            <p>در <span class="n" dir="ltr">1</span>، اعلانی را تعریف می‌کنیم که دو گزینه را در اختیار کاربر قرار می‌دهد: یا پیامی را وارد کند و یا اینکه مقدار خروج (یعنی در این مورد، رشته‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">'quit'</span><span class="rlm">‏</span>) را وارد کند. سپس متغیری برای پیام در نظر می‌گیریم <span class="n" dir="ltr">2</span> تا معلوم باشد که کاربر چه مقداری وارد کرده است. متغیر <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">message</span><span class="rlm">‏</span> را به‌عنوان یک رشته‌ی خالی، <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">""</span><span class="rlm">‏</span>، تعریف می‌کنیم، تا در دفعه‌ی اول هم که پایتون وارد سطر <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">while</span><span class="rlm">‏</span> می‌شود، چیزی برای وارسی کردن داشته باشد. بار اول که برنامه اجرا می‌شود و پایتون به دستورالعمل <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">while</span><span class="rlm">‏</span> می‌رسد، باید مقدار <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">message</span><span class="rlm">‏</span> را با <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">'quit'</span><span class="rlm">‏</span> مقایسه کند، ولی هنوز کاربر چیزی وارد نکرده است. اگر پایتون چیزی برای مقایسه کردن نداشته باشد، نخواهد توانست اجرای برنامه را ادامه دهد. برای حل این مشکل، باید حتماً یک مقدار اولیه به <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">message</span><span class="rlm">‏</span> بدهیم. گرچه این مقدار فقط یک رشته‌ی خالی است، ولی برای پایتون معنی می‌دهد، به‌طوری که می‌تواند مقایسه را انجام دهد و وارد حلقه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">while</span><span class="rlm">‏</span> شود. این حلقه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">while</span><span class="rlm">‏</span> <span class="n" dir="ltr">3</span> تا وقتی که مقدار <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">message</span><span class="rlm">‏</span> برابر با <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">'quit'</span><span class="rlm">‏</span> نباشد، به اجرای خود ادامه خواهد داد.</p>
                            <p>در نوبت اول اجرای حلقه، مقدار <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">message</span><span class="rlm">‏</span> فقط یک رشته‌ی خالی است، بنابراین، پایتون وارد حلقه می‌شود. در دستور <span class="nobreak"><span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">message = input(prompt)</span><span class="rlm">‏</span></span>، پایتون اعلان را نمایش می‌دهد و منتظر می‌شود که کاربر ورودی را وارد کند. ورودی کاربر به متغیر <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">message</span><span class="rlm">‏</span> اختصاص داده می‌شود و نمایش داده می‌شود؛ سپس پایتون دوباره شرط را در دستورالعمل <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">while</span><span class="rlm">‏</span> ارزیابی می‌کند. تا مادام که کاربر کلمه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">'quit'</span><span class="rlm">‏</span> را وارد نکند، اعلان دوباره نمایش داده می‌شود و پایتون منتظر ورودی جدید می‌شود. وقتی که کاربر سرانجام کلمه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">'quit'</span><span class="rlm">‏</span> را وارد کرد، پایتون اجرای حلقه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">while</span><span class="rlm">‏</span> را متوقف می‌کند و برنامه پایان می‌پذیرد:</p>
                            <div class="snippet">
                                <pre class="snippet" dir="ltr">Tell me something, and I will repeat it back to you:
Enter 'quit' to end the program. <span class="bo">Hello everyone!</span>
Hello everyone!

Tell me something, and I will repeat it back to you:
Enter 'quit' to end the program. <span class="bo">Hello again.</span>
Hello again.

Tell me something, and I will repeat it back to you:
Enter 'quit' to end the program. <span class="bo">quit</span>
quit</pre>
                            </div>
                            <p>این برنامه به خوبی کار می‌کند، جز اینکه کلمه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">'quit'</span><span class="rlm">‏</span> را هم مانند یک پیام واقعی نمایش می‌دهد. با یک وارسی ساده‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">if</span><span class="rlm">‏</span> می‌توان این مشکل را برطرف کرد:</p>
                            <div class="snippet">
                                <pre class="snippet" dir="ltr"><span class="ash">prompt = "\nTell me something, and I will repeat it back to you:"</span>
<span class="ash">prompt += "\nEnter 'quit' to end the program. "</span>

<span class="ash">message = ""</span>
<span class="ash">while message != 'quit':</span>
    <span class="ash">message = input(prompt)</span>

    if message != 'quit':
        <span class="ash">print(message)</span></pre>
                            </div><a id="p120"></a>
                            <p>حالا برنامه قبل از اینکه پیام را نمایش دهد، آن را وارسی می‌کند، و فقط در صورتی که با مقدار خروج برابر نباشد، آن را نمایش می‌دهد:</p>
                            <div class="snippet">
                                <pre class="snippet" dir="ltr">Tell me something, and I will repeat it back to you:
Enter 'quit' to end the program. <span class="bo">Hello everyone!</span>
Hello everyone!

Tell me something, and I will repeat it back to you:
Enter 'quit' to end the program. <span class="bo">Hello again.</span>
Hello again.

Tell me something, and I will repeat it back to you:
Enter 'quit' to end the program. <span class="bo">quit</span></pre>
                            </div>
                        </div>
                        <div class="sect" id="ch07lev2sec6"><a class="bkmk" name="ch07lev2sec6"></a>
                            <h4>استفاده از فلگ</h4>
                            <p>در مثال قبل، کاری کردیم که برنامه تا مدتی که شرط خاصی برقرار باشد، عمل معینی را انجام دهد. اما در برنامه‌های پیچیده‌تر که رویدادهای مختلف متعددی می‌تواند موجب توقف اجرای برنامه شود، چه باید کرد؟</p>
                            <p>به‌عنوان مثال، در یک بازی، چندین رویداد مختلف می‌تواند موجب ختم بازی شود. وقتی که سفینه‌های بازیکن تمام می‌شود، یا وقت او تمام می‌شود، یا اینکه شهرهایی که باید از آن محافظت می‌کردند، نابود می‌شود، بازی باید تمام شود. یعنی اگر هر کدام از این رویدادها اتفاق بیفتد، باید بازی تمام شود. اگر رویدادهای مختلف زیادی بتواند باعث ختم بازی شود، وارسی کردن تمام این شرایط در یک دستورالعمل <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">while</span><span class="rlm">‏</span> پیچیده و دشوار می‌شود.</p>
                            <p>برای برنامه‌ای که باید تا زمانی که شرایط برقرار باشد، اجرا شود، می‌توانید یک متغیر تعیین کنید که مشخص می‌کند که تمام برنامه فعال است یا خیر. این متغیر، که به آن <span class="emphasis">فلگ (<span class="rlm">‏</span><span class="lr" dir="ltr">flag</span><span class="rlm">‏</span>)</span> می‌گویند، به‌عنوان علامتی برای برنامه عمل می‌کند. می‌توانیم برنامه را طوری بنویسیم که تا وقتی مقدار فلگ <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">True</span><span class="rlm">‏</span> است، اجرا شود، و هر گاه که بر اثر رویدادهای مختلفی به فلگ مقدار <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">False</span><span class="rlm">‏</span> داده شود، اجرای آن متوقف شود. در نتیجه، دستورالعمل کلی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">while</span><span class="rlm">‏</span> فقط باید یک شرط را وارسی کند: این مقدار فلگ در حال حاضر <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">True</span><span class="rlm">‏</span> است یا خیر. سپس، تمام وارسی‌های دیگر را می‌توان در بقیه‌ی برنامه به‌صورت منظم و مرتبی انجام داد (یعنی می‌توان بررسی کرد که آیا رویدادی اتفاق افتاده است که نیاز داشته باشد که به فلگ مقدار <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">False</span><span class="rlm">‏</span> اختصاص داده شود).</p>
                            <p>حالا به برنامه‌ی <span class="rlm">‏</span><span class="ident" dir="ltr">parrot.py</span><span class="rlm">‏</span> که در قسمت قبل نوشتیم، یک فلگ اضافه می‌کنیم. این فلگ، که نام آن را <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">active</span><span class="rlm">‏</span> می‌گذاریم (البته هر اسم دیگری هم خواستید، می‌توانید به آن بدهید)، پایش می‌کند که آیا برنامه باید به اجرا ادامه دهد یا خیر:</p>
                            <div class="snippet">
                                <pre class="snippet" dir="ltr"><span class="ash">prompt = "\nTell me something, and I will repeat it back to you:"</span>
<span class="ash">prompt += "\nEnter 'quit' to end the program. "</span>

<span class="n" dir="ltr">1</span>active = True
<span class="n" dir="ltr">2</span>while active:
    message = input(prompt)

<span class="n" dir="ltr">3</span>    if message == 'quit':
        active = False
<span class="n" dir="ltr">4</span>    else:
        print(message)</pre>
                            </div><a id="p121"></a>
                            <p>مقدار متغیر <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">active</span><span class="rlm">‏</span> را <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">True</span><span class="rlm">‏</span> قرار می‌دهیم <span class="n" dir="ltr">1</span>، تا آنکه برنامه در وضعیت فعال شروع به کار کند. این کار سبب می‌شود که نوشتن دستورالعمل <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">while</span><span class="rlm">‏</span> ساده‌تر باشد، زیرا هیچ مقایسه‌ای در خود دستورالعمل <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">while</span><span class="rlm">‏</span> انجام نمی‌شود؛ کارهای منطقی در بخش‌های دیگر برنامه انجام می‌شود. مادام که مقدار متغیر <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">active</span><span class="rlm">‏</span> همچنان <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">True</span><span class="rlm">‏</span> باشد، حلقه به اجرا ادامه خواهد داد <span class="n" dir="ltr">2</span>.</p>
                            <p>در دستورالعمل <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">if</span><span class="rlm">‏</span> داخل حلقه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">while</span><span class="rlm">‏</span>، مقدار متغیر <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">message</span><span class="rlm">‏</span> را پس از آنکه کاربر ورودی خود را وارد کرد، وارسی می‌کنیم. اگر کاربر مقدار <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">'quit'</span><span class="rlm">‏</span> وارد کند <span class="n" dir="ltr">3</span>، به متغیر <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">active</span><span class="rlm">‏</span> مقدار <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">False</span><span class="rlm">‏</span> اختصاص می‌دهیم، و حلقه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">while</span><span class="rlm">‏</span> متوقف می‌شود. اگر کاربر هر چیزی غیر از <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">'quit'</span><span class="rlm">‏</span> وارد کند <span class="n" dir="ltr">4</span>، ورودی او را به‌عنوان پیام نمایش می‌دهیم.</p>
                            <p>خروجی این برنامه مانند همان برنامه‌ی قبلی است که وارسی شرطی آن مستقیماً در خود دستورالعمل <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">while</span><span class="rlm">‏</span> بود. ولی حالا که یک فلگ داریم که نشان می‌دهد که برنامه‌ی کلی در حالت فعال است یا خیر، به آسانی می‌توانیم وارسی‌های بیشتری را (مثلاً به‌صورت دستورالعمل <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">elif</span><span class="rlm">‏</span>) وارد کنیم که رویدادهای بیشتری نیز بتواند موجب تبدیل شدن مقدار <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">active</span><span class="rlm">‏</span> به <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">False</span><span class="rlm">‏</span> شود. این روش برای برنامه‌های پیچیده مانند بازی‌ها مفید است، چرا که در این برنامه‌ها ممکن است رویدادهای زیادی باشد که باید موجب توقف اجرای برنامه شود. وقتی که هر کدام از این رویدادها موجب <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">False</span><span class="rlm">‏</span> شدن مقدار فلگ شود، حلقه‌ی اصلی بازی متوقف می‌شود، پیام <span class="emphasis">پایان بازی</span> نمایش داده می‌شود، و شاید این امکان هم به بازیکن داده شود که دوباره بازی کند.</p>
                        </div>
                        <div class="sect" id="ch07lev2sec7"><a class="bkmk" name="ch07lev2sec7"></a>
                            <h4>استفاده از <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">break</span><span class="rlm">‏</span> برای خروج از حلقه</h4>
                            <p>برای اینکه فوراً بدون اجرا کردن بقیه‌ی کد حلقه، و صرف نظر از نتیجه‌ی هرگونه وارسی شرطی از یک حلقه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">while</span><span class="rlm">‏</span> خارج شوید، از دستورالعمل <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">break</span><span class="rlm">‏</span> استفاده کنید. دستورالعمل <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">break</span><span class="rlm">‏</span> جریان برنامه را هدایت می‌کند؛ می‌توانید از آن برای کنترل اینکه کدام سطرهای کد اجرا شوند و کدام سطرها اجرا نشوند، استفاده کنید، به‌طوری که برنامه فقط کدی را که شما می‌خواهید، در زمانی که می‌خواهید، اجرا کند.</p>
                            <p>مثلاً برنامه‌ای را در نظر بگیرید که از کاربر می‌پرسد که از چه اماکنی بازدید کرده است. می‌توانیم حلقه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">while</span><span class="rlm">‏</span> را در این برنامه به محض اینکه کاربر مقدار <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">break</span><span class="rlm">‏</span> را وارد کند، متوقف کنیم:</p>
                            <div class="snippet">
                                <div class="snippet-title" dir="ltr">cities.py</div>
                                <pre class="snippet" dir="ltr">prompt = "\nPlease enter the name of a city you have visited:"
prompt += "\n(Enter 'quit' when you are finished.) "

<span class="n" dir="ltr">1</span>while True:
    city = input(prompt)

    if city == 'quit':
        break
    else:
        print(f"I'd love to go to {city.title()}!")</pre>
                            </div>
                            <p>حلقه‌ای که با <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">while True</span><span class="rlm">‏</span> شروع می‌شود <span class="n" dir="ltr">1</span>، برای همیشه اجرا خواهد شد، مگر آنکه به دستورالعمل <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">break</span><span class="rlm">‏</span> برسد. حلقه در این برنامه مرتب سؤال می‌کند که کاربر از چه شهرهایی بازدید کرده است، تا آنکه کاربر کلمه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">'quit'</span><span class="rlm">‏</span> را وارد کند. وقتی که <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">'quit'</span><span class="rlm">‏</span> را وارد کرد، دستورالعمل <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">break</span><span class="rlm">‏</span> اجرا می‌شود، که سبب می‌شود که پایتون از حلقه خارج شود:</p>
                            <div class="snippet">
                                <pre class="snippet" dir="ltr">Please enter the name of a city you have visited:
(Enter 'quit' when you are finished.) <span class="bo">New York</span>
I'd love to go to New York!

<a id="p122"></a>Please enter the name of a city you have visited:
(Enter 'quit' when you are finished.) <span class="bo">San Francisco</span>
I'd love to go to San Francisco!

Please enter the name of a city you have visited:
(Enter 'quit' when you are finished.) <span class="bo">quit</span></pre>
                            </div>
                            <div class="note">
                                <h6 class="note-title">توجه</h6>
                                <p>از دستورالعمل <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">break</span><span class="rlm">‏</span> در هر یک از حلقه‌های پایتون می‌توانید استفاده کنید. مثلاً می‌توانید از <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">break</span><span class="rlm">‏</span> برای خروج از یک حلقه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">for</span><span class="rlm">‏</span> استفاده کنید که روی یک لیست یا دیکشنری چرخش می‌کند.</p>
                            </div>
                        </div>
                        <div class="sect" id="ch07lev2sec8"><a class="bkmk" name="ch07lev2sec8"></a>
                            <h4>استفاده از <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">continue</span><span class="rlm">‏</span> در حلقه</h4>
                            <p>به جای اینکه از بقیه‌ی کد صرف‌نظر کنید و حلقه را به‌طور کامل بشکنید، می‌توانید از <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">continue</span><span class="rlm">‏</span> استفاده کنید تا بر اساس نتیجه‌ی یک وارسی شرطی به ابتدای حلقه برگردید. مثلاً حلقه‌ای را در نظر بگیرید که از ۱ تا ۱۰ می‌شمارد، ولی فقط اعداد فرد را در این دامنه نمایش می‌دهد:</p>
                            <div class="snippet">
                                <div class="snippet-title" dir="ltr">counting.py</div>
                                <pre class="snippet" dir="ltr">current_number = 0
while current_number &lt; 10:
<span class="n" dir="ltr">1</span>    current_number += 1
    if current_number % 2 == 0:
        continue

    print(current_number)</pre>
                            </div>
                            <p>ابتدا به متغیر <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">current_number</span><span class="rlm">‏</span> مقدار ۰ اختصاص می‌دهیم. چون که این مقدار کوچک‌تر از ۱۰ است، پایتون وارد حلقه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">while</span><span class="rlm">‏</span> می‌شود. در داخل حلقه، در <span class="n" dir="ltr">1</span> به تعداد ۱ اضافه می‌کنیم، بنابراین، حالا مقدار <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">current_number</span><span class="rlm">‏</span> ۱ است. سپس دستورالعمل <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">if</span><span class="rlm">‏</span> باقی‌مانده‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">current_number</span><span class="rlm">‏</span> بر ۲ را چک می‌کند. اگر باقی‌مانده ۰ باشد (یعنی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">current_number</span><span class="rlm">‏</span> بر ۲ بخش‌پذیر باشد)، دستورالعمل <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">continue</span><span class="rlm">‏</span> به پایتون می‌گوید که از بقیه‌ی حلقه صرف‌نظر کند و به آغاز حلقه بازگردد. اگر عدد فعلی بر ۲ بخش‌پذیر نباشد، بقیه‌ی حلقه اجرا می‌شود و پایتون عدد فعلی را پرینت می‌کند:</p>
                            <div class="snippet">
                                <pre class="snippet" dir="ltr">1
3
5
7
9</pre>
                            </div>
                        </div>
                        <div class="sect" id="ch07lev2sec9"><a class="bkmk" name="ch07lev2sec9"></a>
                            <h4>اجتناب از حلقه‌های نامتناهی</h4>
                            <p>هر حلقه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">while</span><span class="rlm">‏</span> نیاز به راهی دارد که مانع از اجرای آن تا بی‌نهایت شود. مثلاً این حلقه‌ی شمارش باید از ۱ تا ۵ بشمارد:</p>
                            <div class="snippet">
                                <div class="snippet-title" dir="ltr">counting.py</div>
                                <pre class="snippet" dir="ltr">x = 1
while x &lt;= 5:
    print(x)
    x += 1</pre>
                            </div><a id="p123"></a>
                            <p>ولی اگر اتفاقاً سطر <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">x += 1</span><span class="rlm">‏</span> را (به‌صورت زیر) حذف کنید، حلقه برای همیشه اجرا خواهد شد:</p>
                            <div class="snippet">
                                <pre class="snippet" dir="ltr"># This loop runs forever!
x = 1
while x &lt;= 5:
    print(x)</pre>
                            </div>
                            <p>حالا مقدار <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">x</span><span class="rlm">‏</span> از <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">1</span><span class="rlm">‏</span> شروع می‌شود، ولی هرگز تغییر نمی‌کند. بنابراین، نتیجه‌ی وارسی شرطی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">x &lt;= 5</span><span class="rlm">‏</span> همیشه <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">True</span><span class="rlm">‏</span> خواهد بود، و حلقه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">while</span><span class="rlm">‏</span> برای همیشه اجرا خواهد شد، و پشت سر هم عدد ۱ را نمایش خواهد داد، به‌صورت زیر:</p>
                            <div class="snippet">
                                <pre class="snippet" dir="ltr">1
1
1
1
--<span class="it">snip</span>--</pre>
                            </div>
                            <p>هر برنامه‌نویسی ممکن است گهگاه یک حلقه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">while</span><span class="rlm">‏</span> نامتناهی را بنویسد، چرا که بعضی وقت‌ها برنامه‌ها شرط‌های پیچیده‌ای برای خروج دارند. اگر برنامه‌ی شما گرفتار یک حلقه‌ی نامتناهی شد، کلید <span class="rlm">‏</span><span class="key" dir="ltr">ctrl-C</span><span class="rlm">‏</span> را بزنید، یا اینکه پنجره‌ی ترمینال را که در حال نمایش دادن خروجی برنامه‌ی شما است، ببندید.</p>
                            <p>برای اجتناب از نوشتن حلقه‌های نامتناهی، هر حلقه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">while</span><span class="rlm">‏</span> را وارسی کنید و مطمئن شوید که در همان زمانی که مورد نظر شما است، متوقف می‌شود. اگر می‌خواهید که وقتی کاربر مقدار معینی را وارد می‌کند، برنامه توقف کند، برنامه را اجرا کنید و آن مقدار را وارد کنید. اگر برنامه متوقف نشد، برنامه را دقیق بررسی کنید ببینید با آن مقدار که باید موجب ختم حلقه شود، چگونه برخورد می‌کند. دقت کنید که لااقل یک بخش برنامه بتواند به شرط حلقه مقدار <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">False</span><span class="rlm">‏</span> بدهد یا سبب شود که برنامه به دستورالعمل <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">break</span><span class="rlm">‏</span> برسد.</p>
                            <div class="note">
                                <h6 class="note-title">توجه</h6>
                                <p>سابلایم تکست و برخی ویرایشگرهای دیگر در داخل خود یک پنجره‌ی خروجی دارند. در این‌گونه موارد، ممکن است متوقف کردن حلقه‌ی نامتناهی کار سختی باشد، و شاید مجبور شوید ویرایشگر را ببندید تا حلقه را متوقف کنید. سعی کنید اول توی پنجره‌ی خروجی کلیک کنید و سپس <span class="rlm">‏</span><span class="key" dir="ltr">ctrl-C</span><span class="rlm">‏</span> را بزنید، تا شاید بتوانید از این طریق حلقه‌ی نامتناهی را لغو کنید.</p>
                            </div>
                            <div class="sidebar">
                                <h6 class="sidebar-title">خودتان امتحان کنید</h6>
                                <p class="tiy1"><span class="tiy" id="ch07_tiy04"><span class="tiy-num">۷-۴</span>. <span class="tiy-title">چاشنی پیتزا</span>: </span> حلقه‌ای بنویسید که مرتباً از کاربر می‌خواهد که یک سری چاشنی پیتزا وارد کند، تا اینکه کاربر مقدار <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">'quit'</span><span class="rlm">‏</span> را وارد نماید. هر بار که کاربر نام یک چاشنی پیتزا را وارد می‌کند، پیامی را نمایش دهید که می‌گوید آن چاشنی را به پیتزا اضافه خواهید کرد.</p>
                                <p class="tiy1"><span class="tiy" id="ch07_tiy05"><span class="tiy-num">۷-۵</span>. <span class="tiy-title">بلیت سینما</span>: </span> قیمت بلیت یک سینما بسته به سن افراد متغیر است. برای افراد زیر ۳ سال، بلیت رایگان است؛ قیمت بلیت برای افراد بین ۳ تا ۱۲ سال، ۱۰ دلار، و برای افراد بالای ۱۲ سال، ۱۵ دلار است. حلقه‌ای بنویسید که در آن سن کاربر را می‌پرسید، و سپس قیمت بلیت سینما را به او می‌گویید.</p><a id="p124"></a>
                                <p class="tiy1"><span class="tiy" id="ch07_tiy06"><span class="tiy-num">۷-۶</span>. <span class="tiy-title">سه راه خروج:</span>: </span> نسخه‌های دیگری از <span class="ref"><a href="c18-ch07.xhtml#ch07_tiy04">تمرین <span dir="ltr">۷-۴</span></a></span> یا <span class="ref"><a href="c18-ch07.xhtml#ch07_tiy05">تمرین <span dir="ltr">۷-۵</span></a></span> را بنویسید و کارهای زیر را لااقل یک بار در آن‌ها انجام دهید:</p>
                                <ul>
                                    <li>در دستورالعمل <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">while</span><span class="rlm">‏</span> از وارسی شرطی برای خروج از حلقه استفاده کنید.</li>
                                    <li>از متغیری به نام <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">active</span><span class="rlm">‏</span> برای کنترل نحوه‌ی اجرای حلقه استفاده کنید.</li>
                                    <li>از دستورالعمل <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">break</span><span class="rlm">‏</span> برای خروج از حلقه زمانی که کاربر مقدار <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">'quit'</span><span class="rlm">‏</span> وارد می‌کند، استفاده کنید.</li>
                                </ul>
                                <p class="tiy1"><span class="tiy" id="ch07_tiy07"><span class="tiy-num">۷-۷</span>. <span class="tiy-title">بی‌نهایت</span>: </span> حلقه‌ای بنویسید که هرگز تمام نمی‌شود، و آن را اجرا کنید. (برای بستن حلقه، کلید <span class="rlm">‏</span><span class="key" dir="ltr">ctrl-C</span><span class="rlm">‏</span> را بزنید و یا پنجره‌ای را که در حال نمایش خروجی است، ببندید.)</p>
                            </div>
                        </div>
                    </div>
                    <div class="sect" id="ch07lev1sec3"><a class="bkmk" name="ch07lev1sec3"></a>
                        <h3>استفاده از حلقه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">while</span><span class="rlm">‏</span> برای لیست‌ها و دیکشنری‌ها</h3>
                        <p>تا اینجا در هر زمان فقط با یک نوع اطلاعات کار کردیم. مثلاً ورودی کاربر را گرفتیم و سپس خود آن ورودی یا پاسخی به آن را نمایش دادیم. دفعه‌ی بعد که حلقه اجرا می‌شود، یک مقدار ورودی دیگر دریافت می‌کنیم و به آن پاسخ می‌دهیم. ولی برای آنکه با تعداد زیادی از کاربران و انواع اطلاعات کار کنیم، نیاز به این داریم که در حلقه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">while</span><span class="rlm">‏</span> از لیست و دیکشنری استفاده کنیم.</p>
                        <p>حلقه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">for</span><span class="rlm">‏</span> برای تشکیل حلقه بر روی لیست مناسب است، ولی نباید لیست را در داخل حلقه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">for</span><span class="rlm">‏</span> تغییر دهید، زیرا پایتون در ردیابی آیتم‌های موجود در لیست دچار مشکل خواهد شد. اگر بخواهید در حین کار لیست را تغییر دهید، از حلقه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">while</span><span class="rlm">‏</span> استفاده کنید. استفاده از حلقه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">while</span><span class="rlm">‏</span> برای لیست‌ها و دیکشنری‌ها به شما امکان می‌دهد که مقدار زیادی ورودی را جمع‌آوری، ذخیره‌سازی، و سازمان‌دهی کنید، تا بعداً بتوانید آن‌ها را بررسی کنید و گزارش دهید.</p>
                        <div class="sect" id="ch07lev2sec10"><a class="bkmk" name="ch07lev2sec10"></a>
                            <h4>انتقال دادن آیتم‌ها از لیستی به لیست دیگر</h4>
                            <p>تصور کنید لیستی از کاربران سایت دارید که تازه ثبت‌نام کرده‌اند، ولی هنوز تأیید نشده‌اند. پس از آنکه این کاربران تأیید شدند، چگونه می‌توانیم آن‌ها را به لیست دیگری که مربوط به کاربران تأیید شده است، انتقال دهیم؟ یک راه آن است که با استفاده از یک حلقه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">while</span><span class="rlm">‏</span> کاربران را از لیست کاربران تأیید نشده بیرون آوریم و پس از تأیید شدن، آن‌ها را به لیست کاربران تأیید شده اضافه کنیم. این کد می‌تواند به‌صورت زیر باشد:</p>
                            <div class="snippet">
                                <div class="snippet-title" dir="ltr">confirmed_users.py</div>
                                <pre class="snippet" dir="ltr"># Start with users that need to be verified,
#  and an empty list to hold confirmed users.
<span class="n" dir="ltr">1</span>unconfirmed_users = ['alice', 'brian', 'candace']
confirmed_users = []

# Verify each user until there are no more unconfirmed users.
#  Move each verified user into the list of confirmed users.
<span class="n" dir="ltr">2</span>while unconfirmed_users:
<span class="n" dir="ltr">3</span>    current_user = unconfirmed_users.pop()

    print(f"Verifying user: {current_user.title()}")
<span class="n" dir="ltr">4</span>    confirmed_users.append(current_user)

<a id="p125"></a># Display all confirmed users.
print("\nThe following users have been confirmed:")
for confirmed_user in confirmed_users:
    print(confirmed_user.title())</pre>
                            </div>
                            <p>در ابتدا، در <span class="n" dir="ltr">1</span> لیستی از کاربران تأیید نشده داریم (<span class="rlm">‏</span><span class="lr" dir="ltr">Alice</span><span class="rlm">‏</span>، <span class="rlm">‏</span><span class="lr" dir="ltr">Brian</span><span class="rlm">‏</span>، و <span class="rlm">‏</span><span class="lr" dir="ltr">Candace</span><span class="rlm">‏</span>) و یک لیست خالی هم برای کاربران تأیید شده. حلقه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">while</span><span class="rlm">‏</span> در <span class="n" dir="ltr">2</span> تا زمانی که لیست <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">unconfirmed_users</span><span class="rlm">‏</span> خالی نباشد، اجرا می‌شود. در داخل این حلقه، تابع <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">pop()</span><span class="rlm">‏</span> در <span class="n" dir="ltr">3</span> کاربران تأیید نشده را یکی‌یکی از انتهای لیست <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">unconfirmed_users</span><span class="rlm">‏</span> برمی‌دارد. در اینجا چون <span class="rlm">‏</span><span class="lr" dir="ltr">Candace</span><span class="rlm">‏</span> نفر آخر لیست <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">unconfirmed_users</span><span class="rlm">‏</span> است، اولین کسی خواهد بود که نام او از لیست حذف می‌شود، و به <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">current_user</span><span class="rlm">‏</span> اختصاص داده می‌شود، و سپس به لیست <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">confirmed_users</span><span class="rlm">‏</span> در <span class="n" dir="ltr">4</span> اضافه می‌شود. نفر بعدی <span class="rlm">‏</span><span class="lr" dir="ltr">Brian</span><span class="rlm">‏</span> و بعدی <span class="rlm">‏</span><span class="lr" dir="ltr">Alice</span><span class="rlm">‏</span> است.</p>
                            <p>به‌منظور شبیه‌سازی فرایند تأیید کاربر، یک پیام تأیید را نمایش می‌دهیم، و سپس کاربر را به لیست کاربران تأیید شده اضافه می‌کنیم. هرچه لیست کاربران تأیید نشده کوچک‌تر می‌شود، لیست کاربران تأیید شده بزرگ‌تر می‌شود. وقتی که لیست کاربران تأیید نشده خالی شد، حلقه متوقف می‌شود و لیست کاربران تأیید شده نمایش داده می‌شود:</p>
                            <div class="snippet">
                                <pre class="snippet" dir="ltr">Verifying user: Candace
Verifying user: Brian
Verifying user: Alice

The following users have been confirmed:
Candace
Brian
Alice</pre>
                            </div>
                        </div>
                        <div class="sect" id="ch07lev2sec11"><a class="bkmk" name="ch07lev2sec11"></a>
                            <h4>حذف تمام موارد یک مقدار از یک لیست</h4>
                            <p>در <span class="ref"><a href="c14-ch03.xhtml">فصل ۳</a></span>، از <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">remove()</span><span class="rlm">‏</span> برای حذف کردن یک مقدار خاص از یک لیست استفاده کردیم. تابع <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">remove()</span><span class="rlm">‏</span> برای ما مناسب بود، چون مقداری که می‌خواستیم حذف کنیم، فقط یک بار در لیست آمده بود. ولی اگر بخواهید تمام موارد یک مقدار را از یک لیست حذف کنید، چه باید بکنید؟</p>
                            <p>فرض کنید لیستی از حیوانات خانگی دارید که مقدار <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">'cat'</span><span class="rlm">‏</span> در آن چند بار تکرار شده است. برای اینکه تمام موارد آن مقدار را حذف کنید، می‌توانید یک حلقه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">while</span><span class="rlm">‏</span> را اجرا کنید، تا وقتی که هیچ مقدار <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">'cat'</span><span class="rlm">‏</span> دیگری در لیست باقی نمانده باشد، به‌صورت زیر:</p>
                            <div class="snippet">
                                <div class="snippet-title" dir="ltr">pets.py</div>
                                <pre class="snippet" dir="ltr">pets = ['dog', 'cat', 'dog', 'goldfish', 'cat', 'rabbit', 'cat']
print(pets)

while 'cat' in pets:
    pets.remove('cat')

print(pets)</pre>
                            </div>
                            <p>در ابتدا لیستی داریم که حاوی چندین مورد از مقدار <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">'cat'</span><span class="rlm">‏</span> است. پس از نمایش دادن لیست، پایتون وارد حلقه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">while</span><span class="rlm">‏</span> می‌شود، زیرا مقدار <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">'cat'</span><span class="rlm">‏</span> لااقل یک بار <a id="p126"></a>در لیست یافت می‌شود. در داخل حلقه، پایتون اولین نمونه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">'cat'</span><span class="rlm">‏</span> را حذف می‌کند، به حلقه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">while</span><span class="rlm">‏</span> بازمی‌گردد، و سپس به علت اینکه باز هم مقدار <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">'cat'</span><span class="rlm">‏</span> در لیست یافت می‌شود، دوباره وارد حلقه می‌شود. برنامه تمام موارد <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">'cat'</span><span class="rlm">‏</span> را یکی‌یکی حذف می‌کند تا آنکه این مقدار دیگر در لیست نباشد، و در این زمان پایتون از حلقه خارج می‌شود و لیست را دوباره نمایش می‌دهد:</p>
                            <div class="snippet">
                                <pre class="snippet" dir="ltr">['dog', 'cat', 'dog', 'goldfish', 'cat', 'rabbit', 'cat']
['dog', 'dog', 'goldfish', 'rabbit']</pre>
                            </div>
                        </div>
                        <div class="sect" id="ch07lev2sec12"><a class="bkmk" name="ch07lev2sec12"></a>
                            <h4>پر کردن یک دیکشنری با ورودی کاربر</h4>
                            <p>در هر دور که حلقه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">while</span><span class="rlm">‏</span> اجرا می‌شود، می‌توانید هر چقدر می‌خواهید اعلان نمایش دهید و از کاربر اطلاعات بگیرید. مثلاً در اینجا می‌خواهیم یک برنامه‌ی نظرسنجی بنویسم و در آن، در هر دور از حلقه، نام و پاسخ شرکت کننده را بگیریم. داده‌هایی را که جمع‌آوری می‌کنیم، در یک دیکشنری قرار می‌دهیم، چرا که می‌خواهیم هر پاسخ به یک کاربر شرکت کننده ارتباط داده شود:</p>
                            <div class="snippet">
                                <div class="snippet-title" dir="ltr">mountain_poll.py</div>
                                <pre class="snippet" dir="ltr">responses = {}

# Set a flag to indicate that polling is active.
polling_active = True

while polling_active:
    # Prompt for the person's name and response.
<span class="n" dir="ltr">1</span>    name = input("\nWhat is your name? ")
    response = input("Which mountain would you like to climb someday? ")

    # Store the response in the dictionary.
<span class="n" dir="ltr">2</span>    responses[name] = response

    # Find out if anyone else is going to take the poll.
<span class="n" dir="ltr">3</span>    repeat = input("Would you like to let another person respond? (yes/ no) ")
    if repeat == 'no':
        polling_active = False

# Polling is complete. Show the results.
print("\n--- Poll Results ---")
<span class="n" dir="ltr">4</span>for name, response in responses.items():
    print(f"{name} would like to climb {response}.")</pre>
                            </div>
                            <p>برنامه ابتدا یک دیکشنری خالی (<span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">responses</span><span class="rlm">‏</span>) را تعریف می‌کند و یک فلگ (<span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">polling_active</span><span class="rlm">‏</span>) را مقداردهی می‌کند که نشان‌دهنده‌ی فعال بودن نظرسنجی خواهد بود. تا وقتی که مقدار <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">polling_active</span><span class="rlm">‏</span> برابر با <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">True</span><span class="rlm">‏</span> باشد، پایتون کد درون حلقه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">while</span><span class="rlm">‏</span> را اجرا خواهد کرد.</p>
                            <p>در داخل حلقه، از کاربر خواسته می‌شود که نام خود را وارد کند و نام کوهی را بنویسد که دوست دارد از آن بالا برود <span class="n" dir="ltr">1</span>. این اطلاعات در دیکشنری <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">responses</span><span class="rlm">‏</span> ذخیره می‌شود <span class="n" dir="ltr">2</span>، و از کاربر پرسیده می‌شود که آیا نظرسنجی همچنان به اجرا ادامه دهد یا خیر <span class="n" dir="ltr">3</span>. اگر <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">yes</span><span class="rlm">‏</span> وارد کند، برنامه دوباره وارد حلقه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">while</span><span class="rlm">‏</span> می‌شود. اگر <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">no</span><span class="rlm">‏</span> وارد کند، به فلگ <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">polling_active</span><span class="rlm">‏</span> مقدار <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">False</span><span class="rlm">‏</span> داده می‌شود، که سبب می‌شود که اجرای حلقه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">while</span><span class="rlm">‏</span> متوقف شود، و قطعه‌ی کد نهایی در <span class="n" dir="ltr">4</span> نتایج نظرسنجی را نشان می‌دهد.</p><a id="p127"></a>
                            <p>اگر این برنامه را اجرا کنید و پاسخ‌های نمونه‌ای را به آن بدهید، خروجی برنامه مشابه زیر خواهد بود:</p>
                            <div class="snippet">
                                <pre class="snippet" dir="ltr">What is your name? <span class="bo">Eric</span>
Which mountain would you like to climb someday? <span class="bo">Denali</span>
Would you like to let another person respond? (yes/ no) <span class="bo">yes</span>

What is your name? <span class="bo">Lynn</span>
Which mountain would you like to climb someday? <span class="bo">Devil's Thumb</span>
Would you like to let another person respond? (yes/ no) <span class="bo">no</span>

--- Poll Results ---
Lynn would like to climb Devil's Thumb.
Eric would like to climb Denali.</pre>
                            </div>
                            <div class="sidebar">
                                <h6 class="sidebar-title">خودتان امتحان کنید</h6>
                                <p class="tiy1"><span class="tiy" id="ch07_tiy08"><span class="tiy-num">۷-۸</span>. <span class="tiy-title">اغذیه‌فروشی</span>: </span> لیستی به نام <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">sandwich_orders</span><span class="rlm">‏</span> ایجاد کنید و نام انواع مختلف ساندویچ را در آن قرار دهید. سپس یک لیست خالی به نام <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">finished_sandwiches</span><span class="rlm">‏</span> بسازید. روی لیست سفارش‌های ساندویچ یک حلقه تشکیل دهید و پیامی را برای هر ساندویچ نمایش دهید، مثلاً <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">I made your tuna sandwich.</span><span class="rlm">‏</span>. پس از ساخته شدن هر ساندویچ، آن را به لیست ساندویچ‌های تکمیل شده منتقل کنید. پس از آنکه همه‌ی ساندویچ‌ها ساخته شد، پیامی نمایش دهید و نام تمام ساندویچ‌های ساخته‌شده را بنویسید.</p>
                                <p class="tiy1"><span class="tiy" id="ch07_tiy09"><span class="tiy-num">۷-۹</span>. <span class="tiy-title">بدون پاسترامی</span>: </span> با استفاده از لیست <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">sandwich_orders</span><span class="rlm">‏</span> از <span class="ref"><a href="c18-ch07.xhtml#ch07_tiy08">تمرین <span dir="ltr">۷-۸</span></a></span>، دقت کنید که ساندویچ <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">'pastrami'</span><span class="rlm">‏</span> لااقل سه بار در لیست آمده باشد. حالا کدی را به اوایل برنامه اضافه کنید که پیامی را نمایش دهد دایر بر اینکه پاسترامی اغذیه‌فروشی تمام شده است، و سپس با استفاده از یک حلقه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">while</span><span class="rlm">‏</span>، تمام موارد <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">'pastrami'</span><span class="rlm">‏</span> را از <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">sandwich_orders</span><span class="rlm">‏</span> حذف کنید. دقت کنید که در <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">finished_sandwiches</span><span class="rlm">‏</span> هیچ‌گونه ساندویچ پاسترامی وجود نداشته باشد.</p>
                                <p class="tiy1"><span class="tiy" id="ch07_tiy10"><span class="tiy-num">۷-۱۰</span>. <span class="tiy-title">تعطیلات رؤیایی</span>: </span> برنامه‌ای بنویسید که از کاربران درباره‌ی تعطیلات رؤیایی‌شان نظرسنجی می‌کند. اعلانی به‌صورت زیر بنویسید: <span class="emphasis">اگر می‌توانستید به هر جای جهان که خواستید سفر کنید، کجا می‌رفتید؟</span> در ادامه‌ی برنامه، نتایج نظرسنجی را نمایش دهید.</p>
                            </div>
                        </div>
                    </div>
                    <div class="sect" id="ch07lev1sec4"><a class="bkmk" name="ch07lev1sec4"></a>
                        <h3>خلاصه</h3>
                        <p>در این فصل، نحوه‌ی استفاده از <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">input()</span><span class="rlm">‏</span> را یاد گرفتید، تا کاربران شما بتوانند خودشان به برنامه‌ی شما اطلاعات بدهند. یاد گرفتید که با ورودی متنی و عددی کار کنید، و نیز توانستید از حلقه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">while</span><span class="rlm">‏</span> استفاده کنید تا برنامه‌ی شما تا مادام که کاربر بخواهد، در حال اجرا باشد. چندین راه را برای کنترل جریان حلقه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">while</span><span class="rlm">‏</span> یاد گرفتید، از جمله استفاده از فلگ <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">active</span><span class="rlm">‏</span>، استفاده از دستورالعمل <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">break</span><span class="rlm">‏</span>، و <a id="p128"></a>استفاده از دستورالعمل <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">continue</span><span class="rlm">‏</span>. نحوه‌ی استفاده از حلقه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">while</span><span class="rlm">‏</span> برای جابه‌جا کردن آیتم‌ها از لیستی به لیست دیگر و نیز نحوه‌ی حذف کردن تمام مواردی که مقدار از لیست را یاد گرفتید. هم‌چنین، نحوه‌ی استفاده از حلقه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction: ltr;">while</span><span class="rlm">‏</span> برای دیکشنری‌ها را فراگرفتید.</p>
                        <p>در <span class="ref"><a href="c19-ch08.xhtml">فصل ۸</a></span>، با <span class="emphasis">توابع</span> آشنا می‌شوید. تابع به شما امکان می‌دهد که برنامه‌هایتان را به بخش‌های کوچکی تقسیم کنید، که هر کدام از آن‌ها کار خاصی را انجام می‌دهد. یک تابع را می‌توانید بارها و بارها فراخوانی کنید، و می‌توانید توابع را در فایل‌های جداگانه‌ای ذخیره کنید. با استفاده از توابع، خواهید توانست کد کارآمدتری بنویسید که عیب‌یابی آن آسان‌تر است و می‌توان از آن در برنامه‌های مختلف، استفاده‌ی مجدد کرد.</p>
                    </div>
                </div>
                <div class="row pager">
                    <div class="col-md-5 text-center text-md-left pager-prev"><a href="c17-ch06.xhtml"><span><span>فصل ۶</span>: <span>دیکشنری</span></span></a></div>
                    <div class="col-md-2 text-center pager-title"><a href="c01-cover.xhtml">آغاز</a></div>
                    <div class="col-md-5 text-center text-md-right pager-next"><a href="c19-ch08.xhtml"><span><span>فصل ۸</span>: <span>تابع</span></span></a></div>
                </div>
            </main>
            <aside class="col-md-2 order-md-first">
                <ul class="nav nav-pills flex-column">
                    <li class="nav-item"><a class="nav-link" href="../">دورهٔ فشردهٔ پایتون</a></li>
                    <li class="nav-item"><a class="nav-link" href="c06-toc.xhtml">فهرست</a></li>
                </ul>
            </aside>
        </div>
    </div>
    <div class="container">
        <div id="footer" class="row">
            <div class="col-sm-6">
                <p><span>© ۱۴۰۰، قاسم کیانی مقدم.</span></p>
            </div>
            <div class="col-sm-6">
                <p class="text-right"><span><a target="_blank" rel="me" href="https://linkedin.com/in/ghasemkiani" title="لینکدین"><span class="fab fa-linkedin"></span></a></span><span> </span><span><a target="_blank" rel="me" href="https://github.com/ghasemkiani" title="گیت‌هاب"><span class="fab fa-github"></span></a></span><span> </span><span><a target="_blank" rel="me" href="https://twitter.com/ghasemkiani" title="توئیتر"><span class="fab fa-twitter"></span></a></span><span> </span><span><a target="_blank" rel="me" href="https://facebook.com/ghasemkiani" title="فیس‌بوک"><span class="fab fa-facebook"></span></a></span><span> </span><span><a target="_blank" rel="me" href="https://telegram.me/ghasemkiani" title="تلگرام"><span class="fab fa-telegram"></span></a></span><span> </span><span><a target="_blank" rel="me" href="https://instagram.com/ghasem.kiani" title="اینستاگرام"><span class="fab fa-instagram"></span></a></span><span> </span><span><a target="_blank" rel="me" href="https://mastodon.social/@ghasemkiani" title="ماستودون"><span class="fab fa-mastodon"></span></a></span></p>
            </div>
        </div>
    </div>
    <script crossorigin="anonymous" src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo"></script>
    <script crossorigin="anonymous" src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.6/umd/popper.min.js" integrity="sha384-wHAiFfRlMFy6i5SRaxvfOCifBUQy1xHdJ/yoi7FRNXMRBu5WHdZYu1hA6ZOblgut"></script>
    <script crossorigin="anonymous" src="https://cdn.rtlcss.com/bootstrap/v4.0.0/js/bootstrap.min.js" integrity="sha384-54+cucJ4QbVb99v8dcttx/0JRx4FHMmhOWi4W+xrXpKcsKQodCBwAvu3xxkZAwsH"></script>
    <script async="async" src="https://static.getclicky.com/js" data-id="undefined"></script>
</body>

</html>