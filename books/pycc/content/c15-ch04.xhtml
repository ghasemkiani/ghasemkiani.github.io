<!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml" lang="fa" dir="rtl"><head><meta charset="utf-8"/><title>کار کردن با لیست‌ها</title><meta name="description" content="وب‌سایت قاسم کیانی مقدم"/><meta name="keywords" content="قاسم کیانی مقدم, وب‌سایت, وب‌سایت قاسم کیانی مقدم, کتاب, فارسی, کتاب فارسی, ترجمه, برنامه‌نویسی, جاوا, جاوا اسکریپت, پزشکی, طب اطفال"/><meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no"/><link rel="stylesheet" crossorigin="anonymous" href="https://cdn.rtlcss.com/bootstrap/v4.0.0/css/bootstrap.min.css" integrity="sha384-P4uhUIGk/q1gaD/NdgkBIl3a6QywJjlsFJFk7SPRdruoGddvRVSwv5qFnvZ73cpz"/><link rel="stylesheet" crossorigin="anonymous" href="https://use.fontawesome.com/releases/v5.7.1/css/all.css" integrity="sha384-fnmOCqbTlWIlj8LyTjo7mOUStjsKC4pOpQbqyi7RrhN7udi9RwhKkMHpvLbHG9Sr"/><link rel="icon" href="../../../favicon.ico"/><style>@import url(https://fonts.googleapis.com/css?family=Droid+Sans);
@import url(https://fonts.googleapis.com/css?family=Droid+Serif);
@import url(https://fonts.googleapis.com/css?family=Droid+Arabic+Kufi);
@import url(https://fonts.googleapis.com/css?family=Droid+Arabic+Naskh);
html,body,input,textarea,select,option,h1,h2,h3,h4,h5,h6{font-family:Droid Arabic Naskh,Droid Serif;}
nav,.nav{font-family:Droid Arabic Kufi,Droid Sans;}
h1,h2,h3,h4,h5,h6{font-family:Droid Arabic Naskh,Droid Serif;}
#footer{margin-top:0.5rem;padding-top:0.5rem;border-top:#eeeeee solid thick;}</style><style>@import url(https://fonts.googleapis.com/css?family=Courier+Prime);
div.row.pager{margin-top:0.5em;padding:0.5em 0;border-top:solid #cccccc 2px;background-color:#dddddd;}
div.pager-prev{}
div.pager-title{}
div.pager-next{}</style><link rel="stylesheet" type="text/css" href="styles.css"/></head><body style="min-height:75rem;"><nav class="navbar navbar-expand-md navbar-dark bg-dark mb-4"><div class="container"><a class="navbar-brand" href="../../../">وب‌سایت قاسم کیانی مقدم</a><button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#divNavBarToggle" aria-controls="divNavBarToggle" aria-expanded="false" aria-label="Toggle navigation"><span class="navbar-toggler-icon"></span></button><div id="divNavBarToggle" class="collapse navbar-collapse"><ul class="navbar-nav mr-auto"><li class="nav-item active"><a class="nav-link" href="../../">کتاب‌ها<span class="sr-only"> (current)</span></a></li><li class="nav-item"><a class="nav-link" href="../../../essays/">مقالات</a></li><li class="nav-item"><a class="nav-link" href="../../../translation/">ترجمه</a></li><li class="nav-item"><a class="nav-link" href="../../../about/">درباره</a></li><li class="nav-item"><a class="nav-link" href="../../../contact/">تماس</a></li></ul></div></div></nav><div class="container"><div class="row"><main class="col-md-10 order-md-last">
					<div class="ch" id="ch04"><h2 class="ch-title"><a class="bkmk" name="ch04"></a><a class="rtoc" href="c06-toc.xhtml"><span class="ch-title-num">۴</span><br/><span class="ch-title-text">کار کردن با لیست‌ها</span></a></h2><img style="float:right;margin-left:0.5em;margin-bottom:0.25em;" alt="تصویر ابتدای فصل" src="images/ch.svg"/>
<a id="p049"></a><p class="noindent">در <span class="ref"><a href="c14-ch03.xhtml">فصل ۳</a></span>، نحوه‌ی ساختن یک لیست ساده و چگونگی کار با عناصر لیست را یاد گرفتید. در این فصل، یاد می‌گیرید که با چند سطر کد بتوانید روی تمام لیست <span class="emphasis">حلقه</span> تشکیل دهید، صرف نظر از اینکه لیست چقدر بلند باشد. از طریق حلقه می‌توانید کار یا کارهای یکسانی را برای هر کدام از آیتم‌های لیست انجام دهید. در نتیجه، خواهید توانست با لیست‌هایی هر چقدر طولانی، حتی اگر هزاران یا میلیون‌ها آیتم داشته باشند، کار کنید.</p><div class="sect" id="ch04lev1sec1"><a class="bkmk" name="ch04lev1sec1"></a><h3>تشکیل حلقه روی تمام لیست</h3>
<p class="noindent">خیلی از اوقات لازم است که روی تمام اقلام موجود در لیست حرکت کنید و کار یکسانی را برای هر کدام از آیتم‌ها انجام دهید. مثلاً در یک بازی، شاید بخواهید تمام عناصر روی صفحه را به یک میزان حرکت دهید، یا در لیستی از اعداد، بخواهید عمل آماری یکسانی را روی هر کدام از عناصر انجام دهید. یا اینکه شاید بخواهید در یک وب‌سایت، عنوان هر کدام از مقالات موجود در لیستی از مقالات را نمایش دهید. وقتی که می‌خواهید کار یکسانی را برای هر کدام از اقلام لیست انجام دهید، می‌توانید از حلقه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">for</span><span class="rlm">‏</span> پایتون استفاده کنید.</p><a id="p050"></a><p>فرض کنید لیستی از نام شعبده‌بازان داریم، و می‌خواهیم هر کدام از نام‌های موجود در لیست را نمایش دهیم. می‌توانستیم برای این کار هر کدام از نام‌ها را یکی‌یکی از لیست بگیریم، ولی این رویکرد می‌تواند مشکلات زیادی ایجاد کند. مثلاً اینکه اگر لیست طولانی باشد، این کار نیاز به تکرارهای زیاد دارد. به‌علاوه، هر بار که طول لیست تغییر می‌کند، می‌بایست کدمان را تغییر دهیم. حلقه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">for</span><span class="rlm">‏</span> چنین مشکلاتی ندارد، چرا که پایتون به‌صورت داخلی به مسائل رسیدگی می‌کند.</p><p>در اینجا از حلقه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">for</span><span class="rlm">‏</span> برای نمایش دادن هر کدام از نام‌های موجود در لیست شعبده‌بازان استفاده می‌کنیم:</p><div class="snippet"><div class="snippet-title" dir="ltr">magicians.py</div><pre class="snippet" dir="ltr"><span class="n" dir="ltr">1</span>magicians = ['alice', 'david', 'carolina']
<span class="n" dir="ltr">2</span>for magician in magicians:
<span class="n" dir="ltr">3</span>    print(magician)</pre></div><p>در ابتدا، لیستی را در <span class="n" dir="ltr">1</span> تعریف می‌کنیم، درست همان گونه که در <span class="ref"><a href="c14-ch03.xhtml">فصل ۳</a></span> عمل کردیم. در <span class="n" dir="ltr">2</span>، یک حلقه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">for</span><span class="rlm">‏</span> تعریف می‌کنیم. این سطر به پایتون می‌گوید که نامی را از لیست <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">magicians</span><span class="rlm">‏</span> انتخاب کند و آن را به متغیر <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">magician</span><span class="rlm">‏</span> اختصاص دهد. در <span class="n" dir="ltr">3</span>، به پایتون می‌گوییم که نامی را که به <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">magician</span><span class="rlm">‏</span> اختصاص داده شده است، نمایش دهد. سپس پایتون سطرهای <span class="n" dir="ltr">2</span> و <span class="n" dir="ltr">3</span> را برای هر کدام از نام‌های موجود در لیست یک بار تکرار می‌کند. برای اینکه بهتر بفهمید، می‌توانید این کد را به‌صورت زیر بخوانید: «برای هر شعبده‌باز در لیست شعبده‌بازان، نام شعبده‌باز را نمایش بده.» خروجی برنامه به‌صورت نمایش هر کدام از نام‌های موجود در لیست است:</p><div class="snippet"><pre class="snippet" dir="ltr">alice
david
carolina</pre></div><div class="sect" id="ch04lev2sec1"><a class="bkmk" name="ch04lev2sec1"></a><h4>نگاه دقیق‌تری به حلقه</h4>
<p class="noindent">مفهوم حلقه اهمیت دارد، چرا که یکی از شایع‌ترین روش‌هایی است که کامپیوتر کارهای تکراری را خودکارسازی می‌کند. مثلاً در حلقه‌ی ساده‌ای مانند آنچه در <span class="rlm">‏</span><span class="ident" dir="ltr">magicians.py</span><span class="rlm">‏</span> استفاده کردیم، پایتون ابتدا سطر اول حلقه را می‌خواند:</p><div class="snippet"><pre class="snippet" dir="ltr">for magician in magicians:</pre></div><p>این سطر به پایتون می‌گوید که نخستین مقدار را از لیست <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">magicians</span><span class="rlm">‏</span> بگیرد و آن را به متغیر <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">magician</span><span class="rlm">‏</span> بدهد. مقدار اول <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">'alice'</span><span class="rlm">‏</span> است. سپس پایتون سطر بعدی را می‌خواند:</p><div class="snippet"><pre class="snippet" dir="ltr">    print(magician)</pre></div><p>پایتون مقدار کنونی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">magician</span><span class="rlm">‏</span> را نمایش می‌دهد، که هنوز <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">'alice'</span><span class="rlm">‏</span> است. از آنجا که لیست حاوی مقادیر دیگری نیز هست، پایتون به سطر اول حلقه بازمی‌گردد:</p><div class="snippet"><pre class="snippet" dir="ltr">for magician in magicians:</pre></div><p>پایتون نام بعدی لیست، یعنی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">'david'</span><span class="rlm">‏</span>، را می‌گیرد و آن مقدار را به متغیر <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">magician</span><span class="rlm">‏</span> می‌دهد. سپس پایتون سطر زیر را اجرا می‌کند:</p><div class="snippet"><pre class="snippet" dir="ltr">    print(magician)</pre></div><a id="p051"></a><p>پایتون دوباره مقدار کنونی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">magician</span><span class="rlm">‏</span> را نمایش می‌دهد، که حالا <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">'david'</span><span class="rlm">‏</span> است. پایتون تمام حلقه را یک بار دیگر برای آخرین مقدار لیست، <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">'carolina'</span><span class="rlm">‏</span>، تکرار می‌کند. از آنجا که مقادیر دیگری در لیست نیستند، پایتون به سراغ سطر بعدی برنامه می‌رود. در این مورد، بعد از حلقه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">for</span><span class="rlm">‏</span> چیز دیگری وجود ندارد، ازاین‌رو، برنامه تمام می‌شود.</p><p>وقتی که برای نخستین بار از حلقه استفاده می‌کنید، در نظر داشته باشید که مجموعه‌ی مراحل برای هر آیتم لیست یک بار تکرار می‌شود، صرف نظر از اینکه چه تعداد آیتم در لیست وجود داشته باشند. اگر یک میلیون آیتم در لیست داشته باشید، پایتون این مراحل را یک میلیون بار تکرار می‌کند—و معمولاً این کار خیلی هم سریع انجام می‌شود.</p><p>این را هم هنگام نوشتن حلقه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">for</span><span class="rlm">‏</span> در نظر داشته باشید که برای متغیر موقتی که هر مقدار لیست به آن اختصاص داده می‌شود، هر نامی را خواستید، می‌توانید انتخاب کنید. با این حال، بد نیست که یک نام معنی‌دار انتخاب کنید که نشان‌دهنده‌ی هر کدام از آیتم‌های موجود در لیست باشد. مثلاً وقتی که لیستی از گربه‌ها، لیستی از سگ‌ها، و لیستی از آیتم‌های عمومی داشته باشید، می‌توانید حلقه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">for</span><span class="rlm">‏</span> را به‌صورت زیر شروع کنید:</p><div class="snippet"><pre class="snippet" dir="ltr">for cat in cats:
for dog in dogs:
for item in list_of_items:</pre></div><p>این قراردادهای نام‌گذاری به شما کمک می‌کند که عملی را که در داخل حلقه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">for</span><span class="rlm">‏</span> بر روی هر آیتم انجام می‌شود، بهتر بفهمید. استفاده از اسم مفرد و جمع به شما کمک می‌کند که مشخص کنید هر قسمت از کد با یکی از عناصر لیست کار می‌کند، یا با تمام لیست.</p></div><div class="sect" id="ch04lev2sec2"><a class="bkmk" name="ch04lev2sec2"></a><h4>انجام کارهای بیشتر در داخل حلقه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">for</span><span class="rlm">‏</span></h4>
<p class="noindent">تقریباً هر کاری را می‌توانید روی هر کدام از آیتم‌ها در داخل حلقه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">for</span><span class="rlm">‏</span> انجام دهید. مثلاً در ادامه‌ی مثال قبل، حالا پیامی را برای هر شعبده‌باز نمایش می‌دهیم و به او می‌گوییم که ترفند خیلی خوبی را اجرا کرده است:</p><div class="snippet"><div class="snippet-title" dir="ltr">magicians.py</div><pre class="snippet" dir="ltr"><span class="ash">magicians = ['alice', 'david', 'carolina']</span>
<span class="ash">for magician in magicians:</span>
<span class="n" dir="ltr">1</span>    print(f"{magician.title()}, that was a great trick!")</pre></div><p>تنها تفاوت این کد در <span class="n" dir="ltr">1</span> است، که در آن پیامی را برای هر شعبده‌باز تهیه می‌کنیم و در ابتدا آن نام شعبده‌باز را می‌نویسیم. اولین بار که حلقه اجرا می‌شود، مقدار شعبده‌باز <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">'alice'</span><span class="rlm">‏</span> است، بنابراین، پایتون پیام اول را با نام <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">'Alice'</span><span class="rlm">‏</span> نمایش می‌دهد. بار دوم پیام با <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">'David'</span><span class="rlm">‏</span> شروع خواهد شد، و بار سوم پیام با <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">'Carolina'</span><span class="rlm">‏</span> شروع خواهد شد.</p><p>خروجی این برنامه، پیامی سفارشی را برای هر شعبده‌باز موجود در لیست نمایش می‌دهد:</p><div class="snippet"><pre class="snippet" dir="ltr">Alice, that was a great trick!
David, that was a great trick!
Carolina, that was a great trick!</pre></div><p>هر چند سطر کد هم که خواستید، می‌توانید در داخل حلقه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">for</span><span class="rlm">‏</span> بنویسید. هر سطری که بعد از سطر <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">for magician in magicians</span><span class="rlm">‏</span> تورفتگی داشته باشد، <span class="emphasis">داخل حلقه</span> تلقی می‌شود، و هر سطر دارای تورفتگی برای هر <a id="p052"></a> مقدار موجود در لیست یک بار اجرا می‌شود. بنابراین، هر چقدر کار خواستید، می‌توانید برای هر مقدار موجود در لیست انجام دهید.</p><p>اجازه بدهید که سطر دوم را هم به پیام اضافه کنیم، و به هر شعبده‌باز بگوییم که چشم‌انتظار شعبده‌ی بعدی او هستیم:</p><div class="snippet"><pre class="snippet" dir="ltr"><span class="ash">magicians = ['alice', 'david', 'carolina']</span>
<span class="ash">for magician in magicians:</span>
    <span class="ash">print(f"{magician.title()}, that was a great trick!")</span>
<span class="n" dir="ltr">1</span>    print(f"I can't wait to see your next trick, {magician.title()}.\n")</pre></div><p>از آنجا که هر دو فراخوانی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">print()</span><span class="rlm">‏</span> تورفتگی دارد، لذا هر دو سطر برای هر شعبده‌باز موجود در لیست یک بار اجرا خواهد شد. نویسه‌ی سرسطر (<span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">"\n"</span><span class="rlm">‏</span>) در فراخوانی دوم <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">print()</span><span class="rlm">‏</span> <span class="n" dir="ltr">1</span> پس از هر دور اجرای حلقه یک سطر خالی وارد می‌کند. به این ترتیب، پیام‌ها به‌صورت مرتبی برای هر شخص موجود در لیست گروه‌بندی می‌شود:</p><div class="snippet"><pre class="snippet" dir="ltr">Alice, that was a great trick!
I can't wait to see your next trick, Alice.

David, that was a great trick!
I can't wait to see your next trick, David.

Carolina, that was a great trick!
I can't wait to see your next trick, Carolina.
</pre></div><p>می‌توانید هر تعداد سطر که خواستید، داخل حلقه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">for</span><span class="rlm">‏</span> بگذارید. در عمل، زمانی که از حلقه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">for</span><span class="rlm">‏</span> استفاده می‌شود، خیلی وقت‌ها چند کار مختلف را روی هر آیتم موجود در لیست انجام می‌دهید.</p></div><div class="sect" id="ch04lev2sec3"><a class="bkmk" name="ch04lev2sec3"></a><h4>انجام دادن کاری پس از حلقه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">for</span><span class="rlm">‏</span></h4>
<p class="noindent">وقتی اجرای حلقه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">for</span><span class="rlm">‏</span> تمام شد، چه اتفاقی می‌افتد؟ معمولاً شاید لازم باشد که یک خروجی را به‌طور خلاصه ارائه دهید و یا اینکه به سراغ کارهای دیگری بروید که برنامه‌ی شما باید انجام دهد.</p><p>بعد از حلقه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">for</span><span class="rlm">‏</span>، سطرهای کد که تورفتگی ندارند، یک بار و بدون تکرار اجرا می‌شوند. مثلاً اجازه بدهید که پیامی برای تمام گروه شعبده‌بازان بنویسیم و از آن‌ها به خاطر اجرای خوبی که داشتند، تشکر کنیم. برای نمایش این پیام گروهی پس از آنکه تمام پیام‌های فردی نمایش داده شدند، پیام تشکر را پس از حلقه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">for</span><span class="rlm">‏</span> بدون تورفتگی قرار می‌دهیم:</p><div class="snippet"><pre class="snippet" dir="ltr"><span class="ash">magicians = ['alice', 'david', 'carolina']</span>
<span class="ash">for magician in magicians:</span>
    <span class="ash">print(f"{magician.title()}, that was a great trick!")</span>
    <span class="ash">print(f"I can't wait to see your next trick, {magician.title()}.\n")</span>

<span class="n" dir="ltr">1</span>print("Thank you, everyone. That was a great magic show!")</pre></div><a id="p053"></a><p>دو فراخوانی اول <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">print()</span><span class="rlm">‏</span> برای هر شعبده‌باز موجود در لیست یک بار تکرار می‌شود، که این را قبلاً دیدیم. اما از آنجا که سطر <span class="n" dir="ltr">1</span> تورفتگی ندارد، فقط یک بار نمایش داده می‌شود:</p><div class="snippet"><pre class="snippet" dir="ltr">Alice, that was a great trick!
I can't wait to see your next trick, Alice.

David, that was a great trick!
I can't wait to see your next trick, David.

Carolina, that was a great trick!
I can't wait to see your next trick, Carolina.

Thank you, everyone. That was a great magic show!</pre></div><p>وقتی که داده‌ها را با استفاده از حلقه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">for</span><span class="rlm">‏</span> پردازش می‌کنید، خواهید دید که یک روش خوب آن است که عملی را که روی تمام مجموعه‌ی داده‌ها انجام می‌شود، خلاصه کنید. مثلاً می‌توانید از یک حلقه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">for</span><span class="rlm">‏</span> برای مقداردهی اولیه‌ی یک بازی استفاده کنید، به این صورت که روی لیست کاراکترهای بازی حلقه تشکیل دهید و کاراکترها را یکی‌یکی روی صفحه نمایش دهید. آنگاه پس از پایان حلقه و نمایش دادن هر کدام از کاراکترها، می‌توانید یک دکمه‌ی <span class="emphasis"><span class="rlm">‏</span><span class="lr" dir="ltr">Play Now</span><span class="rlm">‏</span></span> را نمایش دهید.</p></div></div><div class="sect" id="ch04lev1sec2"><a class="bkmk" name="ch04lev1sec2"></a><h3>اجتناب از خطاهای تورفتگی</h3>
<p class="noindent">پایتون برای تعیین اینکه یک سطر یا گروه سطرها چه رابطه‌ای با بقیه‌ی برنامه دارد، از تورفتگی استفاده می‌کند. در مثال‌های قبلی، سطرهایی که پیام‌هایی را برای هر کدام از شعبده‌بازان نمایش می‌دادند، جزئی از حلقه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">for</span><span class="rlm">‏</span> بودند، چرا که تورفتگی داشتند. استفاده‌ی پایتون از تورفتگی سبب می‌شود که خواندن کد خیلی آسان باشد. اساساً پایتون از فضای سفید استفاده می‌کند تا شما را مجبور کند که کد فرمت شده‌ی مرتبی بنویسید که ساختار بصری روشنی داشته باشد. در برنامه‌های بلندتر پایتون، مشاهده می‌کنید که بلوک‌های کد در چند سطح متفاوت تورفتگی دارند. این سطوح تورفتگی به شما کمک می‌کنند که روی‌هم‌رفته حسی از سازمان‌دهی کلی برنامه به دست آورید.</p><p>به تدریج که برنامه‌های بیشتری بنویسید که متکی بر تورفتگی صحیح باشند، می‌بایست مواظب چند مورد شایع <span class="emphasis">خطاهای تورفتگی</span> باشید. مثلاً اینکه بعضی وقت‌ها ممکن است افراد سطری را تورفتگی بدهند که نباید تورفتگی داشته باشد، یا یادشان برود سطرهایی را که لازم است، تورفتگی بدهند. اگر الآن مثال‌هایی از این نوع خطاها را ببینید، به شما کمک خواهد کرد که در آینده از آن‌ها اجتناب کنید، و اگر هم در برنامه‌های خودتان ایجاد شدند، بتوانید آن‌ها را اصلاح کنید.</p><p>در اینجا، برخی از موارد شایع‌تر خطاهای تورفتگی را بررسی می‌کنیم.</p><div class="sect" id="ch04lev2sec4"><a class="bkmk" name="ch04lev2sec4"></a><h4>فراموش کردن ایجاد تورفتگی</h4>
<p class="noindent">همیشه سطر بعد از دستورالعمل <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">for</span><span class="rlm">‏</span> را در حلقه تورفتگی بدهید. اگر این کار را فراموش کنید، پایتون به شما یادآوری می‌کند:</p><div class="snippet"><div class="snippet-title" dir="ltr">magicians.py</div><pre class="snippet" dir="ltr">magicians = ['alice', 'david', 'carolina']
for magician in magicians:
<span class="n" dir="ltr">1</span>print(magician)</pre></div><a id="p054"></a><p>فراخوانی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">print()</span><span class="rlm">‏</span> <span class="n" dir="ltr">1</span> باید تورفتگی داشته باشد، ولی ندارد. وقتی که پایتون انتظار یک بلوک دارای تورفتگی دارد و آن را پیدا نمی‌کند، به شما اطلاع می‌دهد که در چه سطری مشکل وجود داشته است.</p><div class="snippet"><pre class="snippet" dir="ltr">  File "magicians.py", line 3
    print(magician)
    ^
IndentationError: expected an indented block</pre></div><p>معمولاً برای برطرف کردن این نوع خطای تورفتگی، باید سطر یا سطرهایی را که بعد از دستورالعمل <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">for</span><span class="rlm">‏</span> است، تورفتگی بدهید.</p></div><div class="sect" id="ch04lev2sec5"><a class="bkmk" name="ch04lev2sec5"></a><h4>فراموش کردن ایجاد تورفتگی در سطرهای بعدی</h4>
<p class="noindent">بعضی وقت‌ها ممکن است حلقه بدون خطا اجرا شود، ولی نتیجه‌ی مورد نظر را ایجاد نکند. علت این امر ممکن است آن باشد که شما در داخل حلقه می‌خواهید چندین کار انجام بدهید، ولی یادتان رفته برخی از سطرها را تورفتگی بدهید.</p><p>مثلاً اگر یادمان برود که سطر دوم را در حلقه تورفتگی بدهیم که به هر شعبده‌باز می‌گوید که منتظر شعبده‌ی بعدی او هستیم، نتیجه به این صورت خواهد بود:</p><div class="snippet"><pre class="snippet" dir="ltr">magicians = ['alice', 'david', 'carolina']
for magician in magicians:
    print(f"{magician.title()}, that was a great trick!")
<span class="n" dir="ltr">1</span>print(f"I can't wait to see your next trick, {magician.title()}.\n")</pre></div><p>فراخوانی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">print()</span><span class="rlm">‏</span> <span class="n" dir="ltr">1</span> باید تورفتگی می‌داشت، ولی چون پایتون بعد از دستورالعمل <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">for</span><span class="rlm">‏</span> لااقل یک سطر دارای تورفتگی می‌بیند، خطایی را گزارش نمی‌کند. در نتیجه، فراخوانی اول <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">print()</span><span class="rlm">‏</span> برای هر نام موجود در لیست یک بار تکرار می‌شود، چرا که تورفتگی دارد. اما فراخوانی دوم <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">print()</span><span class="rlm">‏</span> بدون تورفتگی است، و لذا فقط یک بار پس از اتمام حلقه اجرا می‌شود. از آنجا که آخرین مقدار اختصاص داده شده به <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">magician</span><span class="rlm">‏</span>، مقدار <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">'carolina'</span><span class="rlm">‏</span> است، لذا پیام «چشم‌انتظار شعبده‌بازی بعدی شما هستم»، فقط برای این شعبده‌باز نمایش داده می‌شود.</p><div class="snippet"><pre class="snippet" dir="ltr">Alice, that was a great trick!
David, that was a great trick!
Carolina, that was a great trick!
I can't wait to see your next trick, Carolina.</pre></div><p>این یک <span class="emphasis">خطای منطقی</span> است. از نظر نحو پایتون، کد معتبر است، ولی کدی که نتیجه‌ی مطلوب را ایجاد نمی‌کند، زیرا اشکالی در منطق آن وجود دارد. اگر انتظار دارید که عمل خاصی برای هر کدام از آیتم‌های لیست یک بار تکرار شود، ولی آن عمل فقط یک بار انجام می‌شود، باید بررسی کنید که شاید یک یا چند سطر کد را اشتباهاً تورفتگی نداده باشید.</p></div><a id="p055"></a><div class="sect" id="ch04lev2sec6"><a class="bkmk" name="ch04lev2sec6"></a><h4>تورفتگی غیرضروری</h4>
<p class="noindent">اگر اتفاقاً سطری را که لازم نیست تورفتگی داشته باشد، تورفتگی بدهید، پایتون این تورفتگی غیرمنتظره را به شما اطلاع می‌دهد:</p><div class="snippet"><div class="snippet-title" dir="ltr">hello_world.py</div><pre class="snippet" dir="ltr">message = "Hello Python world!"
<span class="n" dir="ltr">1</span>    print(message)</pre></div><p>در اینجا، لازم نیست که سطر فراخوانی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">print()</span><span class="rlm">‏</span> <span class="n" dir="ltr">1</span> تورفتگی داشته باشد، زیرا جزئی از یک حلقه نیست؛ لذا پایتون آن خطا را گزارش می‌کند:</p><div class="snippet"><pre class="snippet" dir="ltr">  File "hello_world.py", line 2
    print(message)
    ^
IndentationError: unexpected indent</pre></div><p>برای اجتناب از خطای تورفتگی نابجا، می‌توانید فقط زمانی که دلیل خاصی برای تورفتگی دارید، تورفتگی ایجاد کنید. در برنامه‌هایی که تا کنون نوشته‌اید، تنها سطرهایی که باید تورفتگی بدهید، عمل‌هایی است که می‌خواهید برای هر آیتم موجود در حلقه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">for</span><span class="rlm">‏</span> تکرار کنید.</p></div><div class="sect" id="ch04lev2sec7"><a class="bkmk" name="ch04lev2sec7"></a><h4>تورفتگی غیرضروری بعد از حلقه</h4>
<p class="noindent">اگر اتفاقاً کدی را که باید پس از اتمام حلقه اجرا شود، تورفتگی بدهید، آن کد برای هر کدام از آیتم‌های موجود در حلقه یک بار تکرار خواهد شد. گاهی اوقات این سبب می‌شود که پایتون خطایی را گزارش کند، ولی خیلی از اوقات موجب خطای منطقی می‌شود.</p><p>مثلاً ببینیم اگر به‌طور اتفاقی سطری را که از تمام گروه شعبده‌بازان به خاطر اجرای خوب نمایش تشکر می‌کند، تورفتگی بدهیم، چه اتفاقی می‌افتد:</p><div class="snippet"><div class="snippet-title" dir="ltr">magicians.py</div><pre class="snippet" dir="ltr">magicians = ['alice', 'david', 'carolina']
for magician in magicians:
    print(f"{magician.title()}, that was a great trick!")
    print(f"I can't wait to see your next trick, {magician.title()}.\n")

<span class="n" dir="ltr">1</span>    print("Thank you everyone, that was a great magic show!")</pre></div><p>از آنجا که سطر <span class="n" dir="ltr">1</span> تورفتگی داده شده است، برای هر کدام از اشخاص موجود در لیست یک بار اجرا می‌شود، که نتیجه‌ی آن را در اینجا می‌بینید:</p><div class="snippet"><pre class="snippet" dir="ltr">Alice, that was a great trick!
I can't wait to see your next trick, Alice.

Thank you everyone, that was a great magic show!
David, that was a great trick!
I can't wait to see your next trick, David.

Thank you everyone, that was a great magic show!
Carolina, that was a great trick!
I can't wait to see your next trick, Carolina.

Thank you everyone, that was a great magic show!</pre></div><a id="p056"></a><p>این هم یک خطای منطقی است، مشابه موردی که در قسمت <span class="ref">«<a href="c15-ch04.xhtml#ch04lev2sec5">فراموش کردن ایجاد تورفتگی در سطرهای بعدی</a>»</span> گفته شد. از آنجا که پایتون نمی‌داند شما می‌خواهید چه کاری انجام بدهید، لذا کدی را که از نظر دستور نحوی درست نوشته شده باشد، اجرا می‌کند. اگر عملی که در واقع باید فقط یک بار انجام شود، چندین بار تکرار شود، در آن صورت احتمالاً لازم است که کد مربوط به آن عمل را از تورفتگی خارج کنید.</p></div><div class="sect" id="ch04lev2sec8"><a class="bkmk" name="ch04lev2sec8"></a><h4>فراموش کردن دونقطه</h4>
<p class="noindent">دونقطه (<span class="rlm">‏</span><span class="lr" dir="ltr">colon</span><span class="rlm">‏</span>) در انتهای دستورالعمل <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">for</span><span class="rlm">‏</span> به پایتون می‌گوید که سطر بعدی را به‌عنوان شروع یک حلقه تلقی کند.</p><div class="snippet"><pre class="snippet" dir="ltr">magicians = ['alice', 'david', 'carolina']
<span class="n" dir="ltr">1</span>for magician in magicians
    print(magician)</pre></div><p>اگر دونقطه را به‌طور اتفاقی فراموش کنید، همان طور که در <span class="n" dir="ltr">1</span> دیده می‌شود، یک خطای نحوی گزارش خواهد شد، زیرا پایتون نمی‌داند سعی دارید چه کاری انجام دهید. شاید تعجب کنید که چقدر از وقت برنامه‌نویسان صرف پیدا کردن این‌گونه خطاهای یک‌کاراکتری می‌شود. پیدا کردن این‌گونه خطاها دشوار است، زیرا ما غالباً فقط آنچه را که انتظار دیدنش را داریم، می‌بینیم.</p><div class="sidebar"><h6 class="sidebar-title">خودتان امتحان کنید</h6>
<p class="tiy1"><span class="tiy" id="ch04_tiy01"><span class="tiy-num">۴-۱</span>. <span class="tiy-title">پیتزا</span>: </span> سه نوع پیتزای مورد علاقه‌ی خود را در نظر بگیرید. نام پیتزاها را در لیستی ذخیره کنید، و سپس با استفاده از یک حلقه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">for</span><span class="rlm">‏</span>، نام هر پیتزا را نمایش دهید.</p><ul>
<li>حلقه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">for</span><span class="rlm">‏</span> را به‌گونه‌ای تغییر دهید که به جای اینکه فقط نام پیتزا را نمایش دهد، جمله‌ای را با استفاده از نام پیتزا نمایش دهد. برای هر پیتزا، باید یک سطر خروجی داشته باشید که حاوی جمله‌ی ساده‌ای است مانند <span class="emphasis"><span class="rlm">‏</span><span class="lr" dir="ltr">I like pepperoni pizza</span><span class="rlm">‏</span></span>.</li><li>یک سطر به انتهای برنامه، خارج از حلقه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">for</span><span class="rlm">‏</span>، اضافه کنید که بیان می‌کند که شما پیتزا را خیلی دوست دارید. خروجی باید شامل سه سطر یا بیشتر درباره‌ی انواع مختلف پیتزاهای مورد علاقه‌ی شما باشد، و سپس یک جمله‌ی اضافه، از قبیل <span class="emphasis"><span class="rlm">‏</span><span class="lr" dir="ltr">I really love pizza!</span><span class="rlm">‏</span></span>.</li></ul><p class="tiy1"><span class="tiy" id="ch04_tiy02"><span class="tiy-num">۴-۲</span>. <span class="tiy-title">جانوران</span>: </span> لااقل سه نوع جانور مختلف را در نظر بگیرید که دارای یک مشخصه‌ی مشترک هستند. نام این حیوانات را در یک لیست ذخیره کنید، و سپس با استفاده از یک حلقه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">for</span><span class="rlm">‏</span>، نام هر حیوان را نمایش دهید.</p><ul>
<li>برنامه را تغییر دهید تا درباره‌ی هر حیوان یک جمله بنویسد، مثلاً <span class="emphasis"><span class="rlm">‏</span><span class="lr" dir="ltr">A dog would make a great pet.</span><span class="rlm">‏</span></span>.</li><li>به آخر برنامه‌ی خود یک سطر اضافه کنید که در آن بیان شده است که این حیوانات در چه چیزی مشترک هستند. می‌توانید جمله‌ای از این قبیل بنویسید: <span class="emphasis"><span class="rlm">‏</span><span class="lr" dir="ltr">Any of these animals would make a great pet!</span><span class="rlm">‏</span></span>.</li></ul></div></div></div><a id="p057"></a><div class="sect" id="ch04lev1sec3"><a class="bkmk" name="ch04lev1sec3"></a><h3>ایجاد لیست‌های عددی</h3>
<p class="noindent">به دلایل زیادی، ممکن است بخواهید مجموعه‌ای از اعداد را ذخیره کنید. مثلاً شاید لازم باشد که موقعیت هر کاراکتر را در بازی زیر نظر داشته باشید و نمرات بالای هر بازیکن را نیز ذخیره کنید. در مصورسازی داده‌ها، تقریباً همیشه با مجموعه‌های اعداد سر و کار دارید، مانند دما، فاصله، جمعیت، و یا طول و عرض جغرافیایی و از این قبیل.</p><p>لیست برای ذخیره کردن مجموعه‌های اعداد ایده‌آل است، و پایتون ابزارهای مختلفی ارائه می‌دهد تا بتوانید به‌طور مؤثری با مجموعه‌های اعداد کار کنید. وقتی که فهمیدید که چگونه از این ابزارها به‌طور کارآمدی استفاده کنید، کد شما درست کار خواهد کرد، حتی زمانی که لیست‌های شما حاوی میلیون‌ها آیتم باشد.</p><div class="sect" id="ch04lev2sec9"><a class="bkmk" name="ch04lev2sec9"></a><h4>استفاده از تابع <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">range()</span><span class="rlm">‏</span></h4>
<p class="noindent">تابع <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">range()</span><span class="rlm">‏</span> پایتون به آسانی دنباله‌هایی از اعداد را ایجاد می‌کند. مثلاً می‌توانید به‌صورت زیر با استفاده از تابع <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">range()</span><span class="rlm">‏</span>، دنباله‌ای از اعداد را نمایش دهید:</p><div class="snippet"><div class="snippet-title" dir="ltr">first_numbers.py</div><pre class="snippet" dir="ltr">for value in range(1, 5):
    print(value)</pre></div><p>گرچه به نظر می‌رسد که این لیست باید اعداد ۱ تا ۵ را نمایش خواهد داد، ولی عدد ۵ جزو آن‌ها نیست:</p><div class="snippet"><pre class="snippet" dir="ltr">1
2
3
4</pre></div><p>در این مثال، <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">range()</span><span class="rlm">‏</span> اعداد ۱ تا ۴ را نمایش می‌دهد. این هم نتیجه‌ی همان رفتار یکی کمتر است که در زبان‌های برنامه‌نویسی زیاد دیده می‌شود. تابع <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">range()</span><span class="rlm">‏</span> در پایتون شمارش را از اولین عددی که به آن داده‌اید، شروع می‌کند، ولی وقتی که به دومین عدد داده شده رسید، توقف می‌کند. به خاطر این توقف، خروجی هرگز شامل عدد آخری نیست، که در این مورد، عدد ۵ است.</p><p>برای نمایش دادن اعداد ۱ تا ۵، باید از <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">range(1, 6)</span><span class="rlm">‏</span> استفاده کنید:</p><div class="snippet"><pre class="snippet" dir="ltr">for value in range(1, 6):
    <span class="ash">print(value)</span></pre></div><p>این بار، خروجی از ۱ شروع می‌شود و با ۵ تمام می‌شود:</p><div class="snippet"><pre class="snippet" dir="ltr">1
2
3
4
5</pre></div><a id="p058"></a><p>اگر خروجی شما هنگام استفاده از <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">range()</span><span class="rlm">‏</span> با آنچه انتظار داشتید، تفاوت دارد، شاید لازم باشد که مقدار انتهایی را یک شماره تغییر دهید.</p><p>می‌توانید فقط یک آرگومان به تابع <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">range()</span><span class="rlm">‏</span> بدهید، که در این صورت دنباله را از ۰ شروع خواهد کرد. مثلاً <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">range(6)</span><span class="rlm">‏</span> اعداد ۰ تا ۵ را نمایش می‌دهد.</p></div><div class="sect" id="ch04lev2sec10"><a class="bkmk" name="ch04lev2sec10"></a><h4>استفاده از <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">range()</span><span class="rlm">‏</span> برای ایجاد لیستی از اعداد</h4>
<p class="noindent">اگر می‌خواهید لیستی از اعداد درست کنید، می‌توانید نتیجه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">range()</span><span class="rlm">‏</span> را با استفاده از تابع <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">list()</span><span class="rlm">‏</span> مستقیماً به یک لیست تبدیل کنید. وقتی که <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">list()</span><span class="rlm">‏</span> را دور فراخوانی تابع <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">range()</span><span class="rlm">‏</span> بپیچید، خروجی آن لیستی از اعداد خواهد بود.</p><p>در مثال قسمت قبل، صرفاً دنباله‌ای از اعداد را نمایش دادیم. می‌توانیم با استفاده از <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">list()</span><span class="rlm">‏</span> همان مجموعه‌ی اعداد را به یک لیست تبدیل کنیم:</p><div class="snippet"><pre class="snippet" dir="ltr">numbers = list(range(1, 6))
print(numbers)</pre></div><p>نتیجه به این صورت است:</p><div class="snippet"><pre class="snippet" dir="ltr">[1, 2, 3, 4, 5]</pre></div><p>هم‌چنین، می‌توانیم با استفاده از <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">range()</span><span class="rlm">‏</span> به پایتون بگوییم که برخی اعداد را در یک دامنه‌ی داده شده از قلم بیندازد. اگر مقداری را به‌عنوان آرگومان سوم به <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">range()</span><span class="rlm">‏</span> بدهید، پایتون از آن مقدار به‌عنوان اندازه‌ی گام برای ایجاد کردن اعداد استفاده می‌کند:</p><p>مثلاً به‌صورت زیر می‌توان اعداد زوج بین ۱ و ۱۰ را لیست کرد:</p><div class="snippet"><div class="snippet-title" dir="ltr">even_numbers.py</div><pre class="snippet" dir="ltr">even_numbers = list(range(2, 11, 2))
print(even_numbers)</pre></div><p>در این مثال، تابع <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">range()</span><span class="rlm">‏</span> با مقدار ۲ شروع می‌کند و سپس به آن ۲ اضافه می‌کند. همین طور ۲ اضافه می‌کند تا زمانی که به مقدار نهایی یعنی ۱۱ برسد یا از آن عبور کند، و نتیجه‌ی زیر را به دست می‌دهد:</p><div class="snippet"><pre class="snippet" dir="ltr">[2, 4, 6, 8, 10]</pre></div><p>با تابع <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">range()</span><span class="rlm">‏</span> می‌توانید تقریباً هر مجموعه‌ای از اعداد را بسازید. مثلاً فرض کنید بخواهیم لیستی از اولین ۱۰ عدد مربعی داشته باشیم (یعنی مربع اعداد ۱ تا ۱۰). در پایتون، دو ستاره (<span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">**</span><span class="rlm">‏</span>) نشان‌دهنده‌ی توان است. به‌صورت زیر می‌توانید اولین ۱۰ عدد مربعی را در یک لیست قرار دهید:</p><div class="snippet"><div class="snippet-title" dir="ltr">squares.py</div><pre class="snippet" dir="ltr"><span class="n" dir="ltr">1</span>squares = []
<span class="n" dir="ltr">2</span>for value in range(1, 11):
<span class="n" dir="ltr">3</span>    square = value ** 2
<span class="n" dir="ltr">4</span>    squares.append(square)
<span class="n" dir="ltr">5</span>print(squares)</pre></div><p>ابتدا با یک لیست خالی به نام <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">squares</span><span class="rlm">‏</span> شروع می‌کنیم <span class="n" dir="ltr">1</span>. در <span class="n" dir="ltr">2</span>، با استفاده از تابع <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">range()</span><span class="rlm">‏</span> به پایتون می‌گوییم که روی هر کدام از اعداد ۱ تا ۱۰ حلقه تشکیل دهد. در داخل حلقه، <a id="p059"></a>مقدار کنونی به توان دو رسانده می‌شود و به متغیر <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">square</span><span class="rlm">‏</span> اختصاص داده می‌شود <span class="n" dir="ltr">3</span>. در <span class="n" dir="ltr">4</span>، هر مقدار جدید <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">square</span><span class="rlm">‏</span> به آخر لیست <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">squares</span><span class="rlm">‏</span> اضافه می‌شود. سرانجام، وقتی که اجرای حلقه تمام شد، لیست مربع‌ها نمایش داده می‌شود <span class="n" dir="ltr">5</span>:</p><div class="snippet"><pre class="snippet" dir="ltr">[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]</pre></div><p>برای اینکه این کد را خلاصه‌تر بنویسید، متغیر <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">square</span><span class="rlm">‏</span> را حذف کنید و هر مقدار جدید را مستقیماً به لیست اضافه کنید:</p><div class="snippet"><pre class="snippet" dir="ltr"><span class="ash">squares = []</span>
<span class="ash">for value in range(1,11):</span>
<span class="n" dir="ltr">1</span>    squares.append(value**2)

<span class="ash">print(squares)</span></pre></div><p>این کد در <span class="n" dir="ltr">1</span> همان کاری را انجام می‌دهد که سطرهای <span class="n" dir="ltr">3</span> و <span class="n" dir="ltr">4</span> در <span class="emphasis">squares.py</span> انجام می‌داد. هر مقدار موجود در لیست به توان دو رسانده می‌شود و سپس بلافاصله به آخر لیست مربع‌ها افزوده می‌شود.</p><p>برای ساختن لیست‌های پیچیده‌تر از هر کدام از این دو روش می‌توانید استفاده کنید. بعضی وقت‌ها، استفاده از متغیر موقتی سبب می‌شود که خواندن لیست شما آسان‌تر باشد؛ بعضی وقت‌ها هم بی‌دلیل آن را طولانی‌تر می‌کند. ابتدا باید تمرکز شما بر روی آن باشد که کد شما به روشنی قابل خواندن باشد، و همان کاری را که می‌خواهید انجام دهد. بعد هنگام بررسی کد، در صورت امکان از رویکردهای کارآمدتر استفاده کنید.</p></div><div class="sect" id="ch04lev2sec11"><a class="bkmk" name="ch04lev2sec11"></a><h4>کارهای آماری ساده با لیستی از اعداد</h4>
<p class="noindent">برخی از توابع پایتون برای کار کردن با لیست‌های اعداد مفید است. مثلاً به آسانی می‌توانید کمینه، بیشینه، و مجموعه لیستی از اعداد را به دست آورید:</p><div class="snippet"><pre class="snippet" dir="ltr">&gt;&gt;&gt; <span class="codestrong" dir="ltr">digits = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]</span>
&gt;&gt;&gt; <span class="codestrong" dir="ltr">min(digits)</span>
0
&gt;&gt;&gt; <span class="codestrong" dir="ltr">max(digits)</span>
9
&gt;&gt;&gt; <span class="codestrong" dir="ltr">sum(digits)</span>
45</pre></div><div class="note"><h6 class="note-title">توجه</h6>
<p class="noindent">در مثال‌های این قسمت، از لیست‌های کوتاهی از اعداد استفاده می‌کنیم که به آسانی در صفحه جا شود. ولی اگر لیست شما حاوی یک میلیون عدد یا بیشتر هم باشد، به همین صورت عمل می‌کند.</p></div></div><div class="sect" id="ch04lev2sec12"><a class="bkmk" name="ch04lev2sec12"></a><h4><span class="rlm">‏</span><span class="lr" dir="ltr">List Comprehension</span><span class="rlm">‏</span></h4>
<p class="noindent">روشی که قبلاً برای ایجاد لیست <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">squares</span><span class="rlm">‏</span> ارائه کردیم، شامل سه یا چهار سطر کد است. روش دیگری به نام <span class="rlm">‏</span><span class="lr" dir="ltr"><span class="emphasis">list comprehension</span></span><span class="rlm">‏</span> به شما امکان می‌دهد که همان لیست را فقط با یک سطر کد ایجاد کنید. در این روش، حلقه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">for</span><span class="rlm">‏</span> و ایجاد عناصر جدید در یک سطر ترکیب می‌شود، و به‌طور خودکار هر عنصر جدید به آخر لیست اضافه می‌شود. این روش شاید برای مبتدیان خیلی آسان نباشد، ولی من در اینجا آن را می‌آورم، چرا که همین که به کد افراد دیگر نگاه کنید، شاهد استفاده از این روش خواهید بود.</p><a id="p060"></a><p>مثال زیر همان لیست اعداد مربع را ایجاد می‌کند که قبلاً دیدید، ولی از روش <span class="rlm">‏</span><span class="lr" dir="ltr">list comprehension</span><span class="rlm">‏</span> استفاده می‌کند:</p><div class="snippet"><div class="snippet-title" dir="ltr">squares.py</div><pre class="snippet" dir="ltr">squares = [value**2 for value in range(1, 11)]
print(squares)</pre></div><p>برای استفاده از این دستور نحوی، ابتدا نام مناسبی برای لیست خود انتخاب کنید، مثلاً <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">squares</span><span class="rlm">‏</span>. سپس یک کروشه باز کنید و عبارت نشان‌دهنده‌ی مقادیری که می‌خواهید در لیست جدید ذخیره کنید را بنویسید. در این مثال، عبارت مورد نظر <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">value**2</span><span class="rlm">‏</span> است، که مقدار را به توان دو می‌رساند. سپس یک حلقه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">for</span><span class="rlm">‏</span> بنویسید تا اعدادی را که می‌خواهید برای آن عبارت استفاده کنید، مشخص کند، و کروشه را ببندید. حلقه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">for</span><span class="rlm">‏</span> در این مثال به‌صورت <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">for value in range(1, 11)</span><span class="rlm">‏</span> است، که اعداد ۱ تا ۱۰ را برای عبارت <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">value**2</span><span class="rlm">‏</span> استفاده می‌کند. دقت کنید که در اینجا در انتهای دستورالعمل <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">for</span><span class="rlm">‏</span> دونقطه گذاشته نمی‌شود.</p><p>نتیجه همان لیست اعداد مربع است که قبلاً دیدیم:</p><div class="snippet"><pre class="snippet" dir="ltr">[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]</pre></div><p>استفاده از روش <span class="rlm">‏</span><span class="lr" dir="ltr">list comprehension</span><span class="rlm">‏</span> نیاز به تمرین دارد، ولی وقتی که بر ایجاد لیست‌های معمولی تسلط پیدا کردید، خواهید دید که ارزش آن را دارد. وقتی که برای ایجاد هر لیست سه یا چهار سطر کد می‌نویسید و کم‌کم به این فکر می‌افتید که این کار خیلی تکراری است، می‌توانید به جای آن از <span class="rlm">‏</span><span class="lr" dir="ltr">list comprehension</span><span class="rlm">‏</span> استفاده کنید.</p><div class="sidebar"><h6 class="sidebar-title">خودتان امتحان کنید</h6>
<p class="tiy1"><span class="tiy" id="ch04_tiy03"><span class="tiy-num">۴-۳</span>. <span class="tiy-title">شمردن تا بیست</span>: </span> از یک حلقه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">for</span><span class="rlm">‏</span> برای نمایش دادن اعداد ۱ تا ۲۰، شامل خود این دو عدد، استفاده کنید.</p><p class="tiy1"><span class="tiy" id="ch04_tiy04"><span class="tiy-num">۴-۴</span>. <span class="tiy-title">یک میلیون</span>: </span> لیستی از اعداد یک تا یک میلیون ایجاد کنید، و سپس با استفاده از یک حلقه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">for</span><span class="rlm">‏</span>، اعداد را نمایش دهید. (اگر نمایش دادن خروجی خیلی طول می‌کشد، با فشار دادن کلید <span class="rlm">‏</span><span class="key" dir="ltr">ctrl-C</span><span class="rlm">‏</span> یا بستن پنجره‌ی خروجی، آن را متوقف کنید.)</p><p class="tiy1"><span class="tiy" id="ch04_tiy05"><span class="tiy-num">۴-۵</span>. <span class="tiy-title">جمع بستن یک میلیون</span>: </span> لیستی از اعداد یک تا میلیون ایجاد کنید، و سپس با استفاده از توابع <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">min()</span><span class="rlm">‏</span> و <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">max()</span><span class="rlm">‏</span> مطمئن شوید که لیست شما واقعاً از یک شروع می‌شود و به یک میلیون ختم می‌شود. هم‌چنین، با استفاده از تابع <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">sum()</span><span class="rlm">‏</span>، ببینید که پایتون با چه سرعتی می‌تواند یک میلیون عدد را جمع بزند.</p><p class="tiy1"><span class="tiy" id="ch04_tiy06"><span class="tiy-num">۴-۶</span>. <span class="tiy-title">اعداد فرد</span>: </span> از آرگومان سوم تابع <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">range()</span><span class="rlm">‏</span> برای ایجاد لیستی از اعداد فرد از ۱ تا ۲۰ استفاده کنید. با استفاده از حلقه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">for</span><span class="rlm">‏</span>، هر کدام از اعداد را نمایش دهید.</p><p class="tiy1"><span class="tiy" id="ch04_tiy07"><span class="tiy-num">۴-۷</span>. <span class="tiy-title">سه‌تا سه‌تا</span>: </span> لیستی از مضارب ۳ از ۳ تا ۳۰ ایجاد کنید.  با استفاده از حلقه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">for</span><span class="rlm">‏</span>، اعداد این لیست را نمایش دهید.</p><p class="tiy1"><span class="tiy" id="ch04_tiy08"><span class="tiy-num">۴-۸</span>. <span class="tiy-title">مکعب‌ها</span>: </span> یک عدد به توان سه را مکعب می‌نامند. مثلاً مکعب ۲ در پایتون به‌صورت <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">2**3</span><span class="rlm">‏</span> نوشته می‌شود. لیستی از ۱۰ مکعب نخست (یعنی مکعب اعداد صحیح از ۱ تا ۱۰) را ایجاد کنید، و با استفاده از حلقه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">for</span><span class="rlm">‏</span>، مقدار هر کدام از مکعب‌ها را نمایش دهید.</p><p class="tiy1"><span class="tiy" id="ch04_tiy09"><span class="tiy-num">۴-۹</span>. <span class="tiy-title"><span class="rlm">‏</span><span class="lr" dir="ltr">list comprehension</span><span class="rlm">‏</span> برای مکعب‌ها</span>: </span> با استفاده از <span class="rlm">‏</span><span class="lr" dir="ltr">list comprehension</span><span class="rlm">‏</span>، لیستی از ۱۰ مکعب نخست ایجاد کنید.</p></div></div></div><a id="p061"></a><div class="sect" id="ch04lev1sec4"><a class="bkmk" name="ch04lev1sec4"></a><h3>کار کردن با بخشی از یک لیست</h3>
<p class="noindent">در <span class="ref"><a href="c14-ch03.xhtml">فصل ۳</a></span>، نحوه‌ی دسترسی به هر کدام از عناصر لیست را یاد گرفتید، و در این فصل، درباره‌ی نحوه‌ی کار کردن روی تمام عناصر لیست بحث کردیم. کار دیگری که می‌توانیم بکنیم، این است که روی گروه خاصی از آیتم‌های لیست کار کنیم، که در پایتون به آن <span class="emphasis">slice</span> گفته می‌شود.</p><div class="sect" id="ch04lev2sec13"><a class="bkmk" name="ch04lev2sec13"></a><h4>تکه کردن لیست</h4>
<p class="noindent">برای ایجاد کردن یک تکه (<span class="rlm">‏</span><span class="lr" dir="ltr">slice</span><span class="rlm">‏</span>)، باید ایندکس اولین و آخرین عنصری را که می‌خواهید با آن کار کنید، مشخص کنید. در اینجا هم مانند تابع <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">range()</span><span class="rlm">‏</span>، پایتون یک آیتم قبل از ایندکس دومی که مشخص کرده‌اید، توقف می‌کند. برای اینکه سه عنصر اول یک لیست را در خروجی مورد استفاده قرار دهید، باید ایندکس‌های <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">0</span><span class="rlm">‏</span> تا <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">3</span><span class="rlm">‏</span> را درخواست کنید، که عنصر <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">0</span><span class="rlm">‏</span>، <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">1</span><span class="rlm">‏</span>، و <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">2</span><span class="rlm">‏</span> را به شما خواهد داد.</p><p>مثال زیر درباره‌ی لیستی از بازیکنان یک تیم است:</p><div class="snippet"><div class="snippet-title" dir="ltr">players.py</div><pre class="snippet" dir="ltr">players = ['charles', 'martina', 'michael', 'florence', 'eli']
<span class="n" dir="ltr">1</span>print(players[0:3])</pre></div><p>این کد در <span class="n" dir="ltr">1</span> تکه‌ای از لیست را پرینت می‌کند، که شامل سه بازیکن اول است. خروجی بر اساس همان ساختار لیست است و سه بازیکن اول لیست را در بر می‌گیرد:</p><div class="snippet"><pre class="snippet" dir="ltr">['charles', 'martina', 'michael']</pre></div><p>می‌توانید هر زیرمجموعه‌ای از لیست را که خواستید، ایجاد کنید. مثلاً اگر خواهان آیتم‌های دوم، سوم، و چهارم لیست باشید، باید اسلایس را از ایندکس <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">1</span><span class="rlm">‏</span> شروع کنید و در ایندکس <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">4</span><span class="rlm">‏</span> تمام کنید:</p><div class="snippet"><pre class="snippet" dir="ltr"><span class="ash">players = ['charles', 'martina', 'michael', 'florence', 'eli']</span>
print(players[1:4])</pre></div><p>این بار اسلایس با <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">'martina'</span><span class="rlm">‏</span> شروع می‌شود و با <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">'florence'</span><span class="rlm">‏</span> خاتمه می‌یابد:</p><div class="snippet"><pre class="snippet" dir="ltr">['martina', 'michael', 'florence']</pre></div><p>اگر ایندکس اول اسلایس را حذف کنید، پایتون به‌طور خودکار تکه را از اول لیست شروع می‌کند:</p><div class="snippet"><pre class="snippet" dir="ltr"><span class="ash">players = ['charles', 'martina', 'michael', 'florence', 'eli']</span>
print(players[:4])</pre></div><p>بدون ایندکس شروع، پایتون از اول لیست شروع می‌کند:</p><div class="snippet"><pre class="snippet" dir="ltr">['charles', 'martina', 'michael', 'florence']</pre></div><a id="p062"></a><p>اگر بخواهید که تکه‌ی شما شامل آخر لیست باشد، می‌توانید از دستور نحوی مشابهی استفاده کنید. مثلاً اگر می‌خواهید تمام آیتم‌ها از آیتم سوم تا آیتم آخر لیست را انتخاب کنید، می‌توانید از ایندکس <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">2</span><span class="rlm">‏</span> شروع کنید، و ایندکس دوم را حذف کنید:</p><div class="snippet"><pre class="snippet" dir="ltr"><span class="ash">players = ['charles', 'martina', 'michael', 'florence', 'eli']</span>
print(players[2:])</pre></div><p>پایتون تمام آیتم‌ها را از آیتم سوم تا آخر لیست برمی‌گرداند:</p><div class="snippet"><pre class="snippet" dir="ltr">['michael', 'florence', 'eli']</pre></div><p>این دستور نحوی به شما امکان می‌دهد که صرف‌نظر از انداز‌ه‌ی لیست، تمام عناصر را از هر نقطه از لیست تا آخر آن نمایش دهید. اگر یادتان باشد، ایندکس منفی به معنای عنصری با فاصله‌ی مشخص از آخر لیست است؛ بنابراین، می‌توانید تکه‌ای از لیست را از آخر آن نمایش دهید. مثلاً اگر بخواهیم سه بازیکن آخر لیست را نمایش دهیم، می‌توانیم از اسلایس <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">players[-3:]</span><span class="rlm">‏</span> استفاده کنیم:</p><div class="snippet"><pre class="snippet" dir="ltr"><span class="ash">players = ['charles', 'martina', 'michael', 'florence', 'eli']</span>
print(players[-3:])</pre></div><p>این نام سه بازیکن آخر را نمایش می‌دهد، و حتی اگر اندازه‌ی لیست بازیکنان تغییر کند، باز هم درست کار می‌کند.</p><div class="note"><h6 class="note-title">توجه</h6>
<p class="noindent">می‌توانید مقدار سومی را هم در داخل کروشه برای اسلایس بنویسید. اگر مقدار سوم داده شود، به معنای آن است که آیتم‌ها را در آن دامنه چندتا چندتا وسط بدهد.</p></div></div><div class="sect" id="ch04lev2sec14"><a class="bkmk" name="ch04lev2sec14"></a><h4>حلقه زدن روی یک اسلایس</h4>
<p class="noindent">می‌توانید از یک اسلایس در حلقه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">for</span><span class="rlm">‏</span> استفاده کنید، تا روی زیرمجموعه‌ی از عناصر لیست حلقه بزنید. در مثال بعد، روی سه بازیکن اول لیست حلقه می‌زنیم، و نام آن‌ها را به‌عنوان بخشی از فهرست ساده‌ای از بازیکنان نمایش می‌دهیم:</p><div class="snippet"><pre class="snippet" dir="ltr">players = ['charles', 'martina', 'michael', 'florence', 'eli']

print("Here are the first three players on my team:")
<span class="n" dir="ltr">1</span>for player in players[:3]:
    print(player.title())</pre></div><p>به جای تشکیل حلقه روی تمام لیست بازیکنان در <span class="n" dir="ltr">1</span>، پایتون فقط روی سه نام اول حلقه تشکیل می‌دهد:</p><div class="snippet"><pre class="snippet" dir="ltr">Here are the first three players on my team:
Charles
Martina
Michael</pre></div><p>اسلایس برای برخی از موقعیت‌ها بسیار مفید است. مثلاً وقتی که می‌خواهید یک بازی درست کنید، می‌توانید هر زمان که بازی <a id="p063"></a>بازیکن تمام شد، نمره‌ی نهایی بازیکن را به یک لیست اضافه کنید. سپس می‌توانید برای به دست آوردن سه نمره‌ی برتر بازیکن، لیست را به ترتیب نزولی مرتب کنید و تکه‌ای را که فقط شامل سه نمره‌ی اول است، در نظر بگیرید. وقتی که با داده‌ها کار می‌کنید، می‌توانید با استفاده از اسلایس، هر بار قطعه‌ای با یک اندازه‌ی مشخص از داده‌ها را در نظر بگیرید. یا وقتی که مشغول ساختن یک اپلیکیشن وب هستید، می‌توانید اطلاعات را در چند صفحه نمایش دهید و در هر صفحه مقدار معینی از اطلاعات را جای بدهید.</p></div><div class="sect" id="ch04lev2sec15"><a class="bkmk" name="ch04lev2sec15"></a><h4>کپی کردن یک لیست</h4>
<p class="noindent">خیلی وقت‌ها، شاید بخواهید از یک لیست موجود شروع کنید و بر اساس آن یک لیست کاملاً جدید بسازید. در اینجا خواهیم دید کپی کردن لیست به چه صورت است و یک موقعیت را که کپی کردن لیست در آن مفید است، بررسی می‌کنیم.</p><p>برای کپی کردن یک لیست، می‌توانید برشی از تهیه کنید که شامل تمام لیست اصلی باشد، به این صورت که هم ایندکس اول و هم ایندکس دوم را حذف می‌کنید (<span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">[:]</span><span class="rlm">‏</span>). این به پایتون می‌گوید که برشی تهیه کند که از اولین آیتم شروع می‌شود و به آخرین آیتم ختم می‌شود، به‌طوری که یک کپی از تمام لیست ایجاد می‌شود.</p><p>به‌عنوان مثال، تصور کنید که لیستی از غذاهای مورد علاقه‌ی خودمان را داریم و می‌خواهیم لیست دیگری از غذاها که مورد علاقه‌ی یکی از دوستانمان است، تهیه کنیم. این دوست ما تمام چیزهایی را که تا اینجا در لیست ما هست، دوست دارد، ازاین‌رو، لیست او را با کپی کردن لیست خودمان ایجاد می‌کنیم:</p><div class="snippet"><div class="snippet-title" dir="ltr">foods.py</div><pre class="snippet" dir="ltr"><span class="n" dir="ltr">1</span>my_foods = ['pizza', 'falafel', 'carrot cake']
<span class="n" dir="ltr">2</span>friend_foods = my_foods[:]

print("My favorite foods are:")
print(my_foods)

print("\nMy friend's favorite foods are:")
print(friend_foods)</pre></div><p>در <span class="n" dir="ltr">1</span>، لیستی از غذاهای مورد علاقه‌ی خودمان را با نام <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">my_foods</span><span class="rlm">‏</span> ایجاد می‌کنیم. در <span class="n" dir="ltr">2</span>، لیست جدیدی به نام <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">friend_foods</span><span class="rlm">‏</span> ایجاد می‌کنیم. یک کپی از <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">my_foods</span><span class="rlm">‏</span> تهیه می‌کنیم، یعنی برشی از <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">my_foods</span><span class="rlm">‏</span> ایجاد می‌کنیم، بدون اینکه هیچ‌کدام از ایندکس‌ها را مشخص کنیم، و آن کپی را در <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">friend_foods</span><span class="rlm">‏</span> ذخیره می‌کنیم. وقتی که هر کدام از این لیست‌ها را نمایش دهیم، می‌بینیم که هر دو حاوی غذاهای یکسانی هستند.</p><div class="snippet"><pre class="snippet" dir="ltr">My favorite foods are:
['pizza', 'falafel', 'carrot cake']

My friend's favorite foods are:
['pizza', 'falafel', 'carrot cake']</pre></div><p>برای اینکه معلوم شود که واقعاً دو لیست جداگانه داریم، غذای جدیدی را به هر لیست اضافه می‌کنیم و نشان می‌دهیم که هر لیست واقعاً حاوی غذاهای مورد علاقه‌ی شخص مورد نظر است:</p><a id="p064"></a><div class="snippet"><pre class="snippet" dir="ltr"><span class="ash">my_foods = ['pizza', 'falafel', 'carrot cake']</span>
<span class="n" dir="ltr">1</span><span class="ash">friend_foods = my_foods[:]</span>

<span class="n" dir="ltr">2</span>my_foods.append('cannoli')
<span class="n" dir="ltr">3</span>friend_foods.append('ice cream')

<span class="ash">print("My favorite foods are:")</span>
<span class="ash">print(my_foods)</span>

<span class="ash">print("\nMy friend's favorite foods are:")</span>
<span class="ash">print(friend_foods)</span></pre></div><p>در <span class="n" dir="ltr">1</span>، آیتم‌های اولیه‌ی موجود در <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">my_foods</span><span class="rlm">‏</span> را به لیست جدید <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">friend_foods</span><span class="rlm">‏</span> کپی می‌کنیم، همان طور که در مثال قبل عمل کردیم. بعد، غذاهای جدیدی را به هر لیست اضافه می‌کنیم. در <span class="n" dir="ltr">2</span>، آیتم <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">'cannoli'</span><span class="rlm">‏</span> را به لیست <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">my_foods</span><span class="rlm">‏</span> اضافه می‌کنیم، و در <span class="n" dir="ltr">3</span>، آیتم <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">'ice cream'</span><span class="rlm">‏</span> را به لیست <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">friend_foods</span><span class="rlm">‏</span> اضافه می‌کنیم. سپس دو لیست را نمایش می‌دهیم تا مطمئن شویم که هر لیست غذاهای مربوطه را دارد.</p><div class="snippet"><pre class="snippet" dir="ltr">My favorite foods are:
<span class="n" dir="ltr">4</span>['pizza', 'falafel', 'carrot cake', 'cannoli']

My friend's favorite foods are:
<span class="n" dir="ltr">5</span>['pizza', 'falafel', 'carrot cake', 'ice cream']</pre></div><p>خروجی <span class="n" dir="ltr">4</span> نشان می‌دهد که غذای <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">'cannoli'</span><span class="rlm">‏</span> حالا در لیست غذاهای محبوب ما است، ولی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">'ice cream'</span><span class="rlm">‏</span> در آن نیست. در <span class="n" dir="ltr">5</span>، می‌بینیم که <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">'ice cream'</span><span class="rlm">‏</span> در لیست غذاهای دوستمان هست، ولی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">'cannoli'</span><span class="rlm">‏</span> نیست. اگر صرفاً <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">friend_foods</span><span class="rlm">‏</span> را برابر با <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">my_foods</span><span class="rlm">‏</span> قرار می‌دادیم، دو لیست جداگانه حاصل نمی‌شد. مثلاً اگر بدون استفاده از اسلایس، بخواهید لیستی را کپی کنید، چنین اتفاقی می‌افتد:</p><div class="snippet"><pre class="snippet" dir="ltr"><span class="ash">my_foods = ['pizza', 'falafel', 'carrot cake']</span>

# This doesn't work:
<span class="n" dir="ltr">1</span>friend_foods = my_foods

<span class="ash">my_foods.append('cannoli')</span>
<span class="ash">friend_foods.append('ice cream')</span>

<span class="ash">print("My favorite foods are:")</span>
<span class="ash">print(my_foods)</span>

<span class="ash">print("\nMy friend's favorite foods are:")</span>
<span class="ash">print(friend_foods)</span></pre></div><p>به جای ذخیره کردن یک کپی از <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">my_foods</span><span class="rlm">‏</span> در متغیر <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">friend_foods</span><span class="rlm">‏</span> در سطر <span class="n" dir="ltr">1</span>، متغیر <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">friend_foods</span><span class="rlm">‏</span> را مساوی با <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">my_foods</span><span class="rlm">‏</span> قرار می‌دهیم. در واقع، با این نحوه‌ی نوشتن، به پایتون می‌گوییم که به متغیر <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">friend_foods</span><span class="rlm">‏</span>، همان لیستی را که قبلاً به <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">my_foods</span><span class="rlm">‏</span> اختصاص داده شده است، اختصاص دهد، به‌طوری که حالا هر دو متغیر به لیست یکسانی اشاره می‌کنند. در نتیجه، وقتی که <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">'cannoli'</span><span class="rlm">‏</span> را به <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">my_foods</span><span class="rlm">‏</span> اضافه می‌کنیم، در <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">friend_foods</span><span class="rlm">‏</span> نیز ظاهر خواهد شد. به همین ترتیب، <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">'ice cream'</span><span class="rlm">‏</span> نیز در هر دو لیست خواهد بود، ولو آنکه ظاهراً آن را فقط به <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">friend_foods</span><span class="rlm">‏</span> اضافه کرده‌ایم.</p><p>خروجی نشان می‌دهد که هر دو لیست حالا یکسان هستند، که آن چیزی نیست که ما می‌خواستیم:</p><a id="p065"></a><div class="snippet"><pre class="snippet" dir="ltr">My favorite foods are:
['pizza', 'falafel', 'carrot cake', 'cannoli', 'ice cream']

My friend's favorite foods are:
['pizza', 'falafel', 'carrot cake', 'cannoli', 'ice cream']</pre></div><div class="note"><h6 class="note-title">توجه</h6>
<p class="noindent">فعلاً نگران جزئیات این مثال نباشید. اساساً اگر قصد شما این باشد که بر روی یک کپی از یک لیست کار کنید و رفتاری غیرمنتظره را مشاهده کنید، دقت کنید که حتماً لیست را با استفاده از برش کپی کرده باشید، کاری که ما در مثال اول کردیم.</p></div><div class="sidebar"><h6 class="sidebar-title">خودتان امتحان کنید</h6>
<p class="tiy1"><span class="tiy" id="ch04_tiy10"><span class="tiy-num">۴-۱۰</span>. <span class="tiy-title">برش‌ها</span>: </span> با استفاده از یکی از برنامه‌هایی که در این فصل نوشتید، چند سطر به آخر برنامه اضافه کنید تا کارهای زیر را انجام دهد:</p><ul>
<li>پیام <span class="emphasis"><span class="rlm">‏</span><span class="lr" dir="ltr">The first three items in the list are:</span><span class="rlm">‏</span></span> را نمایش دهید. سپس با استفاده از برش، سه آیتم اول لیست برنامه را نمایش دهید.</li><li>پیام <span class="emphasis"><span class="rlm">‏</span><span class="lr" dir="ltr">Three items from the middle of the list are:</span><span class="rlm">‏</span></span> را نمایش دهید. سپس با استفاده از برش، سه آیتم وسط لیست را نمایش دهید.</li><li>پیام <span class="emphasis"><span class="rlm">‏</span><span class="lr" dir="ltr">The last three items in the list are:</span><span class="rlm">‏</span></span> را نمایش دهید. سپس با استفاده از برش، سه آیتم آخر لیست را نمایش دهید.</li></ul><p class="tiy1"><span class="tiy" id="ch04_tiy11"><span class="tiy-num">۴-۱۱</span>. <span class="tiy-title">پیتزاهای من، پیتزاهای شما</span>: </span> ابتدا با برنامه‌ای که در <span class="ref"><a href="c15-ch04.xhtml#ch04_tiy01">تمرین <span dir="ltr">۴-۱</span></a></span> نوشتید، شروع کنید. یک کپی از لیست پیتزاها تهیه کنید، و نام آن را <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">friend_pizzas</span><span class="rlm">‏</span> بگذارید. سپس کارهای زیر را انجام دهید:</p><ul>
<li>یک پیتزای جدید به لیست اولیه اضافه کنید.</li><li>پیتزای دیگری را به لیست <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">friend_pizzas</span><span class="rlm">‏</span> اضافه کنید.</li><li>نشان دهید که دو لیست جداگانه دارید. پیام <span class="emphasis"><span class="rlm">‏</span><span class="lr" dir="ltr">My favorite pizzas are:</span><span class="rlm">‏</span></span> را نمایش دهید، و سپس با استفاده از یک حلقه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">for</span><span class="rlm">‏</span>، لیست اول را نمایش دهید. بعد پیام <span class="emphasis"><span class="rlm">‏</span><span class="lr" dir="ltr">My friend’s favorite pizzas are:</span><span class="rlm">‏</span></span> را نمایش دهید و لیست دوم را با حلقه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">for</span><span class="rlm">‏</span> نمایش دهید. دقت کنید که هر پیتزای جدید در لیست صحیح ذخیره شده باشد.</li></ul><p class="tiy1"><span class="tiy" id="ch04_tiy12"><span class="tiy-num">۴-۱۲</span>. <span class="tiy-title">حلقه‌های بیشتر</span>: </span> در تمام ورژن‌های <span class="emphasis">foods.py</span> در این قسمت برای اینکه جای کمتری گرفته شود، برای نمایش دادن از حلقه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">for</span><span class="rlm">‏</span> استفاده نشده است. یکی از نمونه‌های <span class="emphasis">foods.py</span> را انتخاب کنید و دو حلقه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">for</span><span class="rlm">‏</span> برای نمایش دادن هر کدام از لیست‌های غذا بنویسید.</p></div></div></div><div class="sect" id="ch04lev1sec5"><a class="bkmk" name="ch04lev1sec5"></a><h3>چندتایی‌ها</h3>
<p class="noindent">لیست برای ذخیره کردن مجموعه‌ای از آیتم‌ها که ممکن است در طول برنامه تغییر کنند، خوب عمل می‌کند. مثلاً وقتی که با لیست کاربران وب‌سایت یا لیست کاراکترهای یک بازی سر و کار دارید، توانایی تغییر دادن لیست اهمیت زیادی دارد. ولی بعضی وقت‌ها شاید بخواهید لیستی بسازید که تغییر نمی‌کند. چندتایی (<span class="rlm">‏</span><span class="lr" dir="ltr">tuple</span><span class="rlm">‏</span>) امکان این کار را فراهم می‌کند. در پایتون به مقداری که نمی‌تواند تغییر کند، <span class="emphasis">تغییرناپذیر</span>(<span class="emphasis">immutable</span>) گفته می‌شود، و لیست تغییرناپذیر <span class="emphasis">توپل</span> نام دارد.</p><a id="p066"></a><div class="sect" id="ch04lev2sec16"><a class="bkmk" name="ch04lev2sec16"></a><h4>تعریف توپل</h4>
<p class="noindent">توپل در ظاهر درست مانند لیست است، جز اینکه در آن به جای کروشه از پرانتز استفاده می‌شود. وقتی که یک توپل را تعریف کردید، می‌توانید با استفاده از ایندکس هر آیتم به هر کدام از عناصر دسترسی پیدا کنید، درست به همان صورت که برای لیست عمل می‌کنید.</p><p>مثلاً اگر مستطیلی داشته باشیم که باید همیشه انداز‌ه‌ی خاصی داشته باشد، می‌توانیم برای اینکه مطمئن باشیم انداز‌ه‌ی آن تغییر نمی‌کند، ابعاد آن را داخل یک توپل قرار دهیم:</p><div class="snippet"><div class="snippet-title" dir="ltr">dimensions.py</div><pre class="snippet" dir="ltr"><span class="n" dir="ltr">1</span>dimensions = (200, 50)
<span class="n" dir="ltr">2</span>print(dimensions[0])
print(dimensions[1])</pre></div><p>توپل <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">dimensions</span><span class="rlm">‏</span> را در <span class="n" dir="ltr">1</span> تعریف کرده‌ایم، که در آن به جای کروشه از پرانتز استفاده شده است. در <span class="n" dir="ltr">2</span>، هر کدام از عناصر توپل را به‌صورت انفرادی نمایش می‌دهیم، با استفاده از همان دستور نحوی که برای دسترسی به عناصر یک لیست استفاده می‌شود:</p><div class="snippet"><pre class="snippet" dir="ltr">200
50</pre></div><p>ببینیم اگر بخواهیم یکی از آیتم‌های توپل <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">dimensions</span><span class="rlm">‏</span> را تغییر دهیم، چه اتفاقی می‌افتد:</p><div class="snippet"><pre class="snippet" dir="ltr"><span class="ash">dimensions = (200, 50)</span>
<span class="n" dir="ltr">1</span>dimensions[0] = 250</pre></div><p>این کد در <span class="n" dir="ltr">1</span> سعی می‌کند مقدار بُعد اول را تغییر دهد، ولی پایتون خطای نوع برمی‌گرداند. اساساً چون داریم تلاش می‌کنیم که یک توپل را تغییر دهیم، کاری که روی این نوع شیء قابل انجام نیست، لذا پایتون به ما می‌گوید که نمی‌توانیم مقدار جدیدی را به یکی از آیتم‌های توپل اختصاص دهیم:</p><div class="snippet"><pre class="snippet" dir="ltr">Traceback (most recent call last):
  File "dimensions.py", line 2, in &lt;module&gt;
    dimensions[0] = 250
TypeError: 'tuple' object does not support item assignment</pre></div><p>این برای ما مفید است، چرا که ما می‌خواهیم که اگر یکی از سطرهای کد سعی داشته باشد تغییری در ابعاد مستطیل ایجاد کند، یک خطا گزارش کند.</p><div class="note"><h6 class="note-title">توجه</h6>
<p class="noindent">چندتایی از نظر فنی بر اساس وجود کاما تعریف می‌شود؛ پرانتز سبب می‌شود که تمیزتر و خواندنی‌تر باشد. اگر بخواهید یک چندتایی با یک عضو تعریف کنید، باید آخر آن یک کاما بگذارید:</p><div class="snippet"><pre class="snippet" dir="ltr">    my_t = (3,)</pre></div><p>معمولاً معنی نمی‌دهد که یک چندتایی فقط با یک عضو بسازیم، ولی وقتی که چندتایی‌ها به‌طور خودکار ایجاد می‌شوند، ممکن است چنین اتفاقی بیفتد.</p></div></div><a id="p067"></a><div class="sect" id="ch04lev2sec17"><a class="bkmk" name="ch04lev2sec17"></a><h4>تشکیل حلقه روی تمام مقادیر یک چندتایی</h4>
<p class="noindent">می‌توانید با استفاده از حلقه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">for</span><span class="rlm">‏</span> روی تمام مقادیر یک چندتایی حلقه تشکیل دهید، درست همان طور که برای لیست عمل می‌کنید:</p><div class="snippet"><pre class="snippet" dir="ltr"><span class="ash">dimensions = (200, 50)</span>
for dimension in dimensions:
    print(dimension)</pre></div><p>پایتون تمام عناصر چندتایی را، درست مانند یک لیست، برمی‌گرداند:</p><div class="snippet"><pre class="snippet" dir="ltr">200
50</pre></div></div><div class="sect" id="ch04lev2sec18"><a class="bkmk" name="ch04lev2sec18"></a><h4>نوشتن روی یک چندتایی</h4>
<p class="noindent">گرچه شما نمی‌توانید یک چندتایی را تغییر دهید، ولی می‌توانید مقدار جدیدی را به متغیری که نماینده‌ی آن چندتایی است، اختصاص دهید. پس اگر می‌خواستیم یک بعد را تغییر دهیم، می‌توانستیم کل چندتایی را دوباره تعریف کنیم:</p><div class="snippet"><pre class="snippet" dir="ltr"><span class="n" dir="ltr">1</span><span class="ash">dimensions = (200, 50)</span>
print("Original dimensions:")
for dimension in dimensions:
    print(dimension)

<span class="n" dir="ltr">2</span>dimensions = (400, 100)
<span class="n" dir="ltr">3</span>print("\nModified dimensions:")
for dimension in dimensions:
    print(dimension)</pre></div><p>سطرهایی که از <span class="n" dir="ltr">1</span> شروع می‌شوند، چندتایی اولیه را تعریف می‌کنند و ابعاد ابتدایی را نمایش می‌دهند. در <span class="n" dir="ltr">2</span>، چندتایی جدیدی را به متغیر <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">dimensions</span><span class="rlm">‏</span> اختصاص می‌دهیم. سپس ابعاد جدید را در <span class="n" dir="ltr">3</span> نمایش می‌دهیم. پایتون این بار خطایی گزارش نمی‌کند، زیرا اختصاص مجدد به یک متغیر، مجاز است:</p><div class="snippet"><pre class="snippet" dir="ltr">Original dimensions:
200
50

Modified dimensions:
400
100</pre></div><p>در مقایسه با لیست‌ها، چندتایی‌ها ساختمان‌های داده‌ای ساده‌ای هستند. هر گاه می‌خواهید مجموعه‌ای از مقادیر را ذخیره کنید که در طول مدت برنامه نباید تغییر کنند، از چندتایی‌ها استفاده کنید.</p><a id="p068"></a><div class="sidebar"><h6 class="sidebar-title">خودتان امتحان کنید</h6>
<p class="tiy1"><span class="tiy" id="ch04_tiy13"><span class="tiy-num">۴-۱۳</span>. <span class="tiy-title">بوفه</span>: </span> یک رستورانِ بوفه فقط پنج غذای اساسی را ارائه می‌کند. پنج غذای ساده را پیدا کنید و نام آن‌ها را در یک چندتایی ذخیره کنید.</p><ul>
<li>با استفاده از یک حلقه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">for</span><span class="rlm">‏</span>، هر کدام از غذاهای رستوران را نمایش دهید.</li><li>سعی کنید یکی از آیتم‌ها را تغییر دهید، و ببینید که پایتون این تغییر را قبول نمی‌کند.</li><li>رستوران منوی خود را تغییر می‌دهد، و دو تا از آیتم‌های آن را با غذاهای دیگری جایگزین می‌کند. یک سطر اضافه کنید و در آن چندتایی را بازنویسی کنید. سپس با استفاده از یک حلقه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">for</span><span class="rlm">‏</span>، هر کدام از آیتم‌های منوی تغییر یافته را نمایش دهید.</li></ul></div></div></div><div class="sect" id="ch04lev1sec6"><a class="bkmk" name="ch04lev1sec6"></a><h3>سبک کدنویسی</h3>
<p class="noindent">اکنون که برنامه‌های بزرگ‌تری می‌نویسید، بد نیست درباره‌ی سبک کدنویسی هم اطلاعاتی داشته باشید. سعی کنید کدی بنویسید که حتی‌الامکان خواندن آن آسان باشد. با این کار بعداً راحت‌تر می‌توانید بفهمید که برنامه چه کاری انجام می‌دهد، و دیگران هم راحت‌تر می‌توانند کد شما را بفهمند.</p><p>برنامه‌نویسان پایتون در زمینه‌ی سبک کدنویسی بر سر برخی قراردادها توافق کرده‌اند که سبب می‌شود که ساختار کد همه‌ی برنامه‌نویسان کمابیش مشابه یکدیگر باشد. وقتی که نوشتن کد تمیز را در پایتون یاد گرفتید، خواهید توانست ساختار کلی کد پایتون دیگران را هم بفهمید، به شرطی که آن‌ها از دستورالعمل‌های یکسانی تبعیت کرده باشند. اگر قصد دارید در آینده یک برنامه‌نویس حرفه‌ای بشوید، باید از همین حالا این دستورالعمل‌ها را رعایت کنید تا برایتان تبدیل به عادت شود.</p><div class="sect" id="ch04lev2sec19"><a class="bkmk" name="ch04lev2sec19"></a><h4>راهنمای سبک کدنویسی</h4>
<p class="noindent">وقتی که کسی می‌خواهد تغییری در زبان پایتون ایجاد کند، باید یک <span class="emphasis">پیشنهاد تقویت پایتون</span> (<span class="emphasis"><span class="rlm">‏</span><span class="lr" dir="ltr">PEP</span><span class="rlm">‏</span></span>) بنویسد. یکی از قدیمی‌ترین <span class="rlm">‏</span><span class="lr" dir="ltr">PEP</span><span class="rlm">‏</span>ها، <span class="emphasis"><span class="rlm">‏</span><span class="lr" dir="ltr">PEP 8</span><span class="rlm">‏</span></span> است، که سبک کدنویسی را برای برنامه‌نویسان پایتون مشخص می‌کند. پِپِ ۸ نسبتاً حجیم است، ولی قسمت عمده‌ی آن مربوط به ساختارهای کدنویسی پیچیده‌تری است که شما هنوز با آن آشنا نشده‌اید.</p><p>راهنمای سبک پایتون بر این مبنا نگاشته شده که معمولاً خواندن کد بیشتر از نوشتن آن اتفاق می‌افتد. شما کدتان را یک بار می‌نویسید، ولی برای اشکال‌زدایی بارها آن را می‌خوانید. وقتی هم ویژگی جدیدی به یک برنامه اضافه می‌کنید، باز به دفعات بیشتری آن را می‌خوانید. و زمانی که کدتان را با برنامه‌نویسان دیگر به اشتراک می‌گذارید، آن‌ها هم کد شما را می‌خوانند.</p><p>در صورتی که بخواهید بین نوشتن کدی که نوشتن آن راحت‌تر است و کدی که خواندن آن راحت‌تر است، یکی از انتخاب کنید، برنامه‌نویسان پایتون تقریباً همیشه شما را تشویق به نوشتن کدی می‌کنند که خواندن آن آسان‌تر است. دستورالعمل‌های زیر به شما کمک می‌کنند که از همان ابتدا کد شفافی بنویسید.</p></div><a id="p069"></a><div class="sect" id="ch04lev2sec20"><a class="bkmk" name="ch04lev2sec20"></a><h4>تورفتگی</h4>
<p class="noindent"><span class="rlm">‏</span><span class="lr" dir="ltr">PEP 8</span><span class="rlm">‏</span> توصیه می‌کند که برای هر سطح تورفتگی از چهار اسپیس استفاده کنید. استفاده از چهار اسپیس موجب می‌شود که کد شما راحت‌تر قابل‌خواندن باشد، و در عین حال، جا برای سطح‌های متعدد تورفتگی در هر سطر داشته باشد.</p><p>در برنامه‌های واژه‌پرداز، خیلی وقت‌ها برای تورفتگی به جای اسپیس از تب استفاده می‌شود. این برای فایل‌های واژه‌پردازی مشکلی ایجاد نمی‌کند، ولی تفسیرگر پایتون وقتی تب و اسپیس با هم قاطی شود، سردرگم می‌شود. معمولاً برنامه‌های ویرایشگر متن این امکان را در تنظیمات خود دارند که سبب می‌شود که هر گاه از کلید <span class="rlm">‏</span><span class="key" dir="ltr">tab</span><span class="rlm">‏</span> استفاده کنید، آن را به تعداد معینی اسپیس تبدیل می‌کند. پس شما می‌توانید از همان <span class="rlm">‏</span><span class="key" dir="ltr">tab</span><span class="rlm">‏</span> استفاده کنید، ولی باید برنامه را به‌گونه‌ای تنظیم کنید که به جای آن اسپیس وارد کند.</p><p>مخلوط کردن تب و اسپیس می‌تواند مشکلاتی ایجاد کند که تشخیص آن‌ها بسیار دشوار است. اگر فکر می‌کنید که در فایل شما تب و اسپیس با هم آمیخته شده، اکثر  ویرایشگرها این امکان را به شما می‌دهد که همه‌ی تب‌ها را به اسپیس تبدیل کنید.</p></div><div class="sect" id="ch04lev2sec21"><a class="bkmk" name="ch04lev2sec21"></a><h4>طول سطر</h4>
<p class="noindent">اکثر برنامه‌نویسان پایتون توصیه می‌کنند که طول هر سطر باید کمتر از ۸۰ کاراکتر باشد. از نظر تاریخی، این دستورالعمل بدان علت ایجاد شده که اکثر کامپیوترها فقط می‌توانستند ۷۹ کاراکتر در هر سطر پنجره‌ی ترمینال خود داشته باشند. امروزه سطرهای خیلی بلندتری هم روی صفحه‌ی نمایشگر جا می‌شود، ولی دلایل دیگری هم هست که بهتر است طول سطر ۷۹ کاراکتری را رعایت کنید. برنامه‌نویسان حرفه‌ای معمولاً چندین فایل را هم‌زمان روی صفحه باز می‌کنند، و اگر طول سطر استاندارد رعایت شده باشد، می‌توانید چند فایل را کنار هم باز کنید و تمام سطر آن‌ها را ببینید. هم‌چنین، پپ ۸ توصیه می‌کند که سطرهای کامنت‌ها حداکثر ۷۲ کاراکتر باشد، چرا که بعضی از ابزارهایی که مستندات خودکار برای پروژه‌های بزرگ ایجاد می‌کنند، در آغاز هر سطر کامنت برخی کاراکترهای فرمتی اضافه می‌کنند.</p><p>دستورالعمل‌های <span class="rlm">‏</span><span class="lr" dir="ltr">PEP 8</span><span class="rlm">‏</span> در مورد طول سطر وحیِ مُنزَل نیست، و برخی تیم‌ها حد ۹۹ کاراکتر را ترجیح می‌دهند. فعلاً که در حال یادگیری هستید، زیاد نگران طول سطر در برنامه‌هایتان نباشید، ولی توجه داشته باشید که افرادی که در کدنویسی با هم همکاری می‌کنند، تقریباً همیشه دستورالعمل‌های <span class="rlm">‏</span><span class="lr" dir="ltr">PEP 8</span><span class="rlm">‏</span> را رعایت می‌کنند. اکثر ویرایشگرها یک علامت بصری، مثلاً یک خط عمودی، را نمایش می‌دهند، که حد تعیین‌شده‌ی سطر را مشخص می‌کند.</p><div class="note"><h6 class="note-title">توجه</h6>
<p class="noindent">نحوه‌ی پیکربندی ویرایشگر متنی در <span class="ref"><a href="c38-appb.xhtml">ضمیمه‌ی ب</a></span> توضیح داده شده است، به‌طوری که هر وقت کلید <span class="rlm">‏</span><span class="key" dir="ltr">tab</span><span class="rlm">‏</span> را بزنید، چهار اسپیس وارد می‌کند، و یک خط راهنمای عمودی را نمایش می‌دهد که محدوده‌ی ۷۹ کاراکتری سطر را مشخص می‌نماید.</p></div></div><div class="sect" id="ch04lev2sec22"><a class="bkmk" name="ch04lev2sec22"></a><h4>سطرهای خالی</h4>
<p class="noindent">برای اینکه بخش‌هایی از برنامه‌ی خود را به‌صورت بصری از هم جدا کنید، می‌توانید از سطر خالی استفاده کنید. استفاده از سطر خالی اشکالی ندارد، ولی در این کار افراط نکنید. می‌توانید با پیروی از مثال‌هایی که در این کتاب می‌بینید، تعادل مناسبی را برقرار کنید. مثلاً اگر پنج سطر کد داشته باشید که در آن یک لیست می‌سازید، و بعد سه سطر دیگر که در آن کاری را روی آن لیست انجام می‌دهید، مناسب است که بین این دو قسمت یک سطر خالی بگذارید. با این حال، خوب نیست که مثلاً سه یا چهار سطر خالی بین آن دو قسمت بگذارید.</p><a id="p070"></a><p>سطرهای خالی تأثیری بر روند کد شما ندارد، ولی کد را خواناتر می‌کند. تفسیرگر پایتون از تورفتگی افقی برای تفسیر معنای کد شما استفاده می‌کند، ولی فاصله‌گذاری عمودی را مورد چشم‌پوشی قرار می‌دهد.</p></div><div class="sect" id="ch04lev2sec23"><a class="bkmk" name="ch04lev2sec23"></a><h4>سایر دستورالعمل‌های سبک</h4>
<p class="noindent"><span class="rlm">‏</span><span class="lr" dir="ltr">PEP 8</span><span class="rlm">‏</span> توصیه‌های زیاد دیگری نیز برای شیوه‌ی کدنویسی دارد، ولی اکثر آن‌ها در ارتباط با برنامه‌های پیچیده‌تری است که شما فعلاً با آن سر و کار ندارید. به تدریج که ساختارهای پیچیده‌تری را در پایتون یاد می‌گیرید، بخش‌های مربوطه از دستورالعمل‌های <span class="rlm">‏</span><span class="lr" dir="ltr">PEP 8</span><span class="rlm">‏</span> را برایتان بازگو خواهم کرد.</p><div class="sidebar"><h6 class="sidebar-title">خودتان امتحان کنید</h6>
<p class="tiy1"><span class="tiy" id="ch04_tiy14"><span class="tiy-num">۴-۱۴</span>. <span class="tiy-title"><span class="rlm">‏</span><span class="lr" dir="ltr">PEP 8</span><span class="rlm">‏</span></span>: </span> به متن شیوه‌نامه‌ی <span class="rlm">‏</span><span class="lr" dir="ltr">PEP 8</span><span class="rlm">‏</span> در نشانی <span class="rlm">‏</span><a dir="ltr" target="_blank" href="https://python.org/dev/peps/pep-0008/">python.org/dev/peps/pep-0008/</a><span class="rlm">‏</span> مراجعه کنید. خیلی از این‌ها فعلاً مورد استفاده‌ی شما نخواهد بود، ولی بد نیست نگاهی به آن بیندازید.</p><p class="tiy1"><span class="tiy" id="ch04_tiy15"><span class="tiy-num">۴-۱۵</span>. <span class="tiy-title">مرور کد</span>: </span> سه تا از برنامه‌هایی را که در این فصل نوشته‌اید، انتخاب کنید، و یکی از آن‌ها را تغییر دهید تا منطبق با <span class="rlm">‏</span><span class="lr" dir="ltr">PEP 8</span><span class="rlm">‏</span> باشد.</p><ul>
<li>برای هر سطح تورفتگی از چهار اسپیس استفاده کنید. اگر هنوز این کار را نکرده‌اید، ویرایشگر متنی خود را طوری تنظیم کنید که هر گاه کلید <span class="rlm">‏</span><span class="key" dir="ltr">tab</span><span class="rlm">‏</span> را می‌زنید، چهار اسپیس وارد کند (برای دستورالعمل انجام این کار به <span class="ref"><a href="c38-appb.xhtml">ضمیمه‌ی ب</a></span> مراجعه کنید).</li><li>در هر سطر کمتر از ۸۰ نویسه قرار دهید، و ویرایشگر متنی خود را طوری تنظیم کنید که یک خط عمودی در موقعیت ۸۰ کاراکتر نمایش دهد.</li><li>در فایل‌های برنامه‌ی خود از تعداد بیش از حد سطرهای خالی استفاده نکنید.</li></ul></div></div></div><div class="sect" id="ch04lev1sec7"><a class="bkmk" name="ch04lev1sec7"></a><h3>خلاصه</h3>
<p class="noindent">در این فصل، یاد گرفتید که به‌صورت مؤثری با عناصر موجود در یک لیست کار کنید. نحوه‌ی کار با اعضای لیست را با استفاده از حلقه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">for</span><span class="rlm">‏</span> فراگرفتید، و متوجه شدید که پایتون از تورفتگی برای تعیین ساختار برنامه استفاده می‌کند، و فهمیدید که چگونه می‌توان از خطاهای شایع تورفتگی اجتناب کرد. نحوه‌ی ساختن لیست‌های عددی ساده را یاد گرفتید و با برخی از عمل‌هایی که می‌توانید روی لیست‌های عددی انجام دهید، آشنا شدید. یاد گرفتید چگونه برشی از لیست تهیه کنید تا بتوانید با زیرمجموعه‌ای از آیتم‌های آن کار کنید، و کپی کردن صحیح لیست با استفاده از اسلایس را فراگرفتید. با چندتایی‌ها هم آشنا شدید که امکان ذخیره کردن مجموعه‌ای از مقادیر را که نباید تغییر کنند، فراهم می‌کند، و یاد گرفتید که شیوه‌ی نوشتن کد شما که مرتب پیچیده‌تر می‌شود، باید به‌گونه‌ای باشد که خواندن آن آسان باشد.</p><p>در <span class="ref"><a href="c16-ch05.xhtml">فصل ۵</a></span>، یاد خواهید گرفت که با استفاده از دستورالعمل <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">if</span><span class="rlm">‏</span>، به شرط‌های مختلف به گونه‌ی مناسبی پاسخ دهید. یاد خواهید گرفت که مجموعه‌ی نسبتاً پیچیده‌ای از شرط‌ها را چگونه به هم ببندید تا کد شما دقیقاً به همان موقعیت یا اطلاعاتی که شما در پی آن هستید، پاسخ مناسب بدهد. هم‌چنین، فراخواهید گرفت که از دستورالعمل <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">if</span><span class="rlm">‏</span> در داخل حلقه استفاده کنید تا روی عناصر خاصی از لیست، کار مخصوصی انجام دهد.</p></div></div>
				<div class="row pager"><div class="col-md-5 text-center text-md-left pager-prev"><a href="c14-ch03.xhtml"><span xmlns="http://www.w3.org/1999/xhtml"><span>فصل ۳</span>: <span>آشنایی با لیست‌ها</span></span></a></div><div class="col-md-2 text-center pager-title"><a href="c01-cover.xhtml">آغاز</a></div><div class="col-md-5 text-center text-md-right pager-next"><a href="c16-ch05.xhtml"><span xmlns="http://www.w3.org/1999/xhtml"><span>فصل ۵</span>: <span>دستورالعمل <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">if</span><span class="rlm">‏</span></span></span></a></div></div></main><aside class="col-md-2 order-md-first"><ul class="nav nav-pills flex-column"><li class="nav-item"><a class="nav-link" href="../">دوره‌ی فشرده‌ی پایتون</a></li><li class="nav-item"><a class="nav-link" href="c06-toc.xhtml">فهرست</a></li></ul></aside></div></div><div class="container"><div id="footer" class="row"><div class="col-sm-6"><p><span>© ۱۴۰۰، قاسم کیانی مقدم.</span></p></div><div class="col-sm-6"><p class="text-right"><span><a target="_blank" rel="me" href="https://linkedin.com/in/ghasemkiani" title="لینکدین"><span class="fab fa-linkedin"></span></a></span><span> </span><span><a target="_blank" rel="me" href="https://github.com/ghasemkiani" title="گیت‌هاب"><span class="fab fa-github"></span></a></span><span> </span><span><a target="_blank" rel="me" href="https://twitter.com/ghasemkiani" title="توئیتر"><span class="fab fa-twitter"></span></a></span><span> </span><span><a target="_blank" rel="me" href="https://facebook.com/ghasemkiani" title="فیس‌بوک"><span class="fab fa-facebook"></span></a></span><span> </span><span><a target="_blank" rel="me" href="https://telegram.me/ghasemkiani" title="تلگرام"><span class="fab fa-telegram"></span></a></span><span> </span><span><a target="_blank" rel="me" href="https://instagram.com/ghasem.kiani" title="اینستاگرام"><span class="fab fa-instagram"></span></a></span><span> </span><span><a target="_blank" rel="me" href="https://mastodon.social/@ghasemkiani" title="ماستودون"><span class="fab fa-mastodon"></span></a></span></p></div></div></div><script crossorigin="anonymous" src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo"></script><script crossorigin="anonymous" src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.6/umd/popper.min.js" integrity="sha384-wHAiFfRlMFy6i5SRaxvfOCifBUQy1xHdJ/yoi7FRNXMRBu5WHdZYu1hA6ZOblgut"></script><script crossorigin="anonymous" src="https://cdn.rtlcss.com/bootstrap/v4.0.0/js/bootstrap.min.js" integrity="sha384-54+cucJ4QbVb99v8dcttx/0JRx4FHMmhOWi4W+xrXpKcsKQodCBwAvu3xxkZAwsH"></script><script src="https://www.googletagmanager.com/gtag/js?id=undefined"></script><script src="data:application/javascript;charset=UTF-8;base64,KCh7aWR9KSA9PiB7Cgl3aW5kb3cuZGF0YUxheWVyID0gd2luZG93LmRhdGFMYXllciB8fCBbXTsKCWZ1bmN0aW9uIGd0YWcoKXtkYXRhTGF5ZXIucHVzaChhcmd1bWVudHMpO30KCWd0YWcoImpzIiwgbmV3IERhdGUoKSk7CgoJZ3RhZygiY29uZmlnIiwgaWQpOwp9KSh7fSk7Cg=="></script></body></html>