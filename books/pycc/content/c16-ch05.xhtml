<!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml" lang="fa" dir="rtl"><head><meta charset="utf-8"/><title>دستورالعمل ‏if‏</title><meta name="description" content="وب‌سایت قاسم کیانی مقدم"/><meta name="keywords" content="قاسم کیانی مقدم, وب‌سایت, وب‌سایت قاسم کیانی مقدم, کتاب, فارسی, کتاب فارسی, ترجمه, برنامه‌نویسی, جاوا, جاوا اسکریپت, پزشکی, طب اطفال"/><meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no"/><link rel="stylesheet" crossorigin="anonymous" href="https://cdn.rtlcss.com/bootstrap/v4.0.0/css/bootstrap.min.css" integrity="sha384-P4uhUIGk/q1gaD/NdgkBIl3a6QywJjlsFJFk7SPRdruoGddvRVSwv5qFnvZ73cpz"/><link rel="stylesheet" crossorigin="anonymous" href="https://use.fontawesome.com/releases/v5.7.1/css/all.css" integrity="sha384-fnmOCqbTlWIlj8LyTjo7mOUStjsKC4pOpQbqyi7RrhN7udi9RwhKkMHpvLbHG9Sr"/><link rel="icon" href="../../../favicon.ico"/><style>@import url(https://fonts.googleapis.com/css?family=Droid+Sans);
@import url(https://fonts.googleapis.com/css?family=Droid+Serif);
@import url(https://fonts.googleapis.com/css?family=Droid+Arabic+Kufi);
@import url(https://fonts.googleapis.com/css?family=Droid+Arabic+Naskh);
html,body,input,textarea,select,option,h1,h2,h3,h4,h5,h6{font-family:Droid Arabic Naskh,Droid Serif;}
nav,.nav{font-family:Droid Arabic Kufi,Droid Sans;}
h1,h2,h3,h4,h5,h6{font-family:Droid Arabic Naskh,Droid Serif;}
#footer{margin-top:0.5rem;padding-top:0.5rem;border-top:#eeeeee solid thick;}</style><style>@import url(https://fonts.googleapis.com/css?family=Courier+Prime);
div.row.pager{margin-top:0.5em;padding:0.5em 0;border-top:solid #cccccc 2px;background-color:#dddddd;}
div.pager-prev{}
div.pager-title{}
div.pager-next{}</style><link rel="stylesheet" type="text/css" href="styles.css"/></head><body style="min-height:75rem;"><nav class="navbar navbar-expand-md navbar-dark bg-dark mb-4"><div class="container"><a class="navbar-brand" href="../../../">وب‌سایت قاسم کیانی مقدم</a><button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#divNavBarToggle" aria-controls="divNavBarToggle" aria-expanded="false" aria-label="Toggle navigation"><span class="navbar-toggler-icon"></span></button><div id="divNavBarToggle" class="collapse navbar-collapse"><ul class="navbar-nav mr-auto"><li class="nav-item active"><a class="nav-link" href="../../">کتاب‌ها<span class="sr-only"> (current)</span></a></li><li class="nav-item"><a class="nav-link" href="../../../essays/">مقالات</a></li><li class="nav-item"><a class="nav-link" href="../../../translation/">ترجمه</a></li><li class="nav-item"><a class="nav-link" href="../../../about/">درباره</a></li><li class="nav-item"><a class="nav-link" href="../../../contact/">تماس</a></li></ul></div></div></nav><div class="container"><div class="row"><main class="col-md-10 order-md-last">
					<div class="ch" id="ch05"><h2 class="ch-title"><a class="bkmk" name="ch05"></a><a class="rtoc" href="c06-toc.xhtml"><span class="ch-title-num">۵</span><br/><span class="ch-title-text">دستورالعمل <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">if</span><span class="rlm">‏</span></span></a></h2><img style="float:right;margin-left:0.5em;margin-bottom:0.25em;" alt="تصویر ابتدای فصل" src="images/ch.svg"/>
<a id="p071"></a><p class="noindent">در برنامه‌نویسی خیلی وقت‌ها باید یک سری شرط‌ها را بررسی کنید و بر اساس آن‌ها تصمیم بگیرید که چه عملی انجام دهید. دستورالعمل <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">if</span><span class="rlm">‏</span> در پایتون به شما امکان می‌دهد که حالت فعلی برنامه را بررسی کنید و بر اساس آن حالت، به‌صورت مناسب پاسخ بدهید.</p><p>در این فصل، استفاده از دستورالعمل شرطی را یاد می‌گیرید، به‌طوری که خواهید توانست هر شرطی را که بخواهید، وارسی کنید. خواهید توانست دستورالعمل‌های ساده‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">if</span><span class="rlm">‏</span> بنویسید، و نیز یاد خواهید گرفت که دنباله‌ی پیچیده‌تری از دستورالعمل‌های <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">if</span><span class="rlm">‏</span> بنویسید، تا دقیقاً مشخص کنید چه زمانی شرایط مورد نظر شما برقرار است. سپس از این مفهوم برای لیست‌ها استفاده خواهید کرد، به‌طوری که بتوانید یک حلقه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">for</span><span class="rlm">‏</span> بنویسید که برای اکثر آیتم‌های لیست به یک روش عمل کند، ولی برای برخی آیتم‌های خاص آن به‌گونه‌ی دیگری عمل نماید.</p><div class="sect" id="ch05lev1sec1"><a class="bkmk" name="ch05lev1sec1"></a><h3>یک مثال ساده</h3>
<a id="p072"></a><p class="noindent">مثال کوتاه زیر نشان می‌دهد که شرط <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">if</span><span class="rlm">‏</span> چگونه به شما امکان می‌دهد که به موقعیت‌های خاص به درستی پاسخ دهید. تصور کنید لیستی از خودروها دارید و می‌خواهید نام هر کدام از آن‌ها را نمایش دهید. نام خودروها اسم خاص است، بنابراین، اکثراً باید حرف اول آن‌ها با حروف بزرگ باشد. ولی مقدار <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">'bmw'</span><span class="rlm">‏</span> باید تماماً با حروف بزرگ نوشته شود. کد زیر روی لیست نام خودروها حلقه تشکیل می‌دهد و به دنبال مقدار <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">'bmw'</span><span class="rlm">‏</span> می‌گردد. هر گاه مقدار <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">'bmw'</span><span class="rlm">‏</span> باشد، به جای اینکه فقط حرف اول آن را تبدیل به حروف بزرگ کند، تمام آن را به حروف بزرگ تبدیل می‌کند:</p><div class="snippet"><div class="snippet-title" dir="ltr">cars.py</div><pre class="snippet" dir="ltr">cars = ['audi', 'bmw', 'subaru', 'toyota']

for car in cars:
<span class="n" dir="ltr">1</span>    if car == 'bmw':
        print(car.upper())
    else:
        print(car.title())</pre></div><p>حلقه در این مثال ابتدا چک می‌کند که مقدار کنونی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">car</span><span class="rlm">‏</span> برابر با <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">'bmw'</span><span class="rlm">‏</span> است <span class="n" dir="ltr">1</span>. اگر این‌طور باشد، آن مقدار با حروف بزرگ نمایش داده می‌شود. اگر مقدار <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">car</span><span class="rlm">‏</span> هر چیزی غیر از <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">'bmw'</span><span class="rlm">‏</span> باشد، حرف اول آن تبدیل به حروف بزرگ می‌شود و نمایش داده می‌شود:</p><div class="snippet"><pre class="snippet" dir="ltr">Audi
BMW
Subaru
Toyota</pre></div><p>این مثال شامل مفاهیم چندی است که در این درس بهتر یاد خواهید گرفت. ابتدا ببینیم چه نوع شرط‌هایی را می‌توانید در برنامه‌هایتان بررسی کنید.</p></div><div class="sect" id="ch05lev1sec2"><a class="bkmk" name="ch05lev1sec2"></a><h3>وارسی‌های شرطی</h3>
<p class="noindent">اساس هر دستورالعمل <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">if</span><span class="rlm">‏</span>، یک عبارت است که به‌صورت <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">True</span><span class="rlm">‏</span> یا <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">False</span><span class="rlm">‏</span> ارزیابی می‌شود، و یک <span class="emphasis">وارسی شرطی</span> نامیده می‌شود. پایتون بر اساس مقادیر <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">True</span><span class="rlm">‏</span> و <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">False</span><span class="rlm">‏</span> تصمیم می‌گیرد که کد درون دستورالعمل <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">if</span><span class="rlm">‏</span> را اجرا کند یا خیر. اگر یک وارسی شرطی به مقدار <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">True</span><span class="rlm">‏</span> ارزیابی شود، پایتون دک بعد از دستورالعمل <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">if</span><span class="rlm">‏</span> را اجرا می‌کند. در صورتی که وارسی به <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">False</span><span class="rlm">‏</span> ارزیابی شود، پایتون از کد بعد از دستورالعمل <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">if</span><span class="rlm">‏</span> صرف‌نظر می‌کند.</p><div class="sect" id="ch05lev2sec1"><a class="bkmk" name="ch05lev2sec1"></a><h4>وارسی برابر بودن</h4>
<p class="noindent">اکثر وارسی‌های شرطی به‌صورت مقایسه‌ی مقدار کنونی یک متغیر با یک مقدار خاص مورد نظر است. در ساده‌ترین وارسی شرطی، بررسی می‌کنید که آیا مقدار کنونی یک متغیر با مقدار مورد نظر شما برابر است یا خیر:</p><div class="snippet"><pre class="snippet" dir="ltr"><span class="n" dir="ltr">1</span>&gt;&gt;&gt; <span class="bo">car = 'bmw'</span>
<span class="n" dir="ltr">2</span>&gt;&gt;&gt; <span class="bo">car == 'bmw'</span>
True</pre></div><a id="p073"></a><p>سطر <span class="n" dir="ltr">1</span> به متغیر <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">car</span><span class="rlm">‏</span>، مقدار <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">'bmw'</span><span class="rlm">‏</span> اختصاص می‌دهد، که برای این کار، همانطور که قبلاً بارها دیده‌اید، از یک علامت تساوی استفاده می‌شود. سطر <span class="n" dir="ltr">2</span> وارسی می‌کند که آیا مقدار <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">car</span><span class="rlm">‏</span> با <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">'bmw'</span><span class="rlm">‏</span> برابر است، و برای این کار از دو علامت تساوی (<span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">==</span><span class="rlm">‏</span>) استفاده می‌شود. این <span class="emphasis">عملگر تساوی</span> مقدار <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">True</span><span class="rlm">‏</span> برمی‌گرداند، در صورتی که مقادیر طرف چپ و راست عملگر با هم انطباق داشته باشند، و مقدار <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">False</span><span class="rlm">‏</span> در صورتی که انطباق نداشته باشند. مقادیر در این مثال با هم انطباق دارند، ازاین‌رو، پایتون <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">True</span><span class="rlm">‏</span> برمی‌گرداند.</p><p>وقتی که مقدار <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">car</span><span class="rlm">‏</span> هر چیزی غیر از <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">'bmw'</span><span class="rlm">‏</span> باشد، این وارسی مقدار <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">False</span><span class="rlm">‏</span> برمی‌گرداند:</p><div class="snippet"><pre class="snippet" dir="ltr"><span class="n" dir="ltr">1</span>&gt;&gt;&gt; <span class="bo">car = 'audi'</span>
<span class="n" dir="ltr">2</span>&gt;&gt;&gt; <span class="bo">car == 'bmw'</span>
False</pre></div><p>در حقیقت، یک علامت تساوی یک دستورالعمل است؛ می‌توانید کد سطر <span class="n" dir="ltr">1</span> را به این صورت بخوانید: «مقدار خودرو را برابر با <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">'audi'</span><span class="rlm">‏</span> قرار بده». از سوی دیگر، دو علامت تساوی، مانند آنچه در سطر <span class="n" dir="ltr">2</span> می‌بینید، سؤالی را می‌پرسد: «آیا مقدار خودرو برابر با <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">'bmw'</span><span class="rlm">‏</span> است؟» اکثر زبان‌های برنامه‌نویسی از علامت تساوی به همین صورت استفاده می‌کنند.</p></div><div class="sect" id="ch05lev2sec2"><a class="bkmk" name="ch05lev2sec2"></a><h4>وارسی برابر بودن بدون در نظر گرفتن حروف کوچک و بزرگ</h4>
<p class="noindent">مساوی بودن در پایتون با در نظر گرفتن حروف کوچک و بزرگ انجام می‌شود. مثلاً دو مقدار که از نظر حروف کوچک و بزرگ یکسان نباشد، برابر محسوب نمی‌شوند:</p><div class="snippet"><pre class="snippet" dir="ltr">&gt;&gt;&gt; <span class="bo">car = 'Audi'</span>
&gt;&gt;&gt; <span class="bo">car == 'audi'</span>
False</pre></div><p>اگر حروف کوچک و بزرگ اهمیت داشته باشد، این رفتار مفید است. ولی اگر حروف کوچک و بزرگ برایتان مهم نباشد و فقط بخواهید مقدار متغیر را بررسی کنید، می‌توانید مقدار متغیر را قبل از مقایسه به حروف کوچک تبدیل کنید:</p><div class="snippet"><pre class="snippet" dir="ltr">&gt;&gt;&gt; <span class="bo">car = 'Audi'</span>
&gt;&gt;&gt; <span class="bo">car.lower() == 'audi'</span>
True</pre></div><p>در اینجا مقدار <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">'Audi'</span><span class="rlm">‏</span> به هر صورتی هم نوشته شده باشد، این وارسی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">True</span><span class="rlm">‏</span> برمی‌گرداند، چرا که مقایسه نسبت به حروف کوچک و بزرگ حساس نیست. تابع <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">lower()</span><span class="rlm">‏</span> مقداری را که در ابتدا در متغیر <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">car</span><span class="rlm">‏</span> ذخیره شده بود، بنابراین، می‌توانید این نوع مقایسه را بدون آنکه تأثیری بر مقدار اصلی داشته باشد، انجام دهید:</p><div class="snippet"><pre class="snippet" dir="ltr"><span class="n" dir="ltr">1</span>&gt;&gt;&gt; <span class="bo">car = 'Audi'</span>
<span class="n" dir="ltr">2</span>&gt;&gt;&gt; <span class="bo">car.lower() == 'audi'</span>
True
<span class="n" dir="ltr">3</span>&gt;&gt;&gt; <span class="bo">car</span>
'Audi'</pre></div><p>در <span class="n" dir="ltr">1</span>، رشته‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">'Audi'</span><span class="rlm">‏</span> را که اولِ آن با حرف بزرگ است، به متغیر <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">car</span><span class="rlm">‏</span> اختصاص می‌دهیم. در <span class="n" dir="ltr">2</span>، مقدار <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">car</span><span class="rlm">‏</span> را به حروف کوچک تبدیل می‌کنیم و مقدار تبدیل شده به حروف کوچک را با <a id="p074"></a> رشته‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">'audi'</span><span class="rlm">‏</span> مقایسه می‌کنیم. این دو رشته با هم انطباق دارند، بنابراین، پایتون <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">True</span><span class="rlm">‏</span> برمی‌گرداند. در <span class="n" dir="ltr">3</span>، مشاهده می‌کنیم که مقدار ذخیره شده در متغیر <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">car</span><span class="rlm">‏</span> بر اثر فراخوانی متد <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">lower()</span><span class="rlm">‏</span> تغییری نکرده است.</p><p>وب‌سایت‌ها با روش مشابهی کاری می‌کنند که داده‌هایی که کاربران وارد می‌کنند، تابع مقررات خاصی باشند. مثلاً یک سایت می‌تواند از یک وارسی شرطی استفاده کند تا مطمئن شود که هر کاربر واقعاً شناسه‌ی منحصر به فردی دارد، نه اینکه فقط از نظر کوچک و بزرگ بودن حروف با یک کاربر دیگر تفاوت داشته باشد. وقتی که کسی شناسه‌ی جدیدی را انتخاب می‌کند، شناسه‌ی جدید به حروف کوچک تبدیل می‌شود و با تمام شناسه‌های موجود که آن‌ها هم به حروف کوچک تبدیل می‌شوند، مقایسه می‌شود. طی این وارسی، شناسه‌ای مانند <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">'John'</span><span class="rlm">‏</span> در صورتی که از قبل شناسه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">'john'</span><span class="rlm">‏</span> یا هر تغییر دیگری از آن از نظر حروف کوچک و بزرگ وجود داشته باشد،  مورد قبول قرار نخواهد گرفت.</p></div><div class="sect" id="ch05lev2sec3"><a class="bkmk" name="ch05lev2sec3"></a><h4>وارسی از نظر برابر نبودن</h4>
<p class="noindent">وقتی که می‌خواهید مساوی نبودن دو مقدار را مشخص کنید، می‌توانید از ترکیب یک علامت تعجب با علامت تساوی (<span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">!=</span><span class="rlm">‏</span>) استفاده کنید. علامت تعجب به معنای <span class="emphasis">نه</span> است، که در بسیاری از زبان‌های برنامه‌نویسی دیگر همین معنا را دارد.</p><p>حالا یک دستورالعمل <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">if</span><span class="rlm">‏</span> دیگر نیز اضافه می‌کنیم تا عملگر نابرابری را آزمایش کنیم. چاشنی درخواستی برای روی پیتزا را در متغیری ذخیره می‌کنیم و سپس اگر شخص آنچوی سفارش نداده باشد، پیامی را نمایش می‌دهیم:</p><div class="snippet"><div class="snippet-title" dir="ltr">toppings.py</div><pre class="snippet" dir="ltr">requested_topping = 'mushrooms'

<span class="n" dir="ltr">1</span>if requested_topping != 'anchovies':
    print("Hold the anchovies!")</pre></div><p>سطر <span class="n" dir="ltr">1</span> مقدار <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">requested_topping</span><span class="rlm">‏</span> را با مقدار <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">'anchovies'</span><span class="rlm">‏</span> مقایسه می‌کند. اگر این دو مقدار انطباق نداشته باشند، پایتون مقدار <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">True</span><span class="rlm">‏</span> برمی‌گرداند، و کد زیر را به دنبال دستورالعمل <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">if</span><span class="rlm">‏</span> اجرا می‌کند. اگر دو مقدار انطباق داشته باشند، پایتون مقدار <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">False</span><span class="rlm">‏</span> برمی‌گرداند، و کد بعد از دستورالعمل <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">if</span><span class="rlm">‏</span> را اجرا نمی‌کند.</p><p>از آنجا که مقدار <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">requested_topping</span><span class="rlm">‏</span> برابر با <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">'anchovies'</span><span class="rlm">‏</span> نیست، لذا تابع <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">print()</span><span class="rlm">‏</span> اجرا می‌شود:</p><div class="snippet"><pre class="snippet" dir="ltr">Hold the anchovies!</pre></div><p>اکثر عبارت‌های شرطی که می‌نویسید، تساوی را بررسی می‌کنند، ولی بعضی وقت‌ها مؤثرتر این است که عدم‌تساوی را وارسی کنید.</p></div><div class="sect" id="ch05lev2sec4"><a class="bkmk" name="ch05lev2sec4"></a><h4>مقایسه‌های عددی</h4>
<p class="noindent">وارسی کردن مقادیر عددی خیلی راحت است. مثلاً کد زیر وارسی می‌کند که آیا سن یک شخص ۱۸ سال است:</p><div class="snippet"><pre class="snippet" dir="ltr">&gt;&gt;&gt; <span class="bo">age = 18</span>
&gt;&gt;&gt; <span class="bo">age == 18</span>
True</pre></div><a id="p075"></a><p>مساوی نبودن دو عدد را هم می‌توانید وارسی کنید. مثلاً کد زیر در صورتی که پاسخ داده شده درست نباشد، یک پیام را نمایش می‌دهد:</p><div class="snippet"><div class="snippet-title" dir="ltr">magic_number.py</div><pre class="snippet" dir="ltr">
answer = 17

<span class="n" dir="ltr">1</span>if answer != 42:
    print("That is not the correct answer. Please try again!")</pre></div><p>وارسی شرطی <span class="n" dir="ltr">1</span> مورد تأیید قرار می‌گیرد، چرا که مقدار <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">answer</span><span class="rlm">‏</span> (یعنی عدد <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">17</span><span class="rlm">‏</span>) برابر با <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">42</span><span class="rlm">‏</span> نیست. از آنجا که وارسی تأیید می‌شود، لذا بلوک کد دارای تورفتگی اجرا می‌شود:</p><div class="snippet"><pre class="snippet" dir="ltr">That is not the correct answer. Please try again!</pre></div><p>انواع مختلف مقایسه‌های ریاضی، از قبیل کوچک‌تر، کوچک‌تر یا مساوی، بزرگ‌تر، و بزرگ‌تر یا مساوی را نیز می‌توان در دستورالعمل‌های شرطی مورد استفاده قرار داد:</p><div class="snippet"><pre class="snippet" dir="ltr">&gt;&gt;&gt; <span class="bo">age = 19</span>
&gt;&gt;&gt; <span class="bo">age &lt; 21</span>
True
&gt;&gt;&gt; <span class="bo">age &lt;= 21</span>
True
&gt;&gt;&gt; <span class="bo">age &gt; 21</span>
False
&gt;&gt;&gt; <span class="bo">age &gt;= 21</span>
False</pre></div><p>هر مقایسه‌ی ریاضی را می‌توان در دستورالعمل <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">if</span><span class="rlm">‏</span> به کار برد، و با این کار می‌توانید دقیقاً شرایط مورد نظر خود را پیدا کنید:</p></div><div class="sect" id="ch05lev2sec5"><a class="bkmk" name="ch05lev2sec5"></a><h4>وارسی کردن چندین شرط</h4>
<p class="noindent">شاید بخواهید هم‌زمان چندین شرط را مورد وارسی قرار دهید. به‌عنوان مثال، بعضی وقت‌ها شاید لازم باشد که دو شرط <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">True</span><span class="rlm">‏</span> باشد، تا یک عمل انجام پذیرد. بعضی مواقع دیگر شاید کافی باشد که فقط یکی از شرط‌ها <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">True</span><span class="rlm">‏</span> باشد. کلیدواژه‌های <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">and</span><span class="rlm">‏</span> و <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">or</span><span class="rlm">‏</span> می‌تواند برای این مواقع مورد استفاده قرار گیرد:</p><div class="sect" id="ch05lev3sec1"><a class="bkmk" name="ch05lev3sec1"></a><h5>استفاده از <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">and</span><span class="rlm">‏</span> برای وارسی کردن چندین شرط</h5>
<p class="noindent">برای وارسی اینکه آیا دو شرط به‌طور هم‌زمان <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">True</span><span class="rlm">‏</span> هستند، دو وارسی شرط را با استفاده از کلیدواژه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">and</span><span class="rlm">‏</span> با هم ترکیب کنید؛ اگر این وارسی تأیید شود، کل عبارت به <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">True</span><span class="rlm">‏</span> ارزیابی می‌شود. اگر هر یک از دو وارسی یا هر دوی آن‌ها ناموفق باشد، کل عبارت به <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">False</span><span class="rlm">‏</span> ارزیابی می‌شود.</p><p>مثلاً با عبارت زیر می‌توانید وارسی کنید که آیا دو نفر هر دو بالای ۲۱ سال هستند:</p><div class="snippet"><pre class="snippet" dir="ltr"><span class="n" dir="ltr">1</span>&gt;&gt;&gt; <span class="bo">age_0 = 22</span>
&gt;&gt;&gt; <span class="bo">age_1 = 18</span>
<span class="n" dir="ltr">2</span>&gt;&gt;&gt; <span class="bo">age_0 &gt;= 21 and age_1 &gt;= 21</span>
False
<a id="p076"></a><span class="n" dir="ltr">3</span>&gt;&gt;&gt; <span class="bo">age_1 = 22</span>
&gt;&gt;&gt; <span class="bo">age_0 &gt;= 21 and age_1 &gt;= 21</span>
True</pre></div><p>در <span class="n" dir="ltr">1</span>، دو سن را تعریف می‌کنیم: <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">age_0</span><span class="rlm">‏</span> و <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">age_1</span><span class="rlm">‏</span>. در <span class="n" dir="ltr">2</span>، وارسی می‌کنیم که آیا هر دو سن بالای ۲۱ سال است یا خیر. وارسی طرف چپ تأیید می‌شود، ولی وارسی سمت راست ناموفق است، ازاین‌رو، مقدار کل عبارت <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">False</span><span class="rlm">‏</span> ارزیابی می‌شود. در <span class="n" dir="ltr">3</span>، مقدار <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">age_1</span><span class="rlm">‏</span> را به ۲۲ تغییر می‌دهیم. مقدار <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">age_1</span><span class="rlm">‏</span> حالا بزرگ‌تر از ۲۱ است، بنابراین، هر دو وارسی تأیید می‌شوند، و در نتیجه، مقدار کل عبارت <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">True</span><span class="rlm">‏</span> ارزیابی می‌شود.</p><p>به‌منظور اینکه کد راحت‌تر قابل خواندن باشد، می‌توانید دور هر کدام از عبارت‌های شرطی پرانتز بگذارید، ولی نیازی به این کار نیست. در صورتی که بخواهید از پرانتز استفاده کنید، عبارت شرطی شما به‌صورت زیر خواهد بود:</p><div class="snippet"><pre class="snippet" dir="ltr">(age_0 &gt;= 21) and (age_1 &gt;= 21)</pre></div></div><div class="sect" id="ch05lev3sec2"><a class="bkmk" name="ch05lev3sec2"></a><h5>استفاده از <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">or</span><span class="rlm">‏</span> برای وارسی کردن چندین شرط</h5>
<p class="noindent">کلیدواژه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">or</span><span class="rlm">‏</span> نیز به شما امکان وارسی کردن چند شرط را می‌دهد، ولی زمانی که هر کدام از شرط‌ها یا هر دوی آن‌ها موفق باشد، تأیید می‌شود. عبارت <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">or</span><span class="rlm">‏</span> فقط زمانی رد می‌شود که هر دو وارسی ناموفق باشد.</p><p>یک بار دیگر دو سن را در نظر می‌گیریم، ولی این بار برایمان کافی است که فقط یک نفر بالای ۲۱ سال باشد:</p><div class="snippet"><pre class="snippet" dir="ltr"><span class="n" dir="ltr">1</span>&gt;&gt;&gt; <span class="bo">age_0 = 22</span>
&gt;&gt;&gt; <span class="bo">age_1 = 18</span>
<span class="n" dir="ltr">2</span>&gt;&gt;&gt; <span class="bo">age_0 &gt;= 21 or age_1 &gt;= 21</span>
True
<span class="n" dir="ltr">3</span>&gt;&gt;&gt; <span class="bo">age_0 = 18</span>
&gt;&gt;&gt; <span class="bo">age_0 &gt;= 21 or age_1 &gt;= 21</span>
False</pre></div><p>اینجا هم در ابتدا در <span class="n" dir="ltr">1</span> دو متغیر سن داریم. از آنجا که وارسی برای <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">age_0</span><span class="rlm">‏</span> در <span class="n" dir="ltr">2</span> درست درمی‌آید، لذا مقدار کل عبارت <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">True</span><span class="rlm">‏</span> ارزیابی می‌شود. بعد مقدار <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">age_0</span><span class="rlm">‏</span> را به ۱۸ کاهش می‌دهیم. در وارسی سطر <span class="n" dir="ltr">3</span>، این بار هر دو وارسی ناموفق است، و مقدار کلی عبارت <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">False</span><span class="rlm">‏</span> ارزیابی می‌شود.</p></div></div><div class="sect" id="ch05lev2sec6"><a class="bkmk" name="ch05lev2sec6"></a><h4>وارسی وجود یک مقدار در لیست</h4>
<p class="noindent">بعضی وقت‌ها قبل از انجام عملی لازم است که ببینیم مقدار خاصی در یک لیست وجود دارد یا خیر. مثلاً فرض کنید می‌خواهید کاربر جدیدی را در وب‌سایت خود ثبت‌نام کنید و قبل از آن می‌خواهید مطمئن شوید که شناسه‌ی کاربری او از قبل در لیست شناسه‌های کاربری اعضای کنونی سایت وجود ندارد. در یک پروژه‌ی نقشه، شاید بخواهید وارسی کنید که یک مکان داده شده از قبل در لیست مکان‌های شناخته شده وجود دارد یا خیر.</p><p>برای تعیین اینکه یک مقدار خاص در یک لیست وجود دارد یا نه، از کلیدواژه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">in</span><span class="rlm">‏</span> استفاده می‌کنیم. فرض کنید برنامه‌ای برای یک پیتزافروشی نوشته‌ایم. لیستی از چاشنی‌های روی پیتزا که مشتری درخواست کرده تهیه کرده‌ایم، و حالا می‌خواهیم ببینیم چاشنی‌های خاصی در آن لیست وجود دارند یا خیر.</p><div class="snippet"><pre class="snippet" dir="ltr"><a id="p077"></a>&gt;&gt;&gt; <span class="bo">requested_toppings = ['mushrooms', 'onions', 'pineapple']</span>
<span class="n" dir="ltr">1</span>&gt;&gt;&gt; <span class="bo">'mushrooms' in requested_toppings</span>
True
<span class="n" dir="ltr">2</span>&gt;&gt;&gt; <span class="bo">'pepperoni' in requested_toppings</span>
False</pre></div><p>در <span class="n" dir="ltr">1</span> و <span class="n" dir="ltr">2</span>، کلیدواژه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">in</span><span class="rlm">‏</span> به پایتون می‌گوید که وجود <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">'mushrooms'</span><span class="rlm">‏</span> و <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">'pepperoni'</span><span class="rlm">‏</span> را در لیست <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">requested_toppings</span><span class="rlm">‏</span> وارسی کند. این تکنیک بسیار قدرتمند است، زیرا می‌توانید لیستی از مقادیر اساسی را ایجاد کنید، و سپس به آسانی وارسی کنید که مقدار مورد نظر شما با یکی از مقادیر موجود در لیست انطباق دارد یا خیر.</p></div><div class="sect" id="ch05lev2sec7"><a class="bkmk" name="ch05lev2sec7"></a><h4>وارسی عدم‌وجود یک مقدار در لیست</h4>
<p class="noindent">بعضی وقت‌ها هم می‌خواهیم بدانیم که آیا یک مقدار معین در لیست وجود ندارد. برای این موقعیت می‌توانید از کلیدواژه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">not</span><span class="rlm">‏</span> استفاده کنید. مثلاً فرض کنید که لیستی از کاربران داریم که مجاز به کامنت دادن در یک فروم نیستند. وقتی که یک کاربر می‌خواهد کامنت بنویسد، اول باید بررسی کنید که او جزو افرادی نباشد که کامنت دادنشان ممنوع شده است:</p><div class="snippet"><div class="snippet-title" dir="ltr">banned_users.py</div><pre class="snippet" dir="ltr">
banned_users = ['andrew', 'carolina', 'david']
user = 'marie'

<span class="n" dir="ltr">1</span>if user not in banned_users:
    print(f"{user.title()}, you can post a response if you wish.")</pre></div><p>سطر <span class="n" dir="ltr">1</span> به آسانی قابل‌فهم است. اگر مقدار <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">user</span><span class="rlm">‏</span> در لیست <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">banned_users</span><span class="rlm">‏</span> وجود نداشته باشد، پایتون مقدار <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">True</span><span class="rlm">‏</span> برمی‌گرداند و سطر دارای تورفتگی را اجرا می‌کند.</p><p>کاربر <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">'marie'</span><span class="rlm">‏</span> در لیست <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">banned_users</span><span class="rlm">‏</span> نیست، بنابراین، پیامی برای او نمایش داده می‌شود که او را دعوت به نوشتن پاسخ می‌کند:</p><div class="snippet"><pre class="snippet" dir="ltr">Marie, you can post a response if you wish.</pre></div></div><div class="sect" id="ch05lev2sec8"><a class="bkmk" name="ch05lev2sec8"></a><h4>عبارت‌های بولی</h4>
<p class="noindent">به تدریج که مطالب بیشتری درباره‌ی برنامه‌نویسی بخوانید، دیر یا زود اصطلاح <span class="emphasis">عبارت بولی</span> به گوشتان خواهد خورد. عبارت بولی به معنای همان وارسی شرطی است. یک <span class="emphasis">مقدار بولی</span> یا <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">True</span><span class="rlm">‏</span> است یا <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">False</span><span class="rlm">‏</span>، درست مانند یک عبارت شرطی پس از آنکه ارزیابی شد.</p><p>غالباً از مقادیر بولی برای مشخص کردن برخی شرایط استفاده می‌شود، مثلاً اینکه آیا یک بازی در حال اجرا است و اینکه آیا یک کاربر می‌تواند محتوای خاصی را در وب‌سایت ویرایش کند یا خیر:</p><div class="snippet"><pre class="snippet" dir="ltr">game_active = True
can_edit = False</pre></div><p>مقادیر بولی روش مؤثری هستند برای ذخیره کردن حالت برنامه یا شرط خاصی که در برنامه حائز اهمیت است.</p><div class="sidebar"><h6 class="sidebar-title">خودتان امتحان کنید</h6>
<a id="p078"></a><p class="tiy1"><span class="tiy" id="ch05_tiy01"><span class="tiy-num">۵-۱</span>. <span class="tiy-title">وارسی‌های شرطی</span>: </span> یک سری وارسی شرطی بنویسید. یک جمله در شرح هر وارسی نمایش دهید و پیش‌بینی خود را از نتیجه‌ی آن بنویسید. کد شما باید چیزی شبیه این باشد:</p><div class="snippet"><pre class="snippet" dir="ltr">car = 'subaru'
print("Is car == 'subaru'? I predict True.")
print(car == 'subaru')

print("\nIs car == 'audi'? I predict False.")
print(car == 'audi')</pre></div><ul>
<li>دقیقاً به نتایج خود نگاه کنید، و دقت کنید که به درستی بفهمید که هر ارزیابی چرا <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">True</span><span class="rlm">‏</span> یا <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">False</span><span class="rlm">‏</span> می‌شود.</li><li>دست‌کم ده وارسی شرطی انجام دهید. پنج تا از وارسی‌ها باید به مقدار <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">True</span><span class="rlm">‏</span> ارزیابی شود و پنج تا به مقدار <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">False</span><span class="rlm">‏</span>.</li></ul><p class="tiy1"><span class="tiy" id="ch05_tiy02"><span class="tiy-num">۵-۲</span>. <span class="tiy-title">وارسی‌های شرطی بیشتر</span>: </span> لازم نیست تعداد وارسی‌های شرطی شما محدود به ده تا باشد. اگر می‌خواهید مقایسه‌های بیشتری انجام دهید، آن‌ها را بنویسید و به فایل <span class="rlm">‏</span><span class="ident" dir="ltr">conditional_tests.py</span><span class="rlm">‏</span> اضافه کنید. برای هر یک از موارد زیر، لااقل یک مقایسه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">True</span><span class="rlm">‏</span> بنویسید و یک مورد <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">False</span><span class="rlm">‏</span>:</p><ul>
<li>وارسی از نظر تساوی و عدم‌تساوی روی رشته‌ها</li><li>وارسی با استفاده از متد <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">lower()</span><span class="rlm">‏</span></li><li>وارسی‌های عددی با استفاده از تساوی و عدم‌تساوی، بزرگ‌تر و کوچک‌تر، بزرگ‌تر یا مساوی با، و کوچک‌تر یا مساوی با</li><li>وارسی با استفاده از کلیدواژه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">and</span><span class="rlm">‏</span> و کلیدواژه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">or</span><span class="rlm">‏</span></li><li>وارسی موجود بودن یک آیتم در یک لیست</li><li>وارسی موجود نبودن یک آیتم در یک لیست</li></ul></div></div></div><div class="sect" id="ch05lev1sec3"><a class="bkmk" name="ch05lev1sec3"></a><h3>دستورالعمل‌های <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">if</span><span class="rlm">‏</span></h3>
<p class="noindent">وقتی که عبارت‌های شرطی را درک کردید، می‌توانید شروع به نوشتن دستورالعمل‌های <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">if</span><span class="rlm">‏</span> کنید. دستورالعمل <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">if</span><span class="rlm">‏</span> چند نوع مختلف دارد، و انتخاب آن بستگی به این دارد که چند شرط را می‌خواهید بررسی کنید. در بحث وارسی‌های شرطی، چند نمونه‌ی از دستورالعمل <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">if</span><span class="rlm">‏</span> را دیدید، ولی حالا این موضوع را عمیق‌تر بررسی می‌کنیم.</p><div class="sect" id="ch05lev2sec9"><a class="bkmk" name="ch05lev2sec9"></a><h4>دستورالعمل <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">if</span><span class="rlm">‏</span> ساده</h4>
<p class="noindent">ساده‌ترین نوع دستورالعمل <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">if</span><span class="rlm">‏</span>، یک وارسی شرطی دارد و یک عمل:</p><div class="snippet"><pre class="snippet" dir="ltr">if <span class="it">conditional_test</span>:
    <span class="it">do something</span>
</pre></div><a id="p079"></a><p>می‌توانید هر عبارت شرطی را در سطر اول قرار دهید و تقریباً هر نوع عملی را در بلوک دارای تورفتگی که بعد از شرط قرار می‌گیرد. اگر وارسی شرطی به مقدار <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">True</span><span class="rlm">‏</span> ارزیابی شود، پایتون کد بعد از دستورالعمل <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">if</span><span class="rlm">‏</span> را اجرا می‌کند. اگر مقدار عبارت شرطی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">False</span><span class="rlm">‏</span> باشد، پایتون از کد بعد از دستورالعمل <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">if</span><span class="rlm">‏</span> چشم‌پوشی می‌کند.</p><p>فرض کنید متغیری داریم که نشان‌دهنده‌ی سن یک شخص است، و می‌خواهیم بدانیم که آن شخص به سن رأی‌گیری رسیده است یا خیر. کد زیر مشخص می‌کند که شخص می‌تواند رأی بدهد یا خیر:</p><div class="snippet"><div class="snippet-title" dir="ltr">voting.py</div><pre class="snippet" dir="ltr">
age = 19
<span class="n" dir="ltr">1</span>if age &gt;= 18:
<span class="n" dir="ltr">2</span>    print("You are old enough to vote!")</pre></div><p>در <span class="n" dir="ltr">1</span>، پایتون وارسی می‌کند که آیا مقدار <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">age</span><span class="rlm">‏</span> بزرگ‌تر یا مساوی با ۱۸ هست یا نه. اگر این‌طور باشد، پایتون فراخوانی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">print()</span><span class="rlm">‏</span> در <span class="n" dir="ltr">2</span> را که دارای تورفتگی است، اجرا می‌کند:</p><div class="snippet"><pre class="snippet" dir="ltr">You are old enough to vote!</pre></div><p>تورفتگی در دستورالعمل <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">if</span><span class="rlm">‏</span> همان نقشی را ایفا می‌کند که در حلقه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">for</span><span class="rlm">‏</span> داشت. تمام سطرهای دارای تورفتگی بعد از دستورالعمل <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">if</span><span class="rlm">‏</span> در صورتی که شرط آن تأیید شود، اجرا می‌شود، و اگر تأیید نشود، تمام این بلوک مورد چشم‌پوشی قرار می‌گیرد.</p><p>در بلوک بعد از دستورالعمل <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">if</span><span class="rlm">‏</span>، هر چند سطر کد که خواستید، می‌توانید داشته باشید. پس در اینجا یک سطر دیگر اضافه می‌کنیم و در صورتی که شخص به سن رأی‌گیری رسیده است، می‌پرسیم که آیا برای رأی دادن ثبت‌نام کرده است یا خیر:</p><div class="snippet"><pre class="snippet" dir="ltr"><span class="ash">age = 19</span>
<span class="ash">if age &gt;= 18:</span>
    <span class="ash">print("You are old enough to vote!")</span>
    print("Have you registered to vote yet?")
</pre></div><p>وارسی شرطی موفقیت‌آمیز است، و هر دو فراخوانی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">print()</span><span class="rlm">‏</span> که تورفتگی دارند، اجرا می‌شوند، یعنی هر دو سطر نمایش داده می‌شوند:</p><div class="snippet"><pre class="snippet" dir="ltr">You are old enough to vote!
Have you registered to vote yet?</pre></div><p>اگر مقدار <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">age</span><span class="rlm">‏</span> کوچک‌تر از ۱۸ باشد، این برنامه هیچ خروجی‌ای تولید نخواهد کرد:</p></div><div class="sect" id="ch05lev2sec10"><a class="bkmk" name="ch05lev2sec10"></a><h4>دستورالعمل <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">if-else</span><span class="rlm">‏</span></h4>
<p class="noindent">خیلی وقت‌ها، در صورتی که شرط موفقیت‌آمیز باشد، می‌خواهید یک کار انجام دهید، و در غیر این صورت، کاری دیگر. دستور نحوی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">if-else</span><span class="rlm">‏</span> پایتون امکان این کار را فراهم می‌کند. بلوک اول <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">if-else</span><span class="rlm">‏</span> شبیه یک دستورالعمل <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">if</span><span class="rlm">‏</span> ساده است، ولی دستورالعمل <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">else</span><span class="rlm">‏</span> به شما امکان می‌دهد که یک یا چند کار را مشخص کنید که در صورتی که وارسی شرطی ناموفق باشد، اجرا شود.</p><a id="p080"></a><p>در اینجا در صورتی که شخص به سن رأی‌گیری رسیده باشد، باز هم همان پیام سابق را نمایش می‌دهیم، ولی این بار برای کسانی که به سن رأی‌گیری نرسیده‌اند، پیام دیگری را اضافه می‌کنیم:</p><div class="snippet"><pre class="snippet" dir="ltr">age = 17
<span class="n" dir="ltr">1</span>if age &gt;= 18:
    <span class="ash">print("You are old enough to vote!")</span>
    <span class="ash">print("Have you registered to vote yet?")</span>
<span class="n" dir="ltr">2</span>else:
    print("Sorry, you are too young to vote.")
    print("Please register to vote as soon as you turn 18!")</pre></div><p>اگر وارسی شرطی <span class="n" dir="ltr">1</span> به موفقیت برسد، بلوک اول شامل فراخوانی‌های <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">print()</span><span class="rlm">‏</span> دارای تورفتگی اجرا می‌شود. اگر نتیجه‌ی وارسی، <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">False</span><span class="rlm">‏</span> باشد، بلوک <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">else</span><span class="rlm">‏</span> در <span class="n" dir="ltr">2</span> اجرا می‌شود. از آنجا که <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">age</span><span class="rlm">‏</span> این بار کوچک‌تر از ۱۸ است، لذا وارسی شرطی موفق نمی‌شود و کد موجود در بلوک <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">else</span><span class="rlm">‏</span> اجرا می‌شود:</p><div class="snippet"><pre class="snippet" dir="ltr">Sorry, you are too young to vote.
Please register to vote as soon as you turn 18!</pre></div><p>این کد هدف مورد نظر را محقق می‌کند، چرا که فقط دو موقعیت ممکن برای ارزیابی وجود دارد: شخص یا به سن رأی‌گیری رسیده است یا نه. ساختار <span class="rlm">‏</span><span class="lr" dir="ltr"><span class="literal">if-else</span>-<span class="literal">else</span></span><span class="rlm">‏</span> برای موقعیت‌هایی قابل استفاده است که می‌خواهید پایتون همواره یکی از دو کار مورد نظر را انجام دهد. در یک چنین زنجیره‌ی ساده‌ی <span class="rlm">‏</span><span class="lr" dir="ltr"><span class="literal">if</span>-<span class="literal">else</span></span><span class="rlm">‏</span>، یکی از دو عمل همواره انجام خواهد شد.</p></div><div class="sect" id="ch05lev2sec11"><a class="bkmk" name="ch05lev2sec11"></a><h4>زنجیره‌ی <span class="rlm">‏</span><span class="lr" dir="ltr"><span class="literal">if</span>-<span class="literal">elif</span>-<span class="literal">else</span></span><span class="rlm">‏</span></h4>
<p class="noindent">خیلی از اوقات، لازم است که بیشتر از دو موقعیت را وارسی کنید، و برای این منظور می‌توانید از دستور نحوی <span class="rlm">‏</span><span class="lr" dir="ltr"><span class="literal">if</span>-<span class="literal">elif</span>-<span class="literal">else</span></span><span class="rlm">‏</span> استفاده کنید. پایتون در زنجیره‌ی <span class="rlm">‏</span><span class="lr" dir="ltr"><span class="literal">if</span>-<span class="literal">elif</span>-<span class="literal">else</span></span><span class="rlm">‏</span> فقط یکی از بلوک‌های کد را اجرا می‌کند. پایتون هر کدام از وارسی‌های شرطی را به نوبت اجرا می‌کند، تا آنکه به شرطی برسد که تأیید شود. وقتی که یک وارسی تأیید شد، کد بعد از آن وارسی اجرا می‌شود، و پایتون از بقیه‌ی وارسی‌ها صرف نظر می‌کند.</p><p>بسیاری از موقعیت‌های دنیای واقعی شامل بیش از دو موقعیت ممکن است. مثلاً یک پارک تفریحی را در نظر بگیرید که برای گروه‌های سنی مختلف، نرخ بلیت متفاوتی دارد:</p><ul>
<li>ورود برای افراد زیر ۴ سال رایگان است.</li><li>ورودیه برای افراد بین ۴ و ۱۸ سال، ۲۵ دلار است.</li><li>ورودیه برای افراد ۱۸ سال یا بالاتر، ۴۰ دلار است.</li></ul><p>چگونه می‌توانیم از یک دستورالعمل <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">if</span><span class="rlm">‏</span> برای تعیین نرخ ورودیه‌ی یک شخص استفاده کنیم؟ کد زیر گروه سنی شخص را وارسی می‌کند و سپس نرخ ورودیه را در پیامی نمایش می‌دهد:</p><div class="snippet"><div class="snippet-title" dir="ltr">amusement_park.py</div><pre class="snippet" dir="ltr">age = 12

<span class="n" dir="ltr">1</span>if age &lt; 4:
    print("Your admission cost is $0.")
<a id="p081"></a><span class="n" dir="ltr">2</span>elif age &lt; 18:
    print("Your admission cost is $25.")
<span class="n" dir="ltr">3</span>else:
    print("Your admission cost is $40.")</pre></div><p>عبارت شرطی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">if</span><span class="rlm">‏</span> در <span class="n" dir="ltr">1</span> وارسی می‌کند که آیا سن شخص زیر ۴ سال است. اگر نتیجه‌ی این وارسی مثبت باشد، پیامی نمایش داده می‌شود و بقیه‌ی وارسی‌ها مورد چشم‌پوشی قرار می‌گیرد. دستور <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">elif</span><span class="rlm">‏</span> در سطر <span class="n" dir="ltr">2</span> در واقع یک وارسی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">if</span><span class="rlm">‏</span> دیگر است، که فقط در صورتی اجرا می‌شود که وارسی قبلی ناموفق بوده باشد. در اینجا می‌دانیم که شخص لااقل ۴ سال سن دارد، چرا که وارسی اول موفق نبوده است. در صورتی که شخص زیر ۱۸ سال باشد، پیام مناسبی نمایش داده می‌شود و از بلوک <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">else</span><span class="rlm">‏</span> صرف‌نظر می‌شود. اگر هر دو وارسی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">if</span><span class="rlm">‏</span> و <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">elif</span><span class="rlm">‏</span> ناموفق باشد، پایتون کد موجود در بلوک <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">else</span><span class="rlm">‏</span> در سطر <span class="n" dir="ltr">3</span> را اجرا می‌کند.</p><p>در این مثال، حاصل عبارت شرطی <span class="n" dir="ltr">1</span> مقدار <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">False</span><span class="rlm">‏</span> است، لذا بلوک کد آن اجرا نمی‌شود. اما وارسی دوم به مقدار <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">True</span><span class="rlm">‏</span> منجر می‌شود (۱۲ کوچک‌تر از ۱۸ است)، لذا کد آن اجرا می‌شود. خروجی یک جمله است که مبلغ ورودیه را به کاربر اطلاع می‌دهد:</p><div class="snippet"><pre class="snippet" dir="ltr">Your admission cost is $25.</pre></div><p>در صورتی که سن از ۱۷ بالاتر باشد، دو وارسی اول ناموفق خواهد بود. در این موقعیت‌ها، بلوک <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">else</span><span class="rlm">‏</span> اجرا می‌شود و مبلغ ورودیه ۴۰ دلار خواهد بود:</p><p>به جای اینکه مبلغ ورودیه را در داخل بلوک <span class="rlm">‏</span><span class="lr" dir="ltr"><span class="literal">if</span>-<span class="literal">elif</span>-<span class="literal">else</span></span><span class="rlm">‏</span> نمایش دهیم، یک راه خلاصه‌تر این است که قیمت را در داخل زنجیره‌ی <span class="rlm">‏</span><span class="lr" dir="ltr"><span class="literal">if</span>-<span class="literal">elif</span>-<span class="literal">else</span></span><span class="rlm">‏</span> تعیین کنیم، و بعد پس از اتمام زنجیره، با یک فراخوانی ساده‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">print()</span><span class="rlm">‏</span> آن را نمایش دهیم:</p><div class="snippet"><pre class="snippet" dir="ltr"><span class="ash">age = 12</span>

<span class="ash">if age &lt; 4:</span>
<span class="n" dir="ltr">1</span>    price = 0
<span class="ash">elif age &lt; 18:</span>
<span class="n" dir="ltr">2</span>    price = 25
<span class="ash">else:</span>
<span class="n" dir="ltr">3</span>    price = 40

<span class="n" dir="ltr">4</span>print(f"Your admission cost is ${price}.")</pre></div><p>سطرهای مشخص شده با <span class="n" dir="ltr">1</span>، <span class="n" dir="ltr">2</span>، و <span class="n" dir="ltr">3</span>، مقدار <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">price</span><span class="rlm">‏</span> را مانند مثال قبل بر اساس سن فرد تعیین می‌کنند. پس از آنکه قیمت در زنجیره‌ی <span class="rlm">‏</span><span class="lr" dir="ltr"><span class="literal">if</span>-<span class="literal">elif</span>-<span class="literal">else</span></span><span class="rlm">‏</span> تعیین شد، یک فراخوانی جداگانه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">print()</span><span class="rlm">‏</span> در <span class="n" dir="ltr">4</span> که تورفتگی ندارد، پیامی را با استفاده از این مقدار نمایش می‌دهد و مبلغ ورودیه‌ی او را اعلام می‌کند.</p><p>این کد همان خروجی مثال قبل را ایجاد می‌کند، ولی هدف زنجیره‌ی <span class="rlm">‏</span><span class="lr" dir="ltr"><span class="literal">if</span>-<span class="literal">elif</span>-<span class="literal">else</span></span><span class="rlm">‏</span> در اینجا محدودتر است. به جای اینکه قیمت را تعیین کند و آن را نمایش دهد، فقط قیمت ورودیه را مشخص می‌کند. علاوه بر اینکه این روش مؤثرتر است، تغییر دادن آن هم نسبت به روش قبلی آسان‌تر خواهد بود. برای اینکه متن پیام خروجی را تغییر دهید، فقط باید یک فراخوانی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">print()</span><span class="rlm">‏</span> را تغییر دهید، نه سه فراخوانی جداگانه را.</p></div><a id="p082"></a><div class="sect" id="ch05lev2sec12"><a class="bkmk" name="ch05lev2sec12"></a><h4>استفاده از چندین بلوک <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">elif</span><span class="rlm">‏</span></h4>
<p class="noindent">می‌توانید در کد خود از هر چند تا بلوک <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">elif</span><span class="rlm">‏</span> که خواستید، استفاده کنید. مثلاً اگر پارک تفریحی می‌خواست برای افراد سالمند تخفیف قائل شود، می‌توانستید یک وارسی شرطی دیگر بگذارید تا مشخص کند که آیا فرد واجد شرایط تخفیف سالمندی هست یا خیر. فرض کنید نرخ ورودیه برای افراد ۶۵ ساله و بالاتر نیم‌بها، یعنی ۲۰ دلار، باشد:</p><div class="snippet"><pre class="snippet" dir="ltr"><span class="ash">age = 12</span>

<span class="ash">if age &lt; 4:</span>
    <span class="ash">price = 0</span>
<span class="ash">elif age &lt; 18:</span>
    <span class="ash">price = 25</span>
<span class="n" dir="ltr">1</span>elif age &lt; 65:
    price = 40
<span class="n" dir="ltr">2</span>else:
    price = 20

<span class="ash">print(f"Your admission cost is ${price}.")</span></pre></div><p>قسمت عمده‌ی این کد هیچ تغییری نکرده است. حالا دومین بلوک <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">elif</span><span class="rlm">‏</span> در <span class="n" dir="ltr">1</span> بررسی می‌کند که آیا سن شخص زیر ۶۵ سال هست یا خیر. در صورتی که زیر ۶۵ سال باشد، نرخ کامل ۴۰ دلار به او اختصاص داده می‌شود. دقت کنید که مقدار اختصاص داده شده در بلوک <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">else</span><span class="rlm">‏</span> در <span class="n" dir="ltr">2</span> باید ۲۰ دلار باشد، چرا که تنها افرادی که به این بلوک می‌رسند، افراد ۶۵ ساله و بالاتر هستند.</p></div><div class="sect" id="ch05lev2sec13"><a class="bkmk" name="ch05lev2sec13"></a><h4>حذف کردن بلوک <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">else</span><span class="rlm">‏</span></h4>
<p class="noindent">در پایتون، بلوک <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">else</span><span class="rlm">‏</span> در انتهای یک زنجیره‌ی <span class="rlm">‏</span><span class="lr" dir="ltr"><span class="literal">if</span>-<span class="literal">elif</span></span><span class="rlm">‏</span> ضروری نیست. داشتن بلوک <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">else</span><span class="rlm">‏</span> بعضی وقت‌ها مفید است؛ بعضی وقت‌ها روشن‌تر این است که یک دستورالعمل <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">elif</span><span class="rlm">‏</span> دیگر بگذارید که شرط خاص مورد نظر شما را تأمین کند:</p><div class="snippet"><pre class="snippet" dir="ltr">
<span class="ash">age = 12</span>

<span class="ash">if age &lt; 4:</span>
    <span class="ash">price = 0</span>
<span class="ash">elif age &lt; 18:</span>
    <span class="ash">price = 25</span>
<span class="ash">elif age &lt; 65:</span>
    <span class="ash">price = 40</span>
<span class="n" dir="ltr">1</span>elif age &gt;= 65:
    <span class="ash">price = 20</span>

<span class="ash">print(f"Your admission cost is ${price}.")</span></pre></div><p>بلوک اضافه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">elif</span><span class="rlm">‏</span> در <span class="n" dir="ltr">1</span>، در صورتی که شخص ۶۵ ساله یا بالاتر باشد، نرخ ۲۰ دلار را به او اختصاص می‌دهد، که این کمی روشن‌تر از یک بلوک کلی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">else</span><span class="rlm">‏</span> است. با این تغییر، هر بلوک کد باید حتماً در یک وارسی شرطی موفق باشد، تا اجرا شود.</p><a id="p083"></a><p>بلوک <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">else</span><span class="rlm">‏</span> دستوری است که همه‌ی موارد باقی‌مانده را در بر می‌گیرد. این بلوک با هر وضعیتی که مشمول یک وارسی خاص <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">if</span><span class="rlm">‏</span> یا <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">elif</span><span class="rlm">‏</span> نشده باشد، انطباق پیدا می‌کند، و این بعضی وقت‌ها ممکن است شامل داده‌های غیرمعتبر و حتی بدخواهانه نیز باشد. اگر اگر یک شرط پایانی خاص مورد نظر شما باشد، شاید بهتر باشد که بلوک نهایی شما از نوع <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">elif</span><span class="rlm">‏</span> باشد و از بلوک <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">else</span><span class="rlm">‏</span> استفاده نکنید. به این ترتیب، اطمینان بیشتری خواهید داشت که کد شما فقط در شرایط صحیح اجرا خواهد شد.</p></div><div class="sect" id="ch05lev2sec14"><a class="bkmk" name="ch05lev2sec14"></a><h4>وارسی کردن شرط‌های متعدد</h4>
<p class="noindent">زنجیره‌ی <span class="rlm">‏</span><span class="lr" dir="ltr"><span class="literal">if</span>-<span class="literal">elif</span>-<span class="literal">else</span></span><span class="rlm">‏</span> قدرت زیادی دارد، ولی فقط برای مواردی مفید است که می‌خواهید فقط یک وارسی مورد تأیید قرار گیرد و کد آن اجرا شود. همین که پایتون شرطی را پیدا کرد که با موفقیت همراه بود، از بقیه‌ی وارسی‌ها صرف نظر می‌کند. این رفتار مفیدی است، زیرا کارایی بالایی دارد و به شما امکان می‌دهد که از نظر یک شرط خاص، وارسی کنید.</p><p>اما بعضی وقت‌ها مهم است که تمام شرایط مورد نظر وارسی شود. در این حالت، باید از یک رشته دستورالعمل‌های ساده‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">if</span><span class="rlm">‏</span> بدون بلوک <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">elif</span><span class="rlm">‏</span> یا <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">else</span><span class="rlm">‏</span> استفاده کنید. این تکنیک زمانی معنی می‌دهد که بیش از یک شرط می‌تواند <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">True</span><span class="rlm">‏</span> باشد، و شما می‌خواهید بر اساس هر شرطی که <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">True</span><span class="rlm">‏</span> است، عمل کنید.</p><p>دوباره همان مثال پیتزافروشی را در نظر می‌گیریم. اگر کسی پیتزایی با دو نوع چاشنی درخواست کرد، باید مطمئن شوید تا هر دو چاشنی را برای پیتزای او بگذارید:</p><div class="snippet"><div class="snippet-title" dir="ltr">toppings.py</div><pre class="snippet" dir="ltr"><span class="n" dir="ltr">1</span>requested_toppings = ['mushrooms', 'extra cheese']

<span class="n" dir="ltr">2</span>if 'mushrooms' in requested_toppings:
    print("Adding mushrooms.")
<span class="n" dir="ltr">3</span>if 'pepperoni' in requested_toppings:
    print("Adding pepperoni.")
<span class="n" dir="ltr">4</span>if 'extra cheese' in requested_toppings:
    print("Adding extra cheese.")

print("\nFinished making your pizza!")</pre></div><p>ابتدا در <span class="n" dir="ltr">1</span> لیستی ایجاد می‌کنیم که چاشنی‌های درخواستی در آن قرار دارد. دستورالعمل <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">if</span><span class="rlm">‏</span> در <span class="n" dir="ltr">2</span> وارسی می‌کند که آیا چاشنی قارچ درخواست شده است یا نه. اگر چنین باشد، پیامی نمایش داده می‌شود که چاشنی را تأیید می‌کند. وارسی برای پپرونی در <span class="n" dir="ltr">3</span> هم یک دستورالعمل <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">if</span><span class="rlm">‏</span> ساده است، نه یک دستورالعمل <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">elif</span><span class="rlm">‏</span> یا <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">else</span><span class="rlm">‏</span>، بنابراین، این وارسی هم صرف‌نظر از موفق یا ناموفق بودن وارسی قبلی، انجام می‌شود. کد مشخص شده در <span class="n" dir="ltr">4</span> صرف‌نظر از نتیجه‌ی دو وارسی قبل، وارسی می‌کند که آیا پنیر اضافه درخواست شده است یا نه. هر بار که برنامه اجرا می‌شود، این سه وارسی مستقل اجرا می‌شود.</p><p>از آنجا که در این مثال هر کدام از شرط‌ها ارزیابی می‌شود، لذا قارچ و پنیر اضافه هر دو به پیتزا اضافه می‌شود:</p><div class="snippet"><pre class="snippet" dir="ltr">Adding mushrooms.
Adding extra cheese.

Finished making your pizza!</pre></div><a id="p084"></a><p>اگر از یک بلوک <span class="rlm">‏</span><span class="lr" dir="ltr"><span class="literal">if</span>-<span class="literal">elif</span>-<span class="literal">else</span></span><span class="rlm">‏</span> استفاده می‌کردیم، این کد درست اجرا نمی‌شد، چرا که اگر حتی یک وارسی موفق می‌بود، بقیه‌ی وارسی‌ها صورت نمی‌گرفت. در این حالت، کد به‌صورت زیر می‌بود:</p><div class="snippet"><pre class="snippet" dir="ltr"><span class="ash">requested_toppings = ['mushrooms', 'extra cheese']</span>

<span class="ash">if 'mushrooms' in requested_toppings:</span>
    <span class="ash">print("Adding mushrooms.")</span>
elif 'pepperoni' in requested_toppings:
    <span class="ash">print("Adding pepperoni.")</span>
elif 'extra cheese' in requested_toppings:
    <span class="ash">print("Adding extra cheese.")</span>

<span class="ash">print("\nFinished making your pizza!")</span></pre></div><p>وارسی برای <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">'mushrooms'</span><span class="rlm">‏</span> اولین شرطی است که تأیید می‌شود، بنابراین، قارچ به پیتزا اضافه می‌شود. اما مقادیر <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">'extra cheese'</span><span class="rlm">‏</span> و <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">'pepperoni'</span><span class="rlm">‏</span> دیگر بررسی نمی‌شوند، زیرا در زنجیره‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">if-elif-else</span><span class="rlm">‏</span>، وقتی که شرط اول موفق شد، دیگر پایتون شرط‌های بعدی را بررسی نمی‌کند. اولین چاشنی مشتری افزوده می‌شود، ولی بقیه‌ی چاشنی‌ها جا گذاشته می‌شود:</p><div class="snippet"><pre class="snippet" dir="ltr">Adding mushrooms.

Finished making your pizza!</pre></div><p>به‌طور خلاصه، اگر می‌خواهید فقط یکی از بلوک‌های کد را اجرا کنید، از یک زنجیره‌ی <span class="rlm">‏</span><span class="lr" dir="ltr"><span class="literal">if</span>-<span class="literal">elif</span>-<span class="literal">else</span></span><span class="rlm">‏</span> استفاده کنید. اگر لازم باشد که بیش از یک بلوک کد اجرا شود، از یک سری دستورالعمل مستقل <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">if</span><span class="rlm">‏</span> استفاده کنید.</p><div class="sidebar"><h6 class="sidebar-title">خودتان امتحان کنید</h6>
<p class="tiy1"><span class="tiy" id="ch05_tiy03"><span class="tiy-num">۵-۳</span>. <span class="tiy-title">رنگ بیگانه‌ها #۱</span>: </span> تصور کنید که بازیکنی در یک بازی، یک بیگانه‌ی برون‌زمینی را ساقط کرده است. متغیری به نام <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">alien_color</span><span class="rlm">‏</span> ایجاد کنید و مقدار <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">'green'</span><span class="rlm">‏</span>، <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">'yellow'</span><span class="rlm">‏</span>، یا <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">'red'</span><span class="rlm">‏</span> را به آن اختصاص دهید.</p><ul>
<li>یک دستورالعمل <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">if</span><span class="rlm">‏</span> بنویسید و وارسی کنید که آیا رنگ بیگانه سبز است یا خیر. اگر سبز باشد، پیامی نمایش دهید و بگویید که بازیکن ۵ امتیاز کسب کرده است.</li><li>برنامه را به دو صورت بنویسید، به‌طوری که در یکی وارسی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">if</span><span class="rlm">‏</span> موفق است و در دیگری نه. (نمونه‌ی ناموفق هیچ‌گونه خروجی نداشته باشد.)</li></ul><p class="tiy1"><span class="tiy" id="ch05_tiy04"><span class="tiy-num">۵-۴</span>. <span class="tiy-title">رنگ بیگانه‌ها #۲</span>: </span> مانند <span class="ref"><a href="c16-ch05.xhtml#ch05_tiy03">تمرین <span dir="ltr">۵-۳</span></a></span> رنگی برای بیگانه انتخاب کنید، و یک زنجیره‌ی <span class="rlm">‏</span><span class="lr" dir="ltr"><span class="literal">if</span>-<span class="literal">else</span></span><span class="rlm">‏</span> بنویسید.</p><ul>
<li>اگر رنگ بیگانه سبز است، جمله‌ای نمایش دهید که می‌گوید بازیکن به خاطر ساقط کردن بیگانه ۵ امتیاز گرفته است.</li><li>اگر رنگ بیگانه سبز نیست، جمله‌ای بنویسید که می‌گوید که بازیکن ۱۰ امتیاز کسب کرده است.</li><li>نمونه‌ای از برنامه را بنویسید که در آن بلوک <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">if</span><span class="rlm">‏</span> اجرا می‌شود و نمونه‌ی دیگری که در آن بلوک <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">else</span><span class="rlm">‏</span> اجرا می‌شود.</li></ul><a id="p085"></a><p class="tiy1"><span class="tiy" id="ch05_tiy05"><span class="tiy-num">۵-۵</span>. <span class="tiy-title">رنگ‌های بیگانه #۳</span>: </span> زنجیره‌ی <span class="rlm">‏</span><span class="lr" dir="ltr"><span class="literal">if</span>-<span class="literal">else</span></span><span class="rlm">‏</span> خود در <span class="ref"><a href="c16-ch05.xhtml#ch05_tiy04">تمرین <span dir="ltr">۵-۴</span></a></span> را به یک زنجیره‌ی <span class="rlm">‏</span><span class="lr" dir="ltr"><span class="literal">if</span>-<span class="literal">elif</span>-<span class="literal">else</span></span><span class="rlm">‏</span> تبدیل کنید.</p><ul>
<li>اگر بیگانه سبز باشد، پیامی نمایش دهید دایر بر اینکه بازیکن ۵ امتیاز گرفته است.</li><li>اگر بیگانه زرد باشد، پیامی نمایش دهید که بازیکن ۱۰ امتیاز گرفته است.</li><li>اگر بیگانه قرمز باشد، پیامی نمایش دهید که بازیکن ۱۵ امتیاز گرفته است.</li><li>سه نمونه از برنامه را بنویسید، و دقت کنید که هر پیام برای رنگ مربوطه نمایش داده شود.</li></ul><p class="tiy1"><span class="tiy" id="ch05_tiy06"><span class="tiy-num">۵-۶</span>. <span class="tiy-title">مراحل زندگی</span>: </span> یک زنجیره‌ی <span class="rlm">‏</span><span class="lr" dir="ltr"><span class="literal">if</span>-<span class="literal">elif</span>-<span class="literal">else</span></span><span class="rlm">‏</span> بنویسید. مقداری به متغیر <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">age</span><span class="rlm">‏</span> اختصاص دهید، و سپس:</p><ul>
<li>اگر شخص زیر ۲ سال است، پیامی نمایش دهید که بیان می‌کند که او شیرخوار است.</li><li>اگر شخص لااقل ۲ سال سن دارد، ولی کمتر از ۴ سال است، بنویسید که او کودک نوپا است.</li><li>اگر شخص لااقل ۴ سال سن دارد ولی سن او کمتر از ۱۳ سال است، نمایش دهید که او کودک است.</li><li>اگر شخص لااقل ۱۳ ساله است، ولی کمتر از ۲۰ سال سن دارد، در پیام نمایش دهید که او نوجوان است.</li><li>اگر شخص لااقل ۲۰ سال ولی کمتر از ۶۵ سال سن داشته باشد، در پیام خود نمایش دهید که او بزرگسال است.</li><li>در صورتی که شخص ۶۵ ساله یا مسن‌تر است، در پیام خود نمایش دهید که او سالمند است.</li></ul><p class="tiy1"><span class="tiy" id="ch05_tiy07"><span class="tiy-num">۵-۷</span>. <span class="tiy-title">میوه‌ی محبوب</span>: </span> لیستی از میوه‌های مورد علاقه‌ی خود تهیه کنید، و سپس یک سری دستورالعمل‌های مستقل <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">if</span><span class="rlm">‏</span> بنویسید که وجود میوه‌های خاصی را در لیست وارسی می‌کند.</p><ul>
<li>لیستی از سه میوه‌ی محبوب خود تهیه کنید و نام آن را <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">favorite_fruits</span><span class="rlm">‏</span> بگذارید.</li><li>پنج دستورالعمل <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">if</span><span class="rlm">‏</span> بنویسید. هر کدام باید وارسی کند که آیا میوه‌ی خاصی در لیست شما هست یا نه. اگر میوه در لیست موجود باشد، بلوک <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">if</span><span class="rlm">‏</span> باید جمله‌ای نمایش دهد، از قبیل <span class="emphasis"><span class="rlm">‏</span><span class="lr" dir="ltr">You really like bananas!</span><span class="rlm">‏</span></span>.
</li></ul></div></div></div><div class="sect" id="ch05lev1sec4"><a class="bkmk" name="ch05lev1sec4"></a><h3>استفاده از دستورالعمل <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">if</span><span class="rlm">‏</span> با لیست</h3>
<p class="noindent">اگر لیست را با دستورالعمل <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">if</span><span class="rlm">‏</span> ترکیب کنید، می‌توانید کارهای جالبی انجام دهید. می‌توانید به‌صورت مؤثری تغییرات شرایط را در نظر بگیرید، مثلاً اینکه آیا آیتم خاصی در زمان‌های مختلف شیفت در رستوران وجود دارد یا خیر. هم‌چنین، می‌توانید تا حدودی ثابت کنید که کد شما در تمام موقعیت‌های ممکن همان طور که انتظار دارید، رفتار می‌کند.</p><a id="p086"></a><div class="sect" id="ch05lev2sec15"><a class="bkmk" name="ch05lev2sec15"></a><h4>وارسی از نظر آیتم‌های خاص</h4>
<p class="noindent">در ابتدای فصل، مثال ساده‌ای داشتیم که طرز رسیدگی به یک مقدار خاص در لیست مانند <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">'bmw'</span><span class="rlm">‏</span> را که می‌بایست با فرمت دیگری نسبت به مقادیر دیگر لیست نوشته شود، نشان می‌داد. حالا که وارسی‌های شرطی و دستورالعمل <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">if</span><span class="rlm">‏</span> را در حد پایه فراگرفته‌اید، نگاه دقیق‌تری می‌اندازیم به اینکه چگونه می‌توانید در یک لیست با مقادیر خاص کار کنید و در مقابل آن مقادیر رفتار مناسب را به اجرا بگذارید.</p><p>همان مثال پیتزافروشی را ادامه می‌دهیم. در اینجا هر زمان چاشنی جدیدی به پیتزای شما افزوده می‌شود، پیامی نمایش داده می‌شود. کد لازم برای این کار را می‌توان به‌صورت مؤثری نوشت، به این صورت که لیستی از چاشنی‌هایی که هر مشتری درخواست کرده تهیه می‌کنیم، و با استفاده از یک حلقه، هر زمان چاشنی مربوطه به پیتزا اضافه می‌شود، پیام را نمایش می‌دهیم:</p><div class="snippet"><div class="snippet-title" dir="ltr">toppings.py</div><pre class="snippet" dir="ltr">requested_toppings = ['mushrooms', 'green peppers', 'extra cheese']

for requested_topping in requested_toppings:
    print(f"Adding {requested_topping}.")

print("\nFinished making your pizza!")</pre></div><p>خروجی برنامه مشخص است، چون این کد صرفاً یک حلقه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">for</span><span class="rlm">‏</span> ساده است:</p><div class="snippet"><pre class="snippet" dir="ltr">Adding mushrooms.
Adding green peppers.
Adding extra cheese.

Finished making your pizza!</pre></div><p>حالا اگر فلفل سبز پیتزافروشی تمام شود، چه باید کرد؟ با گذاشتن یک دستورالعمل <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">if</span><span class="rlm">‏</span> در داخل حلقه می‌توان این موقعیت را به‌صورت مناسبی پوشش داد:</p><div class="snippet"><pre class="snippet" dir="ltr"><span class="ash">requested_toppings = ['mushrooms', 'green peppers', 'extra cheese']</span>

<span class="ash">for requested_topping in requested_toppings:</span>
<span class="n" dir="ltr">1</span>    if requested_topping == 'green peppers':
        print("Sorry, we are out of green peppers right now.")
<span class="n" dir="ltr">2</span>    else:
        <span class="ash">print(f"Adding {requested_topping}.")</span>

<span class="ash">print("\nFinished making your pizza!")</span></pre></div><p>این بار هر آیتم درخواستی را قبل از افزودن به پیتزا چک می‌کنیم. کد سطر <span class="n" dir="ltr">1</span> وارسی می‌کند ببیند که آیا شخص فلفل سبز درخواست کرده است. بلوک <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">else</span><span class="rlm">‏</span> در سطر <span class="n" dir="ltr">2</span> اطمینان حاصل می‌کند که تمام چاشنی‌های دیگر به پیتزا اضافه خواهد شد.</p><a id="p087"></a><p>خروجی نشان می‌دهد که هر چاشنی درخواستی به‌صورت صحیحی پردازش می‌شود.</p><div class="snippet"><pre class="snippet" dir="ltr">Adding mushrooms.
Sorry, we are out of green peppers right now.
Adding extra cheese.

Finished making your pizza!</pre></div></div><div class="sect" id="ch05lev2sec16"><a class="bkmk" name="ch05lev2sec16"></a><h4>وارسی اینکه لیست خالی نیست</h4>
<p class="noindent">تا اینجا با هر لیستی سر و کار داشتیم، به سادگی فرض کردیم که آن لیست لااقل یک آیتم دارد. ولی به زودی در برنامه‌های ما کاربران اطلاعاتی ارائه خواهند کرد که در لیست ذخیره خواهد شد، یعنی نمی‌توانیم فرض کنیم که هنگام اجرا کردن حلقه، حتماً لااقل یک آیتم در لیست خواهد بود. در این موقعیت، بهتر است قبل از اجرا کردن حلقه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">for</span><span class="rlm">‏</span>، ابتدا مطمئن شویم که لیست خالی نیست.</p><p>به‌عنوان یک مثال، قبل از درست کردن پیتزا وارسی می‌کنیم که لیست چاشنی‌های درخواستی خالی نباشد. اگر لیست خالی باشد، از کاربر می‌پرسیم که آیا واقعاً پیتزای ساده می‌خواهد. اما اگر لیست حالی نباشد، پیتزا را درست مانند مثال‌های قبلی می‌سازیم:</p><div class="snippet"><pre class="snippet" dir="ltr"><span class="n" dir="ltr">1</span>requested_toppings = []

<span class="n" dir="ltr">2</span>if requested_toppings:
    <span class="ash">for requested_topping in requested_toppings:</span>
        <span class="ash">print(f"Adding {requested_topping}.")</span>
    <span class="ash">print("\nFinished making your pizza!")</span>
<span class="n" dir="ltr">3</span>else:
    print("Are you sure you want a plain pizza?")</pre></div><p>این بار با یک لیست خالی از چاشنی‌های درخواستی در <span class="n" dir="ltr">1</span> شروع می‌کنیم. به جای اینکه بلافاصله به سراغ حلقه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">for</span><span class="rlm">‏</span> برویم، وارسی سریعی در <span class="n" dir="ltr">2</span> انجام می‌دهیم. وقتی که نام یک لیست در یک دستورالعمل <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">if</span><span class="rlm">‏</span> استفاده می‌شود، پایتون در صورتی که لیست لااقل یک آیتم داشته باشد، <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">True</span><span class="rlm">‏</span> برمی‌گرداند؛ لیست خالی به <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">False</span><span class="rlm">‏</span> ارزیابی می‌شود. اگر <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">requested_toppings</span><span class="rlm">‏</span> در وارسی شرطی تأیید شود، همان حلقه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">for</span><span class="rlm">‏</span> را که در مثال قبل استفاده کردیم، اجرا می‌کنیم. اگر وارسی شرطی ناموفق باشد، پیامی را در <span class="n" dir="ltr">3</span> نمایش می‌دهیم و از مشتری می‌پرسیم که آیا واقعاً یک پیتزای ساده می‌خواهد.</p><p>در این مورد، لیست خالی است، بنابراین، خروجی از کاربر می‌پرسد که آیا واقعاً پیتزای ساده می‌خواهد:</p><div class="snippet"><pre class="snippet" dir="ltr">Are you sure you want a plain pizza?</pre></div><p>اگر لیست خالی نباشد، هر کدام از چاشنی‌ها که به پیتزا اضافه می‌شود، در خروجی نمایش داده خواهد شد.</p></div><a id="p088"></a><div class="sect" id="ch05lev2sec17"><a class="bkmk" name="ch05lev2sec17"></a><h4>استفاده از لیست‌های متعدد</h4>
<p class="noindent">افراد معمولاً درخواست‌های مختلفی دارند، مخصوصاً اگر بحث بر سر چاشنی پیتزا باشد. مثلاً شاید یک مشتری برای روی پیتزایش، سیب‌زمینی سرخ‌شده‌ی فرانسوی بخواهد. می‌توانید با استفاده از لیست و دستورالعمل <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">if</span><span class="rlm">‏</span>، ابتدا مطمئن شوید که ورودی درست است، و سپس بر اساس آن عمل کنید.</p><p>در اینجا قبل از ساختن پیتزا، ابتدا از نظر درخواست‌های غیرمعمول وارسی می‌کنیم. مثال زیر دو لیست را تعریف می‌کند. لیست اول شامل چاشنی‌های موجود در پیتزافروشی است، و دومی لیستی از چاشنی‌هایی است که کاربر درخواست کرده است. این بار هر کدام از آیتم‌های موجود در <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">requested_toppings</span><span class="rlm">‏</span> قبل از افزوده شدن به پیتزا، از نظر اینکه جزو چاشنی‌های موجود باشد، وارسی می‌شود:</p><div class="snippet"><pre class="snippet" dir="ltr"><span class="n" dir="ltr">1</span>available_toppings = ['mushrooms', 'olives', 'green peppers',
                      'pepperoni', 'pineapple', 'extra cheese']
<span class="n" dir="ltr">2</span>requested_toppings = ['mushrooms', 'french fries', 'extra cheese']

<span class="n" dir="ltr">3</span>for requested_topping in requested_toppings:
<span class="n" dir="ltr">4</span>    if requested_topping in available_toppings:
        print(f"Adding {requested_topping}.")
<span class="n" dir="ltr">5</span>    else:
        print(f"Sorry, we don't have {requested_topping}.")

print("\nFinished making your pizza!")</pre></div><p>در <span class="n" dir="ltr">1</span>، لیستی از چاشنی‌های موجود در پیتزافروشی را تعریف می‌کنیم. دقت کنید که اگر مجموعه‌ی چاشنی‌های پیتزافروشی ثابت باشد، می‌توان از یک چندتایی استفاده کرد. در <span class="n" dir="ltr">2</span>، لیستی از چاشنی‌هایی که یک مشتری درخواست کرده است، تهیه می‌کنیم. دقت کنید که یک درخواست غیرمعمول هم در آن هست: <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">'french fries'</span><span class="rlm">‏</span>. در <span class="n" dir="ltr">3</span>، حلقه‌ای روی لیست چاشنی‌های درخواستی ایجاد می‌کنیم. درون حلقه، ابتدا وارسی می‌کنیم ببینیم که آیا هر چاشنی درخواستی واقعاً در لیست چاشنی‌های موجود هست یا نه <span class="n" dir="ltr">4</span>. اگر باشد، چاشنی را به پیتزا اضافه می‌کنیم. در غیر این صورت، بلوک <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">else</span><span class="rlm">‏</span> در <span class="n" dir="ltr">5</span> اجرا خواهد شد. بلوک <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">else</span><span class="rlm">‏</span> پیامی را نمایش می‌دهد و به کاربر اطلاع می‌دهد که کدام چاشنی‌ها موجود نیست.</p><p>این کد خروجی مرتب و مفیدی را ایجاد می‌کند:</p><div class="snippet"><pre class="snippet" dir="ltr">Adding mushrooms.
Sorry, we don't have french fries.
Adding extra cheese.

Finished making your pizza!</pre></div><p>فقط با چند سطر کد توانستیم یک موقعیت دنیای واقعی را به‌صورت مؤثری مدیریت کنیم!</p><div class="sidebar"><h6 class="sidebar-title">خودتان امتحان کنید</h6>
<a id="p089"></a><p class="tiy1"><span class="tiy" id="ch05_tiy08"><span class="tiy-num">۵-۸</span>. <span class="tiy-title">سلام ادمین</span>: </span> لیستی از پنج تا یا بیشتر نام کاربری ایجاد کنید، که یکی از آن‌ها <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">'admin'</span><span class="rlm">‏</span> باشد. تصور کنید می‌خواهید کدی بنویسید که به کار کاربر پس از لاگین کردن به سایت، خوشامد بگوید. حلقه‌ای روی لیست ایجاد کنید و یک پیام خوشامدگویی برای هر کاربر نمایش دهید:</p><ul>
<li>اگر نام کاربری <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">'admin'</span><span class="rlm">‏</span> است، پیام خوشامدگویی ویژه‌ای نمایش دهید، مثلاً <span class="emphasis"><span class="rlm">‏</span><span class="lr" dir="ltr">Hello admin, would you like to see a status report?</span><span class="rlm">‏</span></span>. </li><li>در غیر این صورت، پیامی عمومی نمایش دهید، مثلاً <span class="emphasis"><span class="rlm">‏</span><span class="lr" dir="ltr">Hello Jaden, thank you for logging in again.</span><span class="rlm">‏</span></span>. </li></ul><p class="tiy1"><span class="tiy" id="ch05_tiy09"><span class="tiy-num">۵-۹</span>. <span class="tiy-title">بدون کاربر</span>: </span> یک وارسی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">if</span><span class="rlm">‏</span> به <span class="rlm">‏</span><span class="ident" dir="ltr">hello_admin.py</span><span class="rlm">‏</span> اضافه کنید و مطمئن شوید که لیست کاربران خالی نیست.</p><ul>
<li>در صورتی که لیست خالی باشد، این پیام را نمایش دهید: <span class="emphasis"><span class="rlm">‏</span><span class="lr" dir="ltr">We need to find some users!</span><span class="rlm">‏</span></span>. </li><li>تمام نام‌های کاربری را از لیست حذف کنید، و دقت کنید که پیام درست نمایش داده شود.</li></ul><p class="tiy1"><span class="tiy" id="ch05_tiy10"><span class="tiy-num">۵-۱۰</span>. <span class="tiy-title">وارسی نام‌های کاربری</span>: </span> کارهای زیر را انجام دهید که مانند یک وب‌سایت واقعی می‌خواهد مطمئن شود که هر نفر یک نام کاربری منحصربه‌فرد دارد.</p><ul>
<li>لیستی از پنج تا یا بیشتر نام کاربری با نام <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">current_users</span><span class="rlm">‏</span> بسازید.</li><li>لیست دیگری از پنج نام کاربری با نام <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">new_users</span><span class="rlm">‏</span> بسازید. دقت کنید که یک یا دو تا از نام‌های کاربری جدید نیز در لیست <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">current_users</span><span class="rlm">‏</span> باشند.</li><li>روی لیست <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">new_users</span><span class="rlm">‏</span> حلقه بزنید و ببینید که آیا هر کدام از نام‌های کاربری جدید قبلاً استفاده شده است. اگر استفاده شده باشد، پیامی نمایش دهید و بگویید که هر شخص باید یک نام کاربری جدید وارد کند. اگر نام کاربری مربوطه قبلاً استفاده نشده است، پیامی نمایش دهید و بگویید که آن نام کاربری موجود است.</li><li>دقت کنید که مقایسه‌ی شما حساس به حروف کوچک و بزرگ نیست. مثلاً اگر قبلاً <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">'John'</span><span class="rlm">‏</span> استفاده شده است، نام کاربری <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">'JOHN'</span><span class="rlm">‏</span> نباید مورد قبول قرار گیرد. (برای این کار، باید یک کپی از <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">current_users</span><span class="rlm">‏</span> ایجاد کنید که حاوی نام‌های کاربری موجود ولی تماماً با حروف کوچک است.)</li></ul><p class="tiy1"><span class="tiy" id="ch05_tiy11"><span class="tiy-num">۵-۱۱</span>. <span class="tiy-title">اعداد ترتیبی</span>: </span> اعداد ترتیبی نشان‌دهنده‌ی جایگاه در لیست هستند، مثلاً <span class="emphasis"><span class="rlm">‏</span><span class="lr" dir="ltr">1st</span><span class="rlm">‏</span></span> (اول) یا <span class="emphasis"><span class="rlm">‏</span><span class="lr" dir="ltr">2nd</span><span class="rlm">‏</span></span> (دوم). اکثر اعداد ترتیبی به <span class="emphasis"><span class="rlm">‏</span><span class="lr" dir="ltr">th</span><span class="rlm">‏</span></span> ختم می‌شوند، به جز ۱، ۲، و ۳. </p><ul>
<li>اعداد ۱ تا ۹ را در یک لیست ذخیره کنید.</li><li>روی لیست حلقه بزنید.</li><li>در داخل حلقه، با استفاده از یک زنجیره‌ی <span class="rlm">‏</span><span class="lr" dir="ltr"><span class="literal">if</span>-<span class="literal">elif</span>-<span class="literal">else</span></span><span class="rlm">‏</span>، پسوند ترتیبی صحیح را برای هر عدد نمایش دهید. خروجی شما باید چیزی شبیه <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">"1st 2nd 3rd 4th 5th 6th 7th 8th 9th"</span><span class="rlm">‏</span> باشد، و هر نتیجه باید در سطر جدیدی باشد.</li></ul></div></div></div><a id="p090"></a><div class="sect" id="ch05lev1sec5"><a class="bkmk" name="ch05lev1sec5"></a><h3>شیوه‌ی فرمت کردن دستورالعمل‌های <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">if</span><span class="rlm">‏</span></h3>
<p class="noindent">در هر کدام از مثال‌های این فصل، عادت‌های خوب را در زمینه‌ی استایل کدنویسی به شما نشان دادیم. تنها توصیه‌ای که شیوه‌نامه‌ی <span class="rlm">‏</span><span class="lr" dir="ltr">PEP 8</span><span class="rlm">‏</span> برای عبارت‌های شرطی ارائه کرده است، این است که دور عملگر مقایسه، از قبیل <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">==</span><span class="rlm">‏</span>، <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">&gt;=</span><span class="rlm">‏</span>، یا <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">&lt;=</span><span class="rlm">‏</span>، از یک اسپیس استفاده کنید. مثلاً این شیوه:</p><div class="snippet"><pre class="snippet" dir="ltr">if age &lt; 4:</pre></div><p>بهتر از شیوه‌ی زیر است:</p><div class="snippet"><pre class="snippet" dir="ltr">if age&lt;4:</pre></div><p>این نوع فاصله‌گذاری تأثیری بر تفسیر کد شما در پایتون ندارد؛ فقط سبب می‌شود که خواندن کد شما برای خودتان و دیگران آسان‌تر باشد.</p><div class="sidebar"><h6 class="sidebar-title">خودتان امتحان کنید</h6>
<p class="tiy1"><span class="tiy" id="ch05_tiy12"><span class="tiy-num">۵-۱۲</span>. <span class="tiy-title">شیوه‌ی کدنویسی</span>: </span> <span class="strong">دستورالعمل‌های <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">if</span><span class="rlm">‏</span>:</span> برنامه‌هایی را که در این فصل نوشته‌اید، بررسی کنید، و مطمئن شوید که شیوه‌ی درست کدنویسی را در وارسی‌های شرطی رعایت کرده باشید.</p><p class="tiy1"><span class="tiy" id="ch05_tiy13"><span class="tiy-num">۵-۱۳</span>. <span class="tiy-title">ایده‌های شما</span>: </span> حالا دیگر نسبت به زمانی که خواندن این کتاب را شروع کردید، توانایی بیشتری در برنامه‌نویسی پیدا کرده‌اید. حالا که درک بهتری پیدا کرده‌اید از اینکه موقعیت‌های دنیای واقعی در برنامه‌ها چگونه مدل‌سازی می‌شوند، شاید مسائلی به ذهنتان برسد که بتوانید آن‌ها را با برنامه‌هایتان حل کنید. به تدریج که مهارت‌های برنامه‌نویسی شما بهتر می‌شود، هر ایده‌ی جدیدی را که درباره‌ی مسائلی که می‌توانید با برنامه‌نویسی حل کنید، به ذهنتان می‌رسد، یادداشت کنید. فکر کنید که چه بازی‌هایی می‌توانید بنویسید، چه مجموعه‌ای داده‌هایی می‌توانید بررسی کنید، و چه اپلیکیشن‌های وبی می‌خواهید ایجاد کنید.</p></div></div><div class="sect" id="ch05lev1sec6"><a class="bkmk" name="ch05lev1sec6"></a><h3>خلاصه</h3>
<p class="noindent">در این فصل، نوشتن عبارت‌های شرطی را که همیشه به <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">True</span><span class="rlm">‏</span> یا <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">False</span><span class="rlm">‏</span> ارزیابی می‌شوند، یاد گرفتید. یاد گرفتید که دستورالعمل‌های <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">if</span><span class="rlm">‏</span> ساده، زنجیره‌های <span class="rlm">‏</span><span class="lr" dir="ltr"><span class="literal">if</span>-<span class="literal">else</span></span><span class="rlm">‏</span>، و زنجیره‌های <span class="rlm">‏</span><span class="lr" dir="ltr"><span class="literal">if</span>-<span class="literal">elif</span>-<span class="literal">else</span></span><span class="rlm">‏</span> بنویسید. با استفاده از این ساختارها می‌توانید وضعیت‌های خاصی را که نیاز به وارسی دارند، شناسایی کنید و مشخص کنید که در چه زمانی در برنامه این شرایط تأمین شده‌اند. یاد گرفتید که ضمن اینکه از حلقه‌ی <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">for</span><span class="rlm">‏</span> و کارایی بالای آن استفاده می‌کنید، با برخی از آیتم‌های موجود در لیست به‌گونه‌ی متفاوتی نسبت به بقیه‌ی آیتم‌ها رفتار کنید. در ضمن، نگاه دیگری به شیوه‌نامه‌ی کدنویسی پایتون داشتیم، تا برنامه‌هایی که می‌نویسید، هرچه هم پیچیده‌تر شوند، باز هم نسبتاً به آسانی قابل خواندن و فهمیدن باشند.</p><p>در <span class="ref"><a href="c17-ch06.xhtml">فصل ۶</a></span>، دیکشنری‌های پایتون را یاد خواهید گرفت. دیکشنری تا حدودی شبیه لیست است، ولی به شما امکان می‌دهد که قطعات اطلاعات را به هم مرتبط کنید. نحوه‌ی ساختن دیکشنری و نحوه‌ی حلقه زدن روی آن، و استفاده از آن در ترکیب با لیست و دستورالعمل <span class="rlm">‏</span><span class="literal" dir="ltr" style="direction:ltr;">if</span><span class="rlm">‏</span> را یاد خواهید گرفت. با فراگیری دیکشنری‌ها، خواهید توانست انواع بیشتری از موقعیت‌های دنیای واقعی را مدل‌سازی کنید.</p></div></div>
				<div class="row pager"><div class="col-md-5 text-center text-md-left pager-prev"><a href="c15-ch04.xhtml"><span xmlns="http://www.w3.org/1999/xhtml"><span>فصل ۴</span>: <span>کار کردن با لیست‌ها</span></span></a></div><div class="col-md-2 text-center pager-title"><a href="c01-cover.xhtml">آغاز</a></div><div class="col-md-5 text-center text-md-right pager-next"><a href="c17-ch06.xhtml"><span xmlns="http://www.w3.org/1999/xhtml"><span>فصل ۶</span>: <span>دیکشنری</span></span></a></div></div></main><aside class="col-md-2 order-md-first"><ul class="nav nav-pills flex-column"><li class="nav-item"><a class="nav-link" href="../">دوره‌ی فشرده‌ی پایتون</a></li><li class="nav-item"><a class="nav-link" href="c06-toc.xhtml">فهرست</a></li></ul></aside></div></div><div class="container"><div id="footer" class="row"><div class="col-sm-6"><p><span>© ۱۴۰۰، قاسم کیانی مقدم.</span></p></div><div class="col-sm-6"><p class="text-right"><span><a target="_blank" rel="me" href="https://linkedin.com/in/ghasemkiani" title="لینکدین"><span class="fab fa-linkedin"></span></a></span><span> </span><span><a target="_blank" rel="me" href="https://github.com/ghasemkiani" title="گیت‌هاب"><span class="fab fa-github"></span></a></span><span> </span><span><a target="_blank" rel="me" href="https://twitter.com/ghasemkiani" title="توئیتر"><span class="fab fa-twitter"></span></a></span><span> </span><span><a target="_blank" rel="me" href="https://facebook.com/ghasemkiani" title="فیس‌بوک"><span class="fab fa-facebook"></span></a></span><span> </span><span><a target="_blank" rel="me" href="https://telegram.me/ghasemkiani" title="تلگرام"><span class="fab fa-telegram"></span></a></span><span> </span><span><a target="_blank" rel="me" href="https://instagram.com/ghasem.kiani" title="اینستاگرام"><span class="fab fa-instagram"></span></a></span><span> </span><span><a target="_blank" rel="me" href="https://mastodon.social/@ghasemkiani" title="ماستودون"><span class="fab fa-mastodon"></span></a></span></p></div></div></div><script crossorigin="anonymous" src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo"></script><script crossorigin="anonymous" src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.6/umd/popper.min.js" integrity="sha384-wHAiFfRlMFy6i5SRaxvfOCifBUQy1xHdJ/yoi7FRNXMRBu5WHdZYu1hA6ZOblgut"></script><script crossorigin="anonymous" src="https://cdn.rtlcss.com/bootstrap/v4.0.0/js/bootstrap.min.js" integrity="sha384-54+cucJ4QbVb99v8dcttx/0JRx4FHMmhOWi4W+xrXpKcsKQodCBwAvu3xxkZAwsH"></script><script src="https://www.googletagmanager.com/gtag/js?id=undefined"></script><script src="data:application/javascript;charset=UTF-8;base64,KCh7aWR9KSA9PiB7Cgl3aW5kb3cuZGF0YUxheWVyID0gd2luZG93LmRhdGFMYXllciB8fCBbXTsKCWZ1bmN0aW9uIGd0YWcoKXtkYXRhTGF5ZXIucHVzaChhcmd1bWVudHMpO30KCWd0YWcoImpzIiwgbmV3IERhdGUoKSk7CgoJZ3RhZygiY29uZmlnIiwgaWQpOwp9KSh7fSk7Cg=="></script></body></html>